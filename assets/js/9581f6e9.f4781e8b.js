"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[9106],{2966:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>p,toc:()=>a});var t=r(74848),i=r(28453);const s={},o="TypeScript with Composition API",p={id:"frontend/vue3/core/typescript/composition-api",title:"TypeScript with Composition API",description:"Typing Component Props",source:"@site/docs/00200-frontend/vue3/010-core/017-typescript/020-composition-api.md",sourceDirName:"00200-frontend/vue3/010-core/017-typescript",slug:"/frontend/vue3/core/typescript/composition-api",permalink:"/dddtdd-docs/frontend/vue3/core/typescript/composition-api",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1720187019e3,sidebarPosition:20,frontMatter:{},sidebar:"docSidebar",previous:{title:"Using Vue with TypeScript",permalink:"/dddtdd-docs/frontend/vue3/core/typescript/overview"},next:{title:"Composition API FAQ",permalink:"/dddtdd-docs/frontend/vue3/core/extras/composition-api-faq"}},c={},a=[{value:"Typing Component Props",id:"typing-component-props",level:2},{value:"Props Default Values",id:"props-default-values",level:3},{value:"Complex prop types",id:"complex-prop-types",level:3},{value:"Typing Component Emits",id:"typing-component-emits",level:2},{value:"Typing ref()",id:"typing-ref",level:2},{value:"Typing reactive()",id:"typing-reactive",level:2},{value:"Typing Event Handlers",id:"typing-event-handlers",level:2},{value:"Typing Template Refs",id:"typing-template-refs",level:2}];function l(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"typescript-with-composition-api",children:"TypeScript with Composition API"}),"\n",(0,t.jsx)(n.h2,{id:"typing-component-props",children:"Typing Component Props"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'<script setup lang="ts">\r\nconst props = defineProps({\r\n  foo: { type: String, required: true },\r\n  bar: Number\r\n})\r\n\r\nprops.foo // string\r\nprops.bar // number | undefined\r\n<\/script>\n'})}),"\n",(0,t.jsx)(n.p,{children:"You can use either type-based declaration OR runtime declaration, but you cannot use both at the same time"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'<script setup lang="ts">\r\ninterface Props {\r\n  foo: string\r\n  bar?: number\r\n}\r\n\r\nconst props = defineProps<Props>()\r\n<\/script>\n'})}),"\n",(0,t.jsx)(n.h3,{id:"props-default-values",children:"Props Default Values"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"export interface Props {\r\n  msg?: string\r\n  labels?: string[]\r\n}\r\n\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  msg: 'hello',\r\n  labels: () => ['one', 'two']\r\n})\n"})}),"\n",(0,t.jsx)(n.h3,{id:"complex-prop-types",children:"Complex prop types"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import type { PropType } from 'vue'\r\n\r\nconst props = defineProps({\r\n  book: Object as PropType<Book>\r\n})\n"})}),"\n",(0,t.jsx)(n.h2,{id:"typing-component-emits",children:"Typing Component Emits"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"<script setup lang=\"ts\">\r\n// runtime\r\nconst emit = defineEmits(['change', 'update'])\r\n\r\n// type-based\r\nconst emit = defineEmits<{\r\n  (e: 'change', id: number): void\r\n  (e: 'update', value: string): void\r\n}>()\r\n\r\n// 3.3+: alternative, more succinct syntax\r\nconst emit = defineEmits<{\r\n  change: [id: number]\r\n  update: [value: string]\r\n}>()\r\n<\/script>\n"})}),"\n",(0,t.jsx)(n.h2,{id:"typing-ref",children:"Typing ref()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// resulting type: Ref<string | number>\r\nconst year = ref<string | number>('2020')\r\n\r\nyear.value = 2020 // ok!\n"})}),"\n",(0,t.jsx)(n.h2,{id:"typing-reactive",children:"Typing reactive()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { reactive } from 'vue'\r\n\r\ninterface Book {\r\n  title: string\r\n  year?: number\r\n}\r\n\r\nconst book: Book = reactive({ title: 'Vue 3 Guide' })\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["It's not recommended to use the generic argument of ",(0,t.jsx)(n.code,{children:"reactive()"})," because the returned type, which handles nested ref unwrapping, is different from the generic argument type."]})}),"\n",(0,t.jsx)(n.h2,{id:"typing-event-handlers",children:"Typing Event Handlers"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"function handleChange(event: Event) {\r\n  console.log((event.target as HTMLInputElement).value)\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"typing-template-refs",children:"Typing Template Refs"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'<script setup lang="ts">\r\nimport { ref, onMounted } from \'vue\'\r\n\r\nconst el = ref<HTMLInputElement | null>(null)\r\n\r\nonMounted(() => {\r\n  el.value?.focus()\r\n})\r\n<\/script>\r\n\r\n<template>\r\n  <input ref="el" />\r\n</template>\n'})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>p});var t=r(96540);const i={},s=t.createContext(i);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function p(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);