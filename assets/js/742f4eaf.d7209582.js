"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[950],{56238:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>l,metadata:()=>r,toc:()=>s});var t=o(74848),i=o(28453);const l={title:"Memory Management"},a=void 0,r={id:"programming-languages/python/c-api/memory",title:"Memory Management",description:"Memory management in Python involves a private heap containing all Python objects and data structures. The management of this private heap is ensured internally by the Python memory manager",source:"@site/docs/00400-programming-languages/python/c-api/1140-memory.md",sourceDirName:"00400-programming-languages/python/c-api",slug:"/programming-languages/python/c-api/memory",permalink:"/dddtdd-docs/programming-languages/python/c-api/memory",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1720187019e3,sidebarPosition:1140,frontMatter:{title:"Memory Management"},sidebar:"docSidebar",previous:{title:"Python Initialization Configuration",permalink:"/dddtdd-docs/programming-languages/python/c-api/init_config"},next:{title:"Object Implementation Support",permalink:"/dddtdd-docs/programming-languages/python/c-api/objimpl"}},c={},s=[{value:"Allocator Domains",id:"allocator-domains",level:2},{value:"Raw Memory Interface",id:"raw-memory-interface",level:2},{value:"Memory Interface",id:"memory-interface",level:2},{value:"Object allocators",id:"object-allocators",level:2},{value:"The pymalloc allocator",id:"the-pymalloc-allocator",level:2}];function d(e){const n={code:"code",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Memory management in Python involves a ",(0,t.jsx)(n.strong,{children:"private heap containing all Python objects and data structures"}),". The management of this private heap is ensured internally by the Python memory manager"]}),"\n",(0,t.jsxs)(n.p,{children:["On top of the raw memory allocator, several ",(0,t.jsx)(n.strong,{children:"object-specific allocators"})," operate on the same heap and implement distinct memory management policies adapted to the peculiarities of every object type"]}),"\n",(0,t.jsx)(n.h2,{id:"allocator-domains",children:"Allocator Domains"}),"\n",(0,t.jsx)(n.p,{children:"All allocating functions belong to one of three different \u201cdomains\u201d"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Raw domain: intended for allocating memory for general-purpose memory buffers where the allocation must go to the system allocator or where the allocator can operate without the GIL. The memory is requested directly to the system."}),"\n",(0,t.jsx)(n.li,{children:"\u201cMem\u201d domain: intended for allocating memory for Python buffers and general-purpose memory buffers where the allocation must be performed with the GIL held. The memory is taken from the Python private heap."}),"\n",(0,t.jsx)(n.li,{children:"Object domain: intended for allocating memory belonging to Python objects. The memory is taken from the Python private heap."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"raw-memory-interface",children:"Raw Memory Interface"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"void *PyMem_RawMalloc(size_t n)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"void *PyMem_RawCalloc(size_t nelem, size_t elsize)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"void *PyMem_RawRealloc(void *p, size_t n)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"void PyMem_RawFree(void *p)"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"memory-interface",children:"Memory Interface"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"void *PyMem_Malloc(size_t n)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"void *PyMem_Calloc(size_t nelem, size_t elsize)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"void *PyMem_Realloc(void *p, size_t n)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"void PyMem_Free(void *p)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"PyMem_New(TYPE, n)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"PyMem_Resize(p, TYPE, n)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"void PyMem_Del(void *p)"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"object-allocators",children:"Object allocators"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"void *PyObject_Malloc(size_t n)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"void *PyObject_Calloc(size_t nelem, size_t elsize)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"void *PyObject_Realloc(void *p, size_t n)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"void PyObject_Free(void *p)"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"the-pymalloc-allocator",children:"The pymalloc allocator"}),"\n",(0,t.jsxs)(n.p,{children:["Python has a pymalloc allocator optimized for small objects (smaller or equal to 512 bytes) with a short lifetime. It uses memory mappings called \u201carenas\u201d with a fixed size of 256 KiB. It falls back to ",(0,t.jsx)(n.code,{children:"PyMem_RawMalloc()"})," and ",(0,t.jsx)(n.code,{children:"PyMem_RawRealloc()"})," for allocations larger than 512 bytes."]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>r});var t=o(96540);const i={},l=t.createContext(i);function a(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);