"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[4415],{43586:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var t=r(74848),i=r(28453);const a={},c=void 0,l={id:"programming-languages/golang/grpc/note",title:"note",description:"Basics tutorial",source:"@site/docs/00400-programming-languages/golang/grpc/note.md",sourceDirName:"00400-programming-languages/golang/grpc",slug:"/programming-languages/golang/grpc/note",permalink:"/dddtdd-docs/programming-languages/golang/grpc/note",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1720187019e3,frontMatter:{},sidebar:"docSidebar",previous:{title:"grpc-libs",permalink:"/dddtdd-docs/programming-languages/golang/grpc/grpc-libs"},next:{title:"how-to-write-go-code",permalink:"/dddtdd-docs/programming-languages/golang/how-to-write-go-code"}},o={},s=[{value:"Basics tutorial",id:"basics-tutorial",level:2},{value:"Why use gRPC",id:"why-use-grpc",level:3},{value:"Generating client and server code",id:"generating-client-and-server-code",level:3},{value:"Server-side streaming RPC",id:"server-side-streaming-rpc",level:3},{value:"Client-side streaming RPC",id:"client-side-streaming-rpc",level:3},{value:"Starting the server",id:"starting-the-server",level:3},{value:"Creating a stub",id:"creating-a-stub",level:3},{value:"ClientConn.NewStream",id:"clientconnnewstream",level:3},{value:"grpc module",id:"grpc-module",level:2},{value:"Common",id:"common",level:3},{value:"Client",id:"client",level:3},{value:"Server",id:"server",level:3},{value:"PROTOCOL-HTTP2",id:"protocol-http2",level:2},{value:"metadata",id:"metadata",level:2},{value:"Sending and receiving metadata - client side",id:"sending-and-receiving-metadata---client-side",level:3},{value:"Sending metadata",id:"sending-metadata",level:4},{value:"Receiving metadata",id:"receiving-metadata",level:4},{value:"Sending and receiving metadata - server side",id:"sending-and-receiving-metadata---server-side",level:3},{value:"Receiving metadata",id:"receiving-metadata-1",level:4},{value:"Sending metadata",id:"sending-metadata-1",level:4},{value:"Interceptor",id:"interceptor",level:4},{value:"Keepalive",id:"keepalive",level:2},{value:"RPC Errors",id:"rpc-errors",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"basics-tutorial",children:"Basics tutorial"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://grpc.io/docs/languages/go/basics/",children:"https://grpc.io/docs/languages/go/basics/"})}),"\n",(0,t.jsx)(n.h3,{id:"why-use-grpc",children:"Why use gRPC"}),"\n",(0,t.jsx)(n.p,{children:"all the complexity of communication between different languages and environments is handled for you by gRPC.\nWe also get all the advantages of working with protocol buffers, including efficient serialization, a simple IDL,\nand easy interface updating"}),"\n",(0,t.jsx)(n.h3,{id:"generating-client-and-server-code",children:"Generating client and server code"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"protoc --go_out=. --go_opt=paths=source_relative \\\n    --go-grpc_out=. --go-grpc_opt=paths=source_relative \\\n    routeguide/route_guide.proto\n"})}),"\n",(0,t.jsx)(n.h3,{id:"server-side-streaming-rpc",children:"Server-side streaming RPC"}),"\n",(0,t.jsx)(n.p,{children:"we return a nil error to tell gRPC that we\u2019ve finished writing responses.\nShould any error happen in this call, we return a non-nil error; the gRPC layer will translate it into an appropriate RPC status to be sent on the wire"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"func (s *routeGuideServer) ListFeatures(rect *pb.Rectangle, stream pb.RouteGuide_ListFeaturesServer) error {\n  for _, feature := range s.savedFeatures {\n\n      if err := stream.Send(feature); err != nil {\n\n  return nil\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"client-side-streaming-rpc",children:"Client-side streaming RPC"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"func (s *routeGuideServer) RecordRoute(stream pb.RouteGuide_RecordRouteServer) error {\n\n  for {\n    point, err := stream.Recv()\n    if err == io.EOF {\n      endTime := time.Now()\n      return stream.SendAndClose(&pb.RouteSummary{\n        PointCount:   pointCount,\n        FeatureCount: featureCount,\n        Distance:     distance,\n        ElapsedTime:  int32(endTime.Sub(startTime).Seconds()),\n      })\n    }\n    if err != nil {\n      return err\n    }\n"})}),"\n",(0,t.jsx)(n.h3,{id:"starting-the-server",children:"Starting the server"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func main() {\n\tflag.Parse()\n\tlis, err := net.Listen("tcp", fmt.Sprintf("localhost:%d", *port))\n\tif err != nil {\n\t\tlog.Fatalf("failed to listen: %v", err)\n\t}\n\tvar opts []grpc.ServerOption\n\tif *tls {\n\t\tif *certFile == "" {\n\t\t\t*certFile = data.Path("x509/server_cert.pem")\n\t\t}\n\t\tif *keyFile == "" {\n\t\t\t*keyFile = data.Path("x509/server_key.pem")\n\t\t}\n\t\tcreds, err := credentials.NewServerTLSFromFile(*certFile, *keyFile)\n\t\tif err != nil {\n\t\t\tlog.Fatalf("Failed to generate credentials: %v", err)\n\t\t}\n\t\topts = []grpc.ServerOption{grpc.Creds(creds)}\n\t}\n\tgrpcServer := grpc.NewServer(opts...)\n\tpb.RegisterRouteGuideServer(grpcServer, newServer())\n\tgrpcServer.Serve(lis)\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"creating-a-stub",children:"Creating a stub"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'\tvar opts []grpc.DialOption\n\tif *tls {\n\t\tif *caFile == "" {\n\t\t\t*caFile = data.Path("x509/ca_cert.pem")\n\t\t}\n\t\tcreds, err := credentials.NewClientTLSFromFile(*caFile, *serverHostOverride)\n\t\tif err != nil {\n\t\t\tlog.Fatalf("Failed to create TLS credentials: %v", err)\n\t\t}\n\t\topts = append(opts, grpc.WithTransportCredentials(creds))\n\t} else {\n\t\topts = append(opts, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\t}\n\n\tconn, err := grpc.Dial(*serverAddr, opts...)\n\tif err != nil {\n\t\tlog.Fatalf("fail to dial: %v", err)\n\t}\n\tdefer conn.Close()\n\tclient := pb.NewRouteGuideClient(conn)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"clientconnnewstream",children:"ClientConn.NewStream"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://pkg.go.dev/google.golang.org/grpc#ClientConn.NewStream",children:"https://pkg.go.dev/google.golang.org/grpc#ClientConn.NewStream"})}),"\n",(0,t.jsx)(n.p,{children:"To ensure resources are not leaked due to the stream returned, one of the following actions must be performed:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Call Close on the ClientConn."}),"\n",(0,t.jsx)(n.li,{children:"Cancel the context provided."}),"\n",(0,t.jsx)(n.li,{children:"Call RecvMsg until a non-nil error is returned. A protobuf-generated client-streaming RPC, for instance, might use the helper function CloseAndRecv (note that CloseSend does not Recv, therefore is not guaranteed to release all resources)."}),"\n",(0,t.jsx)(n.li,{children:"Receive a non-nil, non-io.EOF error from Header or SendMsg"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"grpc-module",children:"grpc module"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://pkg.go.dev/google.golang.org/grpc",children:"https://pkg.go.dev/google.golang.org/grpc"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'import "google.golang.org/grpc"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"common",children:"Common"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func SendHeader(ctx context.Context, md metadata.MD) error"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func SetHeader(ctx context.Context, md metadata.MD) error"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func Header(md *metadata.MD) CallOption"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func OnFinish(onFinish func(err error)) CallOption"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func Peer(p *peer.Peer) CallOption"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"client",children:"Client"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"type CallOption interface"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func WaitForReady(waitForReady bool) CallOption"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"type ClientConn struct"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func Dial(target string, opts ...DialOption) (*ClientConn, error)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func DialContext(ctx context.Context, target string, opts ...DialOption) (conn *ClientConn, err error)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func (cc *ClientConn) Close() error"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func (cc *ClientConn) GetState() connectivity.State"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"type ClientStream interface"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"type ConnectParams struct"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"type ContentSubtypeCallOption struct"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"type DialOption interface"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func FailOnNonTempDialError(f bool) DialOption"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func WithAuthority(a string) DialOption"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func WithBlock() DialOption"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func WithChainStreamInterceptor(interceptors ...StreamClientInterceptor) DialOption"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func WithChainUnaryInterceptor(interceptors ...UnaryClientInterceptor) DialOption"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func WithConnectParams(p ConnectParams) DialOption"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func WithCredentialsBundle(b credentials.Bundle) DialOption"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func WithDefaultCallOptions(cos ...CallOption) DialOption"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func WithDisableHealthCheck() DialOption"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func WithDisableRetry() DialOption"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func WithKeepaliveParams(kp keepalive.ClientParameters) DialOption"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func WithStreamInterceptor(f StreamClientInterceptor) DialOption"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func WithTransportCredentials(creds credentials.TransportCredentials) DialOption"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func WithUnaryInterceptor(f UnaryClientInterceptor) DialOption"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func WithUserAgent(s string) DialOption"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"type EmptyCallOption struct{}"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"type EmptyDialOption struct{}"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"type FailFastCallOption struct"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"type HeaderCallOption struct"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"type OnFinishCallOption struct"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"type UnaryClientInterceptor func(ctx context.Context, method string, req, reply interface{}, cc *ClientConn, invoker UnaryInvoker, opts ...CallOption) error"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"server",children:"Server"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"type EmptyServerOption struct{}"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"type Server struct"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func NewServer(opt ...ServerOption) *Server"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func (s *Server) GracefulStop()"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func (s *Server) RegisterService(sd *ServiceDesc, ss interface{})"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func (s *Server) Serve(lis net.Listener) error"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func (s *Server) Stop()"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"type ServerOption interface"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func ChainStreamInterceptor(interceptors ...StreamServerInterceptor) ServerOption"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func ChainUnaryInterceptor(interceptors ...UnaryServerInterceptor) ServerOption"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func ConnectionTimeout(d time.Duration) ServerOption"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func Creds(c credentials.TransportCredentials) ServerOption"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func KeepaliveEnforcementPolicy(kep keepalive.EnforcementPolicy) ServerOption"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func KeepaliveParams(kp keepalive.ServerParameters) ServerOption"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func MaxConcurrentStreams(n uint32) ServerOption"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func NumStreamWorkers(numServerWorkers uint32) ServerOption"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func StreamInterceptor(i StreamServerInterceptor) ServerOption"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func UnaryInterceptor(i UnaryServerInterceptor) ServerOption"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"type ServerStream interface"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"type ServerTransportStream interface"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"func ServerTransportStreamFromContext(ctx context.Context) ServerTransportStream"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"type UnaryServerInterceptor func(ctx context.Context, req interface{}, info *UnaryServerInfo, handler UnaryHandler) (resp interface{}, err error)"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"protocol-http2",children:"PROTOCOL-HTTP2"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md",children:"https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md"})}),"\n",(0,t.jsxs)(n.p,{children:['HTTP2 requires that reserved headers, ones starting with ":" appear before all other headers.\nAdditionally implementations should send Timeout immediately after the reserved headers and\nthey should send the ',(0,t.jsx)(n.strong,{children:"Call-Definition"})," headers before sending ",(0,t.jsx)(n.strong,{children:"Custom-Metadata"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Call-Definition\u5c31\u662f\u51e0\u4e2a\u6807\u51c6header\uff0cCustom-Metadata\u5c31\u662fcustom header"}),"\n",(0,t.jsx)(n.p,{children:"Custom-Metadata is an arbitrary set of key-value pairs defined by the application layer."}),"\n",(0,t.jsx)(n.h2,{id:"metadata",children:"metadata"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://github.com/grpc/grpc-go/blob/v1.54.0/Documentation/grpc-metadata.md",children:"https://github.com/grpc/grpc-go/blob/v1.54.0/Documentation/grpc-metadata.md"})}),"\n",(0,t.jsx)(n.h3,{id:"sending-and-receiving-metadata---client-side",children:"Sending and receiving metadata - client side"}),"\n",(0,t.jsx)(n.h4,{id:"sending-metadata",children:"Sending metadata"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'// create a new context with some metadata\nctx := metadata.AppendToOutgoingContext(ctx, "k1", "v1", "k1", "v2", "k2", "v3")\n\n// later, add some more metadata to the context (e.g. in an interceptor)\nctx := metadata.AppendToOutgoingContext(ctx, "k3", "v4")\n\n// make unary RPC\nresponse, err := client.SomeRPC(ctx, someRequest)\n\n// or make streaming RPC\nstream, err := client.SomeStreamingRPC(ctx)\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'// create a new context with some metadata\nmd := metadata.Pairs("k1", "v1", "k1", "v2", "k2", "v3")\nctx := metadata.NewOutgoingContext(context.Background(), md)\n\n// later, add some more metadata to the context (e.g. in an interceptor)\nsend, _ := metadata.FromOutgoingContext(ctx)\nnewMD := metadata.Pairs("k3", "v3")\nctx = metadata.NewOutgoingContext(ctx, metadata.Join(send, newMD))\n'})}),"\n",(0,t.jsx)(n.h4,{id:"receiving-metadata",children:"Receiving metadata"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"var header, trailer metadata.MD // variable to store header and trailer\nr, err := client.SomeRPC(\n    ctx,\n    someRequest,\n    grpc.Header(&header),    // will retrieve header\n    grpc.Trailer(&trailer),  // will retrieve trailer\n)\n\n// do something with header and trailer\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"stream, err := client.SomeStreamingRPC(ctx)\n\n// retrieve header\nheader, err := stream.Header()\n\n// retrieve trailer\ntrailer := stream.Trailer()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"sending-and-receiving-metadata---server-side",children:"Sending and receiving metadata - server side"}),"\n",(0,t.jsx)(n.h4,{id:"receiving-metadata-1",children:"Receiving metadata"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"func (s *server) SomeRPC(ctx context.Context, in *pb.someRequest) (*pb.someResponse, error) {\n    md, ok := metadata.FromIncomingContext(ctx)\n    // do something with metadata\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"func (s *server) SomeStreamingRPC(stream pb.Service_SomeStreamingRPCServer) error {\n    md, ok := metadata.FromIncomingContext(stream.Context()) // get context from stream\n    // do something with metadata\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"sending-metadata-1",children:"Sending metadata"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func (s *server) SomeRPC(ctx context.Context, in *pb.someRequest) (*pb.someResponse, error) {\n    // create and send header\n    header := metadata.Pairs("header-key", "val")\n    grpc.SendHeader(ctx, header)\n    // create and set trailer\n    trailer := metadata.Pairs("trailer-key", "val")\n    grpc.SetTrailer(ctx, trailer)\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func (s *server) SomeStreamingRPC(stream pb.Service_SomeStreamingRPCServer) error {\n    // create and send header\n    header := metadata.Pairs("header-key", "val")\n    stream.SendHeader(header)\n    // create and set trailer\n    trailer := metadata.Pairs("trailer-key", "val")\n    stream.SetTrailer(trailer)\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"interceptor",children:"Interceptor"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func unaryInterceptor(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n\tmd, ok := metadata.FromIncomingContext(ctx)\n\tif !ok {\n\t\treturn nil, errMissingMetadata\n\t}\n\n\tmd.Append("key1", "value1")\n\tctx = metadata.NewIncomingContext(ctx, md)\n\n\treturn handler(ctx, req)\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'type wrappedStream struct {\n\tgrpc.ServerStream\n\tctx context.Context\n}\n\nfunc (s *wrappedStream) Context() context.Context {\n\treturn s.ctx\n}\n\nfunc streamInterceptor(srv interface{}, ss grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler) error {\n\tmd, ok := metadata.FromIncomingContext(ss.Context())\n\tif !ok {\n\t\treturn errMissingMetadata\n\t}\n\n\tmd.Append("key1", "value1")\n\tctx := metadata.NewIncomingContext(ss.Context(), md)\n\n\treturn handler(srv, &wrappedStream{ss, ctx})\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"keepalive",children:"Keepalive"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://github.com/grpc/grpc-go/blob/v1.54.0/Documentation/keepalive.md",children:"https://github.com/grpc/grpc-go/blob/v1.54.0/Documentation/keepalive.md"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://pkg.go.dev/google.golang.org/grpc/keepalive",children:"https://pkg.go.dev/google.golang.org/grpc/keepalive"})}),"\n",(0,t.jsx)(n.p,{children:"Keepalive can be useful to detect TCP level connection failures."}),"\n",(0,t.jsx)(n.p,{children:'Another usage is (as the name suggests) to keep the connection alive. For example in cases where\nthe L4 proxies are configured to kill "idle" connections. Sending pings would make the connections not "idle".'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"func WithKeepaliveParams(kp keepalive.ClientParameters) DialOption\n"})}),"\n",(0,t.jsx)(n.h2,{id:"rpc-errors",children:"RPC Errors"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://github.com/grpc/grpc-go/blob/v1.54.0/Documentation/rpc-errors.md",children:"https://github.com/grpc/grpc-go/blob/v1.54.0/Documentation/rpc-errors.md"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'st := status.New(codes.NotFound, "some description")\nerr := st.Err()\n\n// vs.\n\nerr := status.Error(codes.NotFound, "some description")\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'\t\tst := status.New(codes.ResourceExhausted, "Request limit exceeded.")\n\t\tds, err := st.WithDetails(\n\t\t\t&epb.QuotaFailure{\n\t\t\t\tViolations: []*epb.QuotaFailure_Violation{{\n\t\t\t\t\tSubject:     fmt.Sprintf("name:%s", in.Name),\n\t\t\t\t\tDescription: "Limit one greeting per person",\n\t\t\t\t}},\n\t\t\t},\n\t\t)\n\t\tif err != nil {\n\t\t\treturn nil, st.Err()\n\t\t}\n\t\treturn nil, ds.Err()\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>l});var t=r(96540);const i={},a=t.createContext(i);function c(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);