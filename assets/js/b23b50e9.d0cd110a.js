"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[5817],{36535:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>a,frontMatter:()=>t,metadata:()=>l,toc:()=>o});var r=s(74848),i=s(28453);const t={title:"Parsing arguments and building values"},c=void 0,l={id:"programming-languages/python/c-api/utilities-arg",title:"Parsing arguments and building values",description:"The first three of these functions described, PyArgParseTuple(), PyArgParseTupleAndKeywords(), and PyArg_Parse(), all use format strings which are used to tell the function about the expected arguments.",source:"@site/docs/00400-programming-languages/python/c-api/0630-utilities-arg.md",sourceDirName:"00400-programming-languages/python/c-api",slug:"/programming-languages/python/c-api/utilities-arg",permalink:"/dddtdd-docs/programming-languages/python/c-api/utilities-arg",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1720187019e3,sidebarPosition:630,frontMatter:{title:"Parsing arguments and building values"},sidebar:"docSidebar",previous:{title:"Importing Modules",permalink:"/dddtdd-docs/programming-languages/python/c-api/utilities-import"},next:{title:"String conversion and formatting",permalink:"/dddtdd-docs/programming-languages/python/c-api/utilities-conversion"}},d={},o=[{value:"Parsing arguments",id:"parsing-arguments",level:2},{value:"Strings and buffers",id:"strings-and-buffers",level:3},{value:"Numbers",id:"numbers",level:3},{value:"Other objects",id:"other-objects",level:3},{value:"API Functions",id:"api-functions",level:3},{value:"Building values",id:"building-values",level:2}];function h(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["The first three of these functions described, ",(0,r.jsx)(n.code,{children:"PyArg_ParseTuple()"}),", ",(0,r.jsx)(n.code,{children:"PyArg_ParseTupleAndKeywords()"}),", and ",(0,r.jsx)(n.code,{children:"PyArg_Parse()"}),", all use ",(0,r.jsx)(n.strong,{children:"format strings which are used to tell the function about the expected arguments"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"parsing-arguments",children:"Parsing arguments"}),"\n",(0,r.jsxs)(n.p,{children:["A format string consists of zero or more \u201cformat units.\u201d A format unit describes one Python object; it is usually ",(0,r.jsx)(n.strong,{children:"a single character or a parenthesized sequence of format units"})]}),"\n",(0,r.jsxs)(n.p,{children:["the quoted form is the format unit; the entry in ",(0,r.jsx)(n.code,{children:"(round)"})," parentheses is the Python object type that matches the format unit; and the entry in ",(0,r.jsx)(n.code,{children:"[square]"})," brackets is the type of the C variable(s) whose address should be passed"]}),"\n",(0,r.jsx)(n.h3,{id:"strings-and-buffers",children:"Strings and buffers"}),"\n",(0,r.jsx)(n.p,{children:"These formats allow accessing an object as a contiguous chunk of memory."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Formats such as ",(0,r.jsx)(n.code,{children:"y*"})," and ",(0,r.jsx)(n.code,{children:"s*"})," fill a ",(0,r.jsx)(n.code,{children:"Py_buffer"})," structure, you have to call ",(0,r.jsx)(n.code,{children:"PyBuffer_Release()"})," after you have finished processing the data"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"es"}),", ",(0,r.jsx)(n.code,{children:"es#"}),", ",(0,r.jsx)(n.code,{children:"et"})," and ",(0,r.jsx)(n.code,{children:"et#"})," formats allocate the result buffer. You have to call ",(0,r.jsx)(n.code,{children:"PyMem_Free()"})," after you have finished processing the data"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Other formats take a str or a read-only bytes-like object, such as bytes, and provide a ",(0,r.jsx)(n.code,{children:"const char *"})," pointer to its buffer. In this case the buffer is \u201cborrowed\u201d: it is managed by the corresponding Python object, and shares the lifetime of this object. You won\u2019t have to release any memory yourself"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"s (str) [const char *]"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"s* (str or bytes-like object) [Py_buffer]"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"s# (str, read-only bytes-like object) [const char *, Py_ssize_t]"}),": Like ",(0,r.jsx)(n.code,{children:"s*"}),", except that it provides a borrowed buffer"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"z (str or None) [const char *]"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"z* (str, bytes-like object or None) [Py_buffer]"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"z# (str, read-only bytes-like object or None) [const char *, Py_ssize_t]"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"y (read-only bytes-like object) [const char *]"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"y* (bytes-like object) [Py_buffer]"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"y# (read-only bytes-like object) [const char *, Py_ssize_t]"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"S (bytes) [PyBytesObject *]"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Y (bytearray) [PyByteArrayObject *]"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"u (str) [const Py_UNICODE *]"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"u# (str) [const Py_UNICODE *, Py_ssize_t]"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Z (str or None) [const Py_UNICODE *]"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Z# (str or None) [const Py_UNICODE *, Py_ssize_t]"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"U (str) [PyObject *]"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"w* (read-write bytes-like object) [Py_buffer]"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"es (str) [const char *encoding, char **buffer]"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"et (str, bytes or bytearray) [const char *encoding, char **buffer]"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"es# (str) [const char *encoding, char **buffer, Py_ssize_t *buffer_length]"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"et# (str, bytes or bytearray) [const char *encoding, char **buffer, Py_ssize_t *buffer_length]"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"numbers",children:"Numbers"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"b (int) [unsigned char]"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"B (int) [unsigned char]"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"h (int) [short int]"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"H (int) [unsigned short int]"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"i (int) [int]"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"I (int) [unsigned int]"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"l (int) [long int]"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"k (int) [unsigned long]"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"L (int) [long long]"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"K (int) [unsigned long long]"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"n (int) [Py_ssize_t]"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"c (bytes or bytearray of length 1) [char]"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"C (str of length 1) [int]"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"f (float) [float]"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"d (float) [double]"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"D (complex) [Py_complex]"})}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"other-objects",children:"Other objects"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"O (object) [PyObject *]"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"O! (object) [typeobject, PyObject *]"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"O& (object) [converter, anything]"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"p (bool) [int]"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"(items) (tuple) [matching-items]"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"|"}),": Indicates that the remaining arguments in the Python argument list are optional"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$"}),": Indicates that the remaining arguments in the Python argument list are keyword-only. Currently, all keyword-only arguments must also be optional arguments, so ",(0,r.jsx)(n.code,{children:"|"})," must always be specified before ",(0,r.jsx)(n.code,{children:"$"})," in the format string"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:":"}),": The list of format units ends here; the string after the colon is used as the function name in error messages"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:";"}),": The list of format units ends here; the string after the semicolon is used as the error message instead of the default error message"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Note that ",(0,r.jsx)(n.strong,{children:"any Python object references which are provided to the caller are borrowed references"}),"; do not release them"]}),"\n",(0,r.jsx)(n.h3,{id:"api-functions",children:"API Functions"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"int PyArg_ParseTuple(PyObject *args, const char *format, ...)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"int PyArg_ParseTupleAndKeywords(PyObject *args, PyObject *kw, const char *format, char *keywords[], ...)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"int PyArg_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, ...)"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"building-values",children:"Building values"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"PyObject *Py_BuildValue(const char *format, ...)"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The characters ",(0,r.jsx)(n.strong,{children:"space, tab, colon and comma are ignored"})," in format strings (but not within format units such as s#). This can be used to make long format strings a tad more readable"]})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>l});var r=s(96540);const i={},t=r.createContext(i);function c(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);