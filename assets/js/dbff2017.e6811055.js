"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[7183],{83968:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var o=n(74848),s=n(28453);const i={},r=void 0,a={id:"programming-languages/python/reference/import",title:"import",description:"https://docs.python.org/3/reference/import.html",source:"@site/docs/00400-programming-languages/python/reference/import.md",sourceDirName:"00400-programming-languages/python/reference",slug:"/programming-languages/python/reference/import",permalink:"/dddtdd-docs/programming-languages/python/reference/import",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1720187019e3,frontMatter:{},sidebar:"docSidebar",previous:{title:"2020-0632-Deprecate-distutils-module",permalink:"/dddtdd-docs/programming-languages/python/pep/2020-0632-Deprecate-distutils-module"},next:{title:"enum",permalink:"/dddtdd-docs/programming-languages/python/std-libs/enum"}},l={},d=[{value:"importlib",id:"importlib",level:2},{value:"packages",id:"packages",level:2},{value:"Searching",id:"searching",level:2}];function c(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://docs.python.org/3/reference/import.html",children:"https://docs.python.org/3/reference/import.html"})}),"\n",(0,o.jsxs)(t.p,{children:["The import statement combines two operations; it ",(0,o.jsx)(t.strong,{children:"searches"})," for the named module, then it ",(0,o.jsx)(t.strong,{children:"binds"})," the results of that search to a name in the local scope. The search operation of the import statement is defined as a call to the ",(0,o.jsx)(t.code,{children:"__import__()"})," function, with the appropriate arguments."]}),"\n",(0,o.jsxs)(t.p,{children:["When a module is first imported, Python searches for the module and if found, it creates a ",(0,o.jsx)(t.strong,{children:"module object"}),", initializing it."]}),"\n",(0,o.jsx)(t.h2,{id:"importlib",children:"importlib"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"importlib.import_module()"})}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"packages",children:"packages"}),"\n",(0,o.jsxs)(t.p,{children:["It\u2019s important to keep in mind that all packages are modules, but not all modules are packages. Or put another way, packages are just a special kind of module. Specifically, any module that contains a ",(0,o.jsx)(t.code,{children:"__path__"})," attribute is considered a package."]}),"\n",(0,o.jsx)(t.h2,{id:"searching",children:"Searching"}),"\n",(0,o.jsx)(t.p,{children:"The first place checked during import search is sys.modules. This mapping serves as a cache of all modules that have been previously imported"}),"\n",(0,o.jsxs)(t.p,{children:["Beware though, as if you keep a reference to the module object, invalidate its cache entry in sys.modules, and then re-import the named module, the two module objects will not be the same. By contrast, ",(0,o.jsx)(t.code,{children:"importlib.reload()"})," will reuse the same module object, and simply reinitialise the module contents by rerunning the module\u2019s code."]}),"\n",(0,o.jsxs)(t.p,{children:["Python includes a number of default finders and importers. The first one knows how to locate ",(0,o.jsx)(t.strong,{children:"built-in modules"}),", and the second knows how to locate ",(0,o.jsx)(t.strong,{children:"frozen modules"}),". A third default finder searches an ",(0,o.jsx)(t.strong,{children:"import path"})," for modules. The import path is a list of locations that may name file system paths or zip files. It can also be extended to search for any locatable resource, such as those identified by URLs."]}),"\n",(0,o.jsxs)(t.p,{children:["When the named module is not found in sys.modules, Python next searches ",(0,o.jsx)(t.strong,{children:"sys.meta_path"}),", which contains a list of meta path finder objects."]}),"\n",(0,o.jsxs)(t.p,{children:["The meta path may be traversed multiple times for a single import request. For example, assuming none of the modules involved has already been cached, importing foo.bar.baz will first perform a top level import, calling ",(0,o.jsx)(t.code,{children:'mpf.find_spec("foo", None, None)'})," on each meta path finder (mpf). After foo has been imported, foo.bar will be imported by traversing the meta path a second time, calling ",(0,o.jsx)(t.code,{children:'mpf.find_spec("foo.bar", foo.__path__, None)'}),". Once foo.bar has been imported, the final traversal will call ",(0,o.jsx)(t.code,{children:'mpf.find_spec("foo.bar.baz", foo.bar.__path__, None)'}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["The module will ",(0,o.jsx)(t.strong,{children:"exist in sys.modules before the loader executes the module code"}),". This is crucial because the module code may (directly or indirectly) import itself; adding it to sys.modules beforehand prevents unbounded recursion in the worst case and multiple loading in the best."]}),"\n",(0,o.jsxs)(t.p,{children:["When a submodule is loaded using any mechanism a binding is placed in the parent module\u2019s namespace to the submodule object. For example, if package spam has a submodule foo, after importing spam.foo, ",(0,o.jsx)(t.strong,{children:"spam will have an attribute foo"})," which is bound to the submodule"]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var o=n(96540);const s={},i=o.createContext(s);function r(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);