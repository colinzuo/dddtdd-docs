"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[9524],{78378:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var o=n(74848),s=n(28453);const r={},c=void 0,a={id:"programming-languages/python/pep/2017-0567-Context-Variables",title:"2017-0567-Context-Variables",description:"https://peps.python.org/pep-0567/",source:"@site/docs/00400-programming-languages/python/pep/2017-0567-Context-Variables.md",sourceDirName:"00400-programming-languages/python/pep",slug:"/programming-languages/python/pep/2017-0567-Context-Variables",permalink:"/dddtdd-docs/programming-languages/python/pep/2017-0567-Context-Variables",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1730173012e3,frontMatter:{},sidebar:"docSidebar",previous:{title:"2017-0561-Distributing-and-Packaging-Type-Information",permalink:"/dddtdd-docs/programming-languages/python/pep/2017-0561-Distributing-and-Packaging-Type-Information"},next:{title:"2020-0621-Storing-project-metadata-in-pyproject.toml",permalink:"/dddtdd-docs/programming-languages/python/pep/2020-0621-Storing-project-metadata-in-pyproject.toml"}},i={},l=[{value:"Abstract",id:"abstract",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Specification",id:"specification",level:2},{value:"contextvars.Context",id:"contextvarscontext",level:3},{value:"asyncio",id:"asyncio",level:3}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://peps.python.org/pep-0567/",children:"https://peps.python.org/pep-0567/"})}),"\n",(0,o.jsx)(t.h2,{id:"abstract",children:"Abstract"}),"\n",(0,o.jsxs)(t.p,{children:["This PEP proposes a new ",(0,o.jsx)(t.code,{children:"contextvars"})," module and a set of new CPython C APIs to support context variables. This concept is similar to ",(0,o.jsx)(t.code,{children:"thread-local storage (TLS)"}),", but, unlike TLS, it also allows correctly keeping track of values per asynchronous task, e.g. ",(0,o.jsx)(t.code,{children:"asyncio.Task"})]}),"\n",(0,o.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsxs)(t.p,{children:["The PEP proposes a new mechanism for managing context variables. The key classes involved in this mechanism are ",(0,o.jsx)(t.code,{children:"contextvars.Context"})," and ",(0,o.jsx)(t.code,{children:"contextvars.ContextVar"})]}),"\n",(0,o.jsxs)(t.p,{children:["The proposed mechanism for accessing context variables uses the ",(0,o.jsx)(t.code,{children:"ContextVar"})," class. A module (such as decimal) that wishes to use the new mechanism should:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["declare a module-global variable holding a ",(0,o.jsx)(t.code,{children:"ContextVar"})," to serve as a key;"]}),"\n",(0,o.jsxs)(t.li,{children:["access the current value via the ",(0,o.jsx)(t.code,{children:"get()"})," method on the key variable;"]}),"\n",(0,o.jsxs)(t.li,{children:["modify the current value via the ",(0,o.jsx)(t.code,{children:"set()"})," method on the key variable"]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["Instead, there is the notion of the ",(0,o.jsx)(t.strong,{children:"\u201ccurrent Context\u201d which is stored in thread-local storage"}),". Manipulation of the current context is the responsibility of the task framework, e.g. ",(0,o.jsx)(t.code,{children:"asyncio"})]}),"\n",(0,o.jsxs)(t.p,{children:["It is not possible to get a direct reference to the current ",(0,o.jsx)(t.code,{children:"Context"})," object, but it is possible to obtain a shallow copy of it using the ",(0,o.jsx)(t.code,{children:"contextvars.copy_context()"})," function"]}),"\n",(0,o.jsx)(t.h2,{id:"specification",children:"Specification"}),"\n",(0,o.jsx)(t.h3,{id:"contextvarscontext",children:"contextvars.Context"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"Context.run()"})," raises a ",(0,o.jsx)(t.code,{children:"RuntimeError"})," when called on the same context object from more than one OS thread, or when called recursively"]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"Context"})," objects implement the ",(0,o.jsx)(t.code,{children:"collections.abc.Mapping"})," ABC. This can be used to introspect contexts"]}),"\n",(0,o.jsx)(t.h3,{id:"asyncio",children:"asyncio"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-py",children:"def call_soon(self, callback, *args, context=None):\r\n    if context is None:\r\n        context = contextvars.copy_context()\r\n\r\n    # ... some time later\r\n    context.run(callback, *args)\n"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-py",children:"class Task:\r\n    def __init__(self, coro):\r\n        ...\r\n        # Get the current context snapshot.\r\n        self._context = contextvars.copy_context()\r\n        self._loop.call_soon(self._step, context=self._context)\r\n\r\n    def _step(self, exc=None):\r\n        ...\r\n        # Every advance of the wrapped coroutine is done in\r\n        # the task's context.\r\n        self._loop.call_soon(self._step, context=self._context)\r\n        ...\n"})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>a});var o=n(96540);const s={},r=o.createContext(s);function c(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);