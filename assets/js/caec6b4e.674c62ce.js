"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[7050],{47988:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var s=t(74848),a=t(28453);const i={},r=void 0,l={id:"programming-languages/golang/std-libs/testing",title:"testing",description:"https://pkg.go.dev/testing@go1.22.3",source:"@site/docs/00400-programming-languages/golang/std-libs/010-testing.md",sourceDirName:"00400-programming-languages/golang/std-libs",slug:"/programming-languages/golang/std-libs/testing",permalink:"/dddtdd-docs/programming-languages/golang/std-libs/testing",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1720187019e3,sidebarPosition:10,frontMatter:{},sidebar:"docSidebar",previous:{title:"doc",permalink:"/dddtdd-docs/programming-languages/golang/prometheus/doc"},next:{title:"std-libs",permalink:"/dddtdd-docs/programming-languages/golang/std-libs"}},o={},c=[{value:"Benchmarks",id:"benchmarks",level:2},{value:"Examples",id:"examples",level:2},{value:"Skipping",id:"skipping",level:2},{value:"Subtests and Sub-benchmarks",id:"subtests-and-sub-benchmarks",level:2},{value:"Main",id:"main",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://pkg.go.dev/testing@go1.22.3",children:"https://pkg.go.dev/testing@go1.22.3"})}),"\n",(0,s.jsxs)(n.p,{children:['To write a new test suite, create a file that contains the TestXxx functions as described here, and give that file a name ending in "',(0,s.jsx)(n.code,{children:"_test.go"}),'". The file will be excluded from regular package builds but will be included when the "',(0,s.jsx)(n.code,{children:"go test"}),'" command is run.']}),"\n",(0,s.jsx)(n.h2,{id:"benchmarks",children:"Benchmarks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"func BenchmarkXxx(*testing.B)\n"})}),"\n",(0,s.jsxs)(n.p,{children:['executed by the "go test" command when its ',(0,s.jsx)(n.code,{children:"-bench"})," flag is provided. Benchmarks are run sequentially"]}),"\n",(0,s.jsxs)(n.p,{children:["During benchmark execution, ",(0,s.jsx)(n.code,{children:"b.N"})," is adjusted until the benchmark function lasts long enough to be timed reliably"]}),"\n",(0,s.jsx)(n.p,{children:"If a benchmark needs some expensive setup before running, the timer may be reset"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"b.ResetTimer()\n"})}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsxs)(n.p,{children:['Example functions may include a concluding line comment that begins with "',(0,s.jsx)(n.code,{children:"Output:"}),'" and is compared with the standard output of the function when the tests are run']}),"\n",(0,s.jsx)(n.p,{children:"The naming convention to declare examples for the package, a function F, a type T and method M on type T are"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"func Example() { ... }\nfunc ExampleF() { ... }\nfunc ExampleT() { ... }\nfunc ExampleT_M() { ... }\n\nfunc Example_suffix() { ... }\nfunc ExampleF_suffix() { ... }\nfunc ExampleT_suffix() { ... }\nfunc ExampleT_M_suffix() { ... }\n"})}),"\n",(0,s.jsx)(n.h2,{id:"skipping",children:"Skipping"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'func TestTimeConsuming(t *testing.T) {\n    if testing.Short() {\n        t.Skip("skipping test in short mode.")\n    }\n    ...\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"subtests-and-sub-benchmarks",children:"Subtests and Sub-benchmarks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'go test -run \'\'        # Run all tests.\ngo test -run Foo       # Run top-level tests matching "Foo", such as "TestFooBar".\ngo test -run Foo/A=    # For top-level tests matching "Foo", run subtests matching "A=".\ngo test -run /A=1      # For all top-level tests, run subtests matching "A=1".\ngo test -fuzz FuzzFoo  # Fuzz the target matching "FuzzFoo"\n'})}),"\n",(0,s.jsx)(n.p,{children:"Run does not return until parallel subtests have completed, providing a way to clean up after a group of parallel tests"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'func TestTeardownParallel(t *testing.T) {\n    // This Run will not return until the parallel tests finish.\n    t.Run("group", func(t *testing.T) {\n        t.Run("Test1", parallelTest1)\n        t.Run("Test2", parallelTest2)\n        t.Run("Test3", parallelTest3)\n    })\n    // <tear-down code>\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"main",children:"Main"}),"\n",(0,s.jsxs)(n.p,{children:["It is sometimes necessary for a test or benchmark program to do extra ",(0,s.jsx)(n.strong,{children:"setup or teardown"})," before or after it executes"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"func TestMain(m *testing.M)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["TestMain runs in the main goroutine and can do whatever setup and teardown is necessary around a call to ",(0,s.jsx)(n.code,{children:"m.Run"})]}),"\n",(0,s.jsxs)(n.p,{children:["When TestMain is called, ",(0,s.jsx)(n.code,{children:"flag.Parse"})," has not been run. If TestMain depends on command-line flags, including those of the testing package, it should call flag.Parse explicitly. Command line flags are always parsed by the time test or benchmark functions run"]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var s=t(96540);const a={},i=s.createContext(a);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);