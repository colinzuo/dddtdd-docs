"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[752],{57115:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var o=r(74848),t=r(28453);const i={title:"electron"},s=void 0,c={id:"opensource-projects/electron/README",title:"electron",description:"Electron is a framework for building desktop applications using JavaScript, HTML, and CSS. By embedding Chromium and Node.js into its binary",source:"@site/docs/00900-opensource-projects/electron/README.md",sourceDirName:"00900-opensource-projects/electron",slug:"/opensource-projects/electron/",permalink:"/dddtdd-docs/opensource-projects/electron/",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1720187019e3,frontMatter:{title:"electron"},sidebar:"docSidebar",previous:{title:"webrtc-internal",permalink:"/dddtdd-docs/topic/webrtc/webrtc-internal"},next:{title:"self-instruct",permalink:"/dddtdd-docs/machine-learning/llm/self-instruct"}},a={},d=[{value:"Quick Start",id:"quick-start",level:2},{value:"Package and distribute your application",id:"package-and-distribute-your-application",level:3},{value:"tutorial",id:"tutorial",level:2},{value:"Debugging from VS Code",id:"debugging-from-vs-code",level:3},{value:"Using Preload Scripts",id:"using-preload-scripts",level:3},{value:"Packaging Your Application",id:"packaging-your-application",level:3}];function l(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["Electron is a framework for building desktop applications using JavaScript, HTML, and CSS. By ",(0,o.jsx)(n.strong,{children:"embedding Chromium and Node.js"})," into its binary"]}),"\n",(0,o.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"npm init"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"npm install --save-dev electron"})}),"\n",(0,o.jsx)(n.li,{children:"main.js, index.html, preload.js"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"package-and-distribute-your-application",children:"Package and distribute your application"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev @electron-forge/cli\nnpx electron-forge import\n\nnpm run make\n"})}),"\n",(0,o.jsx)(n.h2,{id:"tutorial",children:"tutorial"}),"\n",(0,o.jsx)(n.h3,{id:"debugging-from-vs-code",children:"Debugging from VS Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "version": "0.2.0",\n  "compounds": [\n    {\n      "name": "Main + renderer",\n      "configurations": ["Main", "Renderer"],\n      "stopAll": true\n    }\n  ],\n  "configurations": [\n    {\n      "name": "Renderer",\n      "port": 9222,\n      "request": "attach",\n      "type": "chrome",\n      "webRoot": "${workspaceFolder}"\n    },\n    {\n      "name": "Main",\n      "type": "node",\n      "request": "launch",\n      "cwd": "${workspaceFolder}",\n      "runtimeExecutable": "${workspaceFolder}/node_modules/.bin/electron",\n      "windows": {\n        "runtimeExecutable": "${workspaceFolder}/node_modules/.bin/electron.cmd"\n      },\n      "args": [".", "--remote-debugging-port=9222"],\n      "outputCapture": "std",\n      "console": "integratedTerminal"\n    }\n  ]\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"using-preload-scripts",children:"Using Preload Scripts"}),"\n",(0,o.jsxs)(n.p,{children:["A BrowserWindow's preload script runs in a context that has access to both the HTML DOM and a ",(0,o.jsx)(n.strong,{children:"limited subset of Node.js and Electron APIs"})]}),"\n",(0,o.jsxs)(n.p,{children:["To add features to your renderer that require privileged access, you can define global objects through the ",(0,o.jsx)(n.strong,{children:"contextBridge"})," API"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInMainWorld('versions', {\n  node: () => process.versions.node,\n  chrome: () => process.versions.chrome,\n  electron: () => process.versions.electron,\n  ping: () => ipcRenderer.invoke('ping'),\n  // we can also expose variables, not just functions\n})\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const { ipcMain } = require('electron')\n\nconst createWindow = () => {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js'),\n    },\n  })\n  ipcMain.handle('ping', () => 'pong')\n  win.loadFile('index.html')\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const func = async () => {\n  const response = await window.versions.ping()\n  console.log(response) // prints out 'pong'\n}\n\nfunc()\n"})}),"\n",(0,o.jsx)(n.h3,{id:"packaging-your-application",children:"Packaging Your Application"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev @electron-forge/cli\nnpx electron-forge import\n\nnpm run make\n"})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>c});var o=r(96540);const t={},i=o.createContext(t);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);