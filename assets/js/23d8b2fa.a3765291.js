"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[6597],{30429:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var i=t(74848),r=t(28453);const a={},l=void 0,s={id:"programming-languages/golang/effective-go",title:"effective-go",description:"https://golang.org/doc/effectivego",source:"@site/docs/00400-programming-languages/golang/effective-go.md",sourceDirName:"00400-programming-languages/golang",slug:"/programming-languages/golang/effective-go",permalink:"/dddtdd-docs/programming-languages/golang/effective-go",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1720187019e3,frontMatter:{},sidebar:"docSidebar",previous:{title:"\u7f16\u8bd1",permalink:"/dddtdd-docs/programming-languages/golang/compile"},next:{title:"official-doc",permalink:"/dddtdd-docs/programming-languages/golang/gin/official-doc"}},o={},c=[{value:"fmt",id:"fmt",level:2},{value:"comment",id:"comment",level:2},{value:"\u5408\u5e76\u58f0\u660e",id:"\u5408\u5e76\u58f0\u660e",level:2},{value:"\u547d\u540d",id:"\u547d\u540d",level:2},{value:"\u5206\u53f7",id:"\u5206\u53f7",level:2},{value:"\u63a7\u5236\u7ed3\u6784",id:"\u63a7\u5236\u7ed3\u6784",level:2},{value:"if",id:"if",level:3},{value:"Redeclaration and reassignment",id:"redeclaration-and-reassignment",level:3},{value:"for",id:"for",level:3},{value:"switch",id:"switch",level:3},{value:"\u51fd\u6570",id:"\u51fd\u6570",level:2},{value:"\u591a\u8fd4\u56de\u503c",id:"\u591a\u8fd4\u56de\u503c",level:3},{value:"Named result parameters",id:"named-result-parameters",level:3},{value:"Defer",id:"defer",level:3},{value:"Data",id:"data",level:2},{value:"\u4f7f\u7528new\u5206\u914d",id:"\u4f7f\u7528new\u5206\u914d",level:3},{value:"\u6784\u9020\u51fd\u6570\u548ccomposite literals",id:"\u6784\u9020\u51fd\u6570\u548ccomposite-literals",level:3},{value:"\u4f7f\u7528make\u5206\u914d",id:"\u4f7f\u7528make\u5206\u914d",level:3},{value:"Arrays",id:"arrays",level:3},{value:"Slices",id:"slices",level:3},{value:"Two-dimensional slices",id:"two-dimensional-slices",level:3},{value:"Maps",id:"maps",level:3},{value:"Printing",id:"printing",level:3},{value:"Append",id:"append",level:3},{value:"\u5e38\u91cf",id:"\u5e38\u91cf",level:3},{value:"init\u51fd\u6570",id:"init\u51fd\u6570",level:3},{value:"Methods",id:"methods",level:2},{value:"Pointers vs. Values",id:"pointers-vs-values",level:3},{value:"Interface conversions and type assertions",id:"interface-conversions-and-type-assertions",level:3},{value:"interface",id:"interface",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://golang.org/doc/effective_go",children:"https://golang.org/doc/effective_go"})}),"\n",(0,i.jsx)(n.h2,{id:"fmt",children:"fmt"}),"\n",(0,i.jsx)(n.p,{children:"gofmt\u4f1a\u81ea\u52a8\u683c\u5f0f\u5316"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type T struct {\n    name    string // name of the object\n    value   int    // its value\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"comment",children:"comment"}),"\n",(0,i.jsx)(n.p,{children:"//\u548c/* */\u4e24\u79cd\uff0cexport\u7684\u58f0\u660e\u524d\u5e94\u6709comment"}),"\n",(0,i.jsx)(n.h2,{id:"\u5408\u5e76\u58f0\u660e",children:"\u5408\u5e76\u58f0\u660e"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"var (\n    countLock   sync.Mutex\n    inputCount  uint32\n    outputCount uint32\n    errorCount  uint32\n)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"\u547d\u540d",children:"\u547d\u540d"}),"\n",(0,i.jsx)(n.p,{children:"By convention, packages are given lower case, single-word names; there should be no need for underscores or mixedCaps"}),"\n",(0,i.jsx)(n.p,{children:"Another convention is that the package name is the base name of its source directory"}),"\n",(0,i.jsx)(n.p,{children:"it's neither idiomatic nor necessary to put Get into the getter's name. If you have a field called owner (lower case, unexported), the getter method should be called Owner (upper case, exported), not GetOwner"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"package\u540d\u5b57\u5c0f\u5199\uff0c\u5355\u4e2a\u5b57"}),"\n",(0,i.jsx)(n.li,{children:"getter\u76f4\u63a5\u7528\u53d8\u91cf\u540d\uff0c\u4e0d\u52a0Get"}),"\n",(0,i.jsx)(n.li,{children:"interface\u540d\u5b57\u5728\u65b9\u6cd5\u540d\u540e\u52a0-er"}),"\n",(0,i.jsx)(n.li,{children:"\u591a\u4e2a\u8bcd\u7684\u7528\u9996\u5b57\u6bcd\u5927\u5199\u7ec4\u5408"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"\u5206\u53f7",children:"\u5206\u53f7"}),"\n",(0,i.jsx)(n.p,{children:"\u4e00\u822c\u60c5\u51b5go\u4f1a\u6309\u7167\u8bed\u6cd5\u81ea\u52a8\u6dfb\u52a0\uff0c\u53ea\u6709for\u8bed\u53e5\u7b49\u9700\u8981\u4e3b\u52a8\u6dfb\u52a0"}),"\n",(0,i.jsx)(n.h2,{id:"\u63a7\u5236\u7ed3\u6784",children:"\u63a7\u5236\u7ed3\u6784"}),"\n",(0,i.jsx)(n.h3,{id:"if",children:"if"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"if x > 0 {\n    return y\n}\n\nif err := file.Chmod(0664); err != nil {\n    log.Print(err)\n    return err\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"redeclaration-and-reassignment",children:"Redeclaration and reassignment"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"f, err := os.Open(name)\n\nd, err := f.Stat()\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In a ",(0,i.jsx)(n.code,{children:":="})," declaration a variable v, ",(0,i.jsx)(n.strong,{children:"if v is already declared in an outer scope, the declaration will create a new variable"})]}),"\n",(0,i.jsx)(n.h3,{id:"for",children:"for"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Like a C for\nfor init; condition; post { }\n\n// Like a C while\nfor condition { }\n\n// Like a C for(;;)\nfor { }\n\nfor key, value := range oldMap {\n    newMap[key] = value\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"switch",children:"switch"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// \u7a7aswitch\u4ee3\u8868true\u4e3a\u5339\u914d\nfunc unhex(c byte) byte {\n    switch {\n    case '0' <= c && c <= '9':\n        return c - '0'\n    case 'a' <= c && c <= 'f':\n        return c - 'a' + 10\n    case 'A' <= c && c <= 'F':\n        return c - 'A' + 10\n    }\n    return 0\n}\n\n// fallthrough\u901a\u8fc7,\u5b9e\u73b0\nfunc shouldEscape(c byte) bool {\n    switch c {\n    case ' ', '?', '&', '=', '#', '+', '%':\n        return true\n    }\n    return false\n}\n\n// \u63d0\u524dbreak switch case\n// break\u5916\u90e8for\u5faa\u73af\nLoop:\n\tfor n := 0; n < len(src); n += size {\n\t\tswitch {\n\t\tcase src[n] < sizeOne:\n\t\t\tif validateOnly {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tsize = 1\n\t\t\tupdate(src[n])\n\n\t\tcase src[n] < sizeTwo:\n\t\t\tif n+1 >= len(src) {\n\t\t\t\terr = errShortInput\n\t\t\t\tbreak Loop\n\t\t\t}\n\t\t\tif validateOnly {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tsize = 2\n\t\t\tupdate(src[n] + src[n+1]<<shift)\n\t\t}\n\t}\n\n// type Switch\nvar t interface{}\nt = functionOfSomeType()\nswitch t := t.(type) {\ndefault:\n    fmt.Printf(\"unexpected type %T\\n\", t)     // %T prints whatever type t has\ncase bool:\n    fmt.Printf(\"boolean %t\\n\", t)             // t has type bool\ncase int:\n    fmt.Printf(\"integer %d\\n\", t)             // t has type int\ncase *bool:\n    fmt.Printf(\"pointer to boolean %t\\n\", *t) // t has type *bool\ncase *int:\n    fmt.Printf(\"pointer to integer %d\\n\", *t) // t has type *int\n}  \n"})}),"\n",(0,i.jsx)(n.h2,{id:"\u51fd\u6570",children:"\u51fd\u6570"}),"\n",(0,i.jsx)(n.h3,{id:"\u591a\u8fd4\u56de\u503c",children:"\u591a\u8fd4\u56de\u503c"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func (file *File) Write(b []byte) (n int, err error)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"named-result-parameters",children:"Named result parameters"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func nextInt(b []byte, pos int) (value, nextPos int)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"defer",children:"Defer"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'    f, err := os.Open(filename)\n    if err != nil {\n        return "", err\n    }\n    defer f.Close()  // f.Close will run when we\'re finished\n'})}),"\n",(0,i.jsx)(n.h2,{id:"data",children:"Data"}),"\n",(0,i.jsx)(n.h3,{id:"\u4f7f\u7528new\u5206\u914d",children:"\u4f7f\u7528new\u5206\u914d"}),"\n",(0,i.jsx)(n.p,{children:"new\u53ea\u5206\u914d\uff0c\u5e76\u7528zero\u8986\u76d6\uff0c\u4f46\u4e0d\u521d\u59cb\u5316"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"p := new(SyncedBuffer)  // type *SyncedBuffer\nvar v SyncedBuffer      // type  SyncedBuffer\n"})}),"\n",(0,i.jsx)(n.h3,{id:"\u6784\u9020\u51fd\u6570\u548ccomposite-literals",children:"\u6784\u9020\u51fd\u6570\u548ccomposite literals"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func NewFile(fd int, name string) *File {\n    if fd < 0 {\n        return nil\n    }\n    f := File{fd, name, nil, 0}\n    return &f\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"\u4f7f\u7528make\u5206\u914d",children:"\u4f7f\u7528make\u5206\u914d"}),"\n",(0,i.jsx)(n.p,{children:"make\u7528\u4e8e\u521b\u5efaslices, maps, and channels only, and it returns an initialized (not zeroed) value of type T (not *T)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"var p *[]int = new([]int)       // allocates slice structure; *p == nil; rarely useful\nvar v  []int = make([]int, 100) // the slice v now refers to a new array of 100 ints\n"})}),"\n",(0,i.jsx)(n.h3,{id:"arrays",children:"Arrays"}),"\n",(0,i.jsx)(n.p,{children:"Array\u662fvalue\uff0c\u5927\u5c0f\u662f\u7c7b\u578b\u7684\u4e00\u90e8\u5206"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func Sum(a *[3]float64) (sum float64) {\n    for _, v := range *a {\n        sum += v\n    }\n    return\n}\n\narray := [...]float64{7.0, 8.5, 9.1}\nx := Sum(&array)  // Note the explicit address-of operator\n"})}),"\n",(0,i.jsx)(n.h3,{id:"slices",children:"Slices"}),"\n",(0,i.jsx)(n.p,{children:"Slices wrap arrays to give a more general, powerful, and convenient interface to sequences of data."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"len\u7528\u4e8e\u83b7\u5f97\u957f\u5ea6"}),"\n",(0,i.jsx)(n.li,{children:"cap\u7528\u4e8e\u83b7\u5f97\u5f53\u524dcapacity"}),"\n",(0,i.jsx)(n.li,{children:"append\u5f53\u7a7a\u95f4\u4e0d\u591f\u65f6\u53ef\u91cd\u65b0\u5206\u914d"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"two-dimensional-slices",children:"Two-dimensional slices"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'text := [][]byte{\n\t[]byte("Now is the time"),\n\t[]byte("for all good gophers"),\n\t[]byte("to bring some fun to the party."),\n}\n\n// Allocate the top-level slice.\npicture := make([][]uint8, YSize) // One row per unit of y.\n// Loop over the rows, allocating the slice for each row.\nfor i := range picture {\n\tpicture[i] = make([]uint8, XSize)\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"maps",children:"Maps"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'var timeZone = map[string]int{\n    "UTC":  0*60*60,\n    "EST": -5*60*60,\n    "CST": -6*60*60,\n    "MST": -7*60*60,\n    "PST": -8*60*60,\n}\n\n// \u5224\u65adkey\u662f\u5426\u5b58\u5728\nvar seconds int\nvar present bool\nseconds, present = timeZone[tz]\n\ndelete(timeZone, "PDT")  // Now on Standard Time\n'})}),"\n",(0,i.jsx)(n.h3,{id:"printing",children:"Printing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'fmt.Printf("Hello %d\\n", 23)\nfmt.Fprint(os.Stdout, "Hello ", 23, "\\n")\nfmt.Println("Hello", 23)\nfmt.Println(fmt.Sprint("Hello ", 23))\n\n// \u6253\u5370\u7ed3\u6784\ntype T struct {\n    a int\n    b float64\n    c string\n}\nt := &T{ 7, -2.35, "abc\\tdef" }\nfmt.Printf("%v\\n", t)\nfmt.Printf("%+v\\n", t)\nfmt.Printf("%#v\\n", t)\nfmt.Printf("%#v\\n", timeZone)\nfmt.Printf("%T\\n", timeZone)\n\n//\u8f93\u51fa\n&{7 -2.35 abc   def}\n&{a:7 b:-2.35 c:abc     def}\n&main.T{a:7, b:-2.35, c:"abc\\tdef"}\nmap[string]int{"CST":-21600, "EST":-18000, "MST":-25200, "PST":-28800, "UTC":0}\nmap[string]int\n'})}),"\n",(0,i.jsx)(n.h3,{id:"append",children:"Append"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func append(slice []T, elements ...T) []T\n\nx := []int{1,2,3}\nx = append(x, 4, 5, 6)\nfmt.Println(x)\n\nx := []int{1,2,3}\ny := []int{4,5,6}\nx = append(x, y...)\nfmt.Println(x)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"\u5e38\u91cf",children:"\u5e38\u91cf"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type ByteSize float64\n\nconst (\n    _           = iota // ignore first value by assigning to blank identifier\n    KB ByteSize = 1 << (10 * iota)\n    MB\n    GB\n    TB\n    PB\n    EB\n    ZB\n    YB\n)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"init\u51fd\u6570",children:"init\u51fd\u6570"}),"\n",(0,i.jsx)(n.p,{children:"init is called after all the variable declarations in the package have evaluated their initializers, and those are evaluated only after all the imported packages have been initialized."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func init() {\n    if user == "" {\n        log.Fatal("$USER not set")\n    }\n    if home == "" {\n        home = "/home/" + user\n    }\n    if gopath == "" {\n        gopath = home + "/go"\n    }\n    // gopath may be overridden by --gopath flag on command line.\n    flag.StringVar(&gopath, "gopath", gopath, "override default GOPATH")\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(n.h3,{id:"pointers-vs-values",children:"Pointers vs. Values"}),"\n",(0,i.jsx)(n.p,{children:"\u5982\u679c\u9700\u8981\u6539\u53d8\u503c\u5c31\u5b9a\u4e49\u4e3apointer"}),"\n",(0,i.jsx)(n.h3,{id:"interface-conversions-and-type-assertions",children:"Interface conversions and type assertions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'str, ok := value.(string)\nif ok {\n    fmt.Printf("string value is: %q\\n", str)\n} else {\n    fmt.Printf("value is not a string\\n")\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"interface",children:"interface"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Block interface {\n    BlockSize() int\n    Encrypt(dst, src []byte)\n    Decrypt(dst, src []byte)\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>s});var i=t(96540);const r={},a=i.createContext(r);function l(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);