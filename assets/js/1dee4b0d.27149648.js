"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[6656],{32722:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>i,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var s=n(74848),r=n(28453);const o={},a=void 0,c={id:"topic/test/httprunner/boomer",title:"boomer",description:"Run",source:"@site/docs/00800-topic/test/httprunner/00300-boomer.md",sourceDirName:"00800-topic/test/httprunner",slug:"/topic/test/httprunner/boomer",permalink:"/dddtdd-docs/topic/test/httprunner/boomer",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1720187019e3,sidebarPosition:300,frontMatter:{},sidebar:"docSidebar",previous:{title:"startup",permalink:"/dddtdd-docs/topic/test/httprunner/startup"},next:{title:"boomer",permalink:"/dddtdd-docs/topic/test/httprunner/pkg-boomer/boomer"}},i={},u=[{value:"Run",id:"run",level:2},{value:"convertBoomerTask",id:"convertboomertask",level:2}];function d(t){const e={code:"code",h2:"h2",pre:"pre",...(0,r.R)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{id:"run",children:"Run"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:"// Run starts to run load test for one or multiple testcases.\nfunc (b *HRPBoomer) Run(testcases ...ITestCase) {\n\n\ttaskSlice := b.ConvertTestCasesToBoomerTasks(testcases...)\n\n\tb.Boomer.Run(taskSlice...)    \n"})}),"\n",(0,s.jsx)(e.h2,{id:"convertboomertask",children:"convertBoomerTask"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:"func (b *HRPBoomer) convertBoomerTask(testcase *TestCase, rendezvousList []*Rendezvous) *boomer.Task {\n\t// init case runner for testcase\n\t// this runner is shared by multiple session runners\n\tcaseRunner, err := b.hrpRunner.NewCaseRunner(testcase)\n\n\t// set paramters mode for load testing\n\tparametersIterator := caseRunner.parametersIterator\n\tparametersIterator.SetUnlimitedMode()\n\n\t// reset start time only once\n\tonce := sync.Once{}\n\n\t// update session variables mutex\n\tmutex := sync.Mutex{}\n    \n\treturn &boomer.Task{\n\t\tName:   testcase.Config.Name,\n\t\tWeight: testcase.Config.Weight,\n\t\tFn: func() {\n\t\t\ttestcaseSuccess := true    // flag whole testcase result\n\t\t\ttransactionSuccess := true // flag current transaction result\n\n\t\t\t// init session runner\n\t\t\tsessionRunner := caseRunner.NewSession()\n\n\t\t\tmutex.Lock()\n\t\t\tif parametersIterator.HasNext() {\n\t\t\t\tsessionRunner.InitWithParameters(parametersIterator.Next())\n\t\t\t}\n\t\t\tmutex.Unlock()\n\n\t\t\tdefer func() {\n\t\t\t\tsessionRunner.releaseResources()\n\t\t\t}()\n\n\t\t\tstartTime := time.Now()\n\t\t\tfor _, step := range testcase.TestSteps {\n                \n\t\t\t\tstepResult, err := step.Run(sessionRunner)\n                \n\t\t\t\t} else {\n\t\t\t\t\t// request or testcase step\n\t\t\t\t\tb.RecordSuccess(string(step.Type()), stepResult.Name, stepResult.Elapsed, stepResult.ContentSize)\n\t\t\t\t\t// update extracted variables\n\t\t\t\t\tfor k, v := range stepResult.ExportVars {\n\t\t\t\t\t\tsessionRunner.sessionVariables[k] = v\n\t\t\t\t\t}\n\t\t\t\t}                \n\t\t\t}\n\t\t\tendTime := time.Now()  \n            \n            \n"})})]})}function l(t={}){const{wrapper:e}={...(0,r.R)(),...t.components};return e?(0,s.jsx)(e,{...t,children:(0,s.jsx)(d,{...t})}):d(t)}},28453:(t,e,n)=>{n.d(e,{R:()=>a,x:()=>c});var s=n(96540);const r={},o=s.createContext(r);function a(t){const e=s.useContext(o);return s.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function c(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:a(t.components),s.createElement(o.Provider,{value:e},t.children)}}}]);