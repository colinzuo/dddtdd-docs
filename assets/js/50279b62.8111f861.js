"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[1460],{7483:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=e(74848),s=e(28453);const a={title:"hrppkg\boomer\runner"},o=void 0,l={id:"topic/test/httprunner/pkg-boomer/runner",title:"hrp\\pkg\\boomer\\runner",description:"reportStats",source:"@site/docs/00800-topic/test/httprunner/pkg-boomer/0200-runner.md",sourceDirName:"00800-topic/test/httprunner/pkg-boomer",slug:"/topic/test/httprunner/pkg-boomer/runner",permalink:"/dddtdd-docs/topic/test/httprunner/pkg-boomer/runner",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1720187019e3,sidebarPosition:200,frontMatter:{title:"hrp\\pkg\\boomer\\runner"},sidebar:"docSidebar",previous:{title:"boomer",permalink:"/dddtdd-docs/topic/test/httprunner/pkg-boomer/boomer"},next:{title:"\u6027\u80fd\u6d4b\u8bd5\u4ecb\u7ecd",permalink:"/dddtdd-docs/topic/test/perf-test/intro"}},i={},u=[{value:"reportStats",id:"reportstats",level:2},{value:"spawnWorkers",id:"spawnworkers",level:2},{value:"getTask",id:"gettask",level:2},{value:"statsStart",id:"statsstart",level:2},{value:"stop",id:"stop",level:2},{value:"newLocalRunner",id:"newlocalrunner",level:2},{value:"localRunner start",id:"localrunner-start",level:2},{value:"newWorkerRunner",id:"newworkerrunner",level:2},{value:"workerRunner spawnComplete",id:"workerrunner-spawncomplete",level:2},{value:"masterRunner start",id:"masterrunner-start",level:2},{value:"masterRunner rebalance",id:"masterrunner-rebalance",level:2},{value:"masterRunner fetchTestCases",id:"masterrunner-fetchtestcases",level:2}];function c(t){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"reportstats",children:"reportStats"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func (r *runner) reportStats() {\n\tdata := r.stats.collectReportData()\n\tdata["user_count"] = r.controller.getCurrentClientsNum()\n\tdata["state"] = atomic.LoadInt32(&r.state)\n\tr.outputOnEvent(data)\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"spawnworkers",children:"spawnWorkers"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"func (r *runner) spawnWorkers(spawnCount int64, spawnRate float64, quit chan bool, spawnCompleteFunc func())"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"\tfor {\n\n\t\t\tif r.isStarting() && r.controller.acquire() {\n                \n\t\t\t\tr.goAttach(func() {\n\t\t\t\t\tfor {\n\t\t\t\t\t\tselect {\n\t\t\t\t\t\tcase <-quit:\n\t\t\t\t\t\t\tr.controller.increaseFinishedCount()\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tif workerLoop != nil && !workerLoop.acquire() {\n\t\t\t\t\t\t\t\tr.controller.increaseFinishedCount()\n\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif r.rateLimitEnabled {\n\t\t\t\t\t\t\t\tblocked := r.rateLimiter.Acquire()\n\t\t\t\t\t\t\t\tif !blocked {\n\t\t\t\t\t\t\t\t\ttask := r.getTask()\n\t\t\t\t\t\t\t\t\tr.safeRun(task.Fn)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttask := r.getTask()\n\t\t\t\t\t\t\t\tr.safeRun(task.Fn)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif workerLoop != nil {\n\t\t\t\t\t\t\t\t// finished count of total\n\t\t\t\t\t\t\t\tr.loop.increaseFinishedCount()\n\t\t\t\t\t\t\t\t// finished count of single worker\n\t\t\t\t\t\t\t\tworkerLoop.increaseFinishedCount()\n\t\t\t\t\t\t\t\tif r.loop.isFinished() {\n\t\t\t\t\t\t\t\t\tgo r.stop()\n\t\t\t\t\t\t\t\t\tr.controller.increaseFinishedCount()\n\t\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif r.controller.erase() {\n\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\tcontinue\n\n\t\t\t<-r.controller.getRebalanceChan()\n\t\t\tif r.isStarting() {\n\t\t\t\t// rebalance spawn count\n\t\t\t\tr.controller.setSpawn(r.getSpawnCount(), r.getSpawnRate())\n\t\t\t}                            \n"})}),"\n",(0,r.jsx)(n.h2,{id:"gettask",children:"getTask"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func (r *runner) getTask() *Task {\n\n\ttasksCount := len(r.tasks)\n\tif tasksCount == 0 {\n\t\tlog.Error().Msg("no valid testcase found")\n\t\tos.Exit(1)\n\t} else if tasksCount == 1 {\n\t\t// Fast path\n\t\treturn r.tasks[0]\n\t}\n\n\trs := rand.New(rand.NewSource(time.Now().UnixNano()))\n\n\ttotalWeight := r.totalTaskWeight\n\tif totalWeight <= 0 {\n\t\t// If all the tasks have not weights defined, they have the same chance to run\n\t\trandNum := rs.Intn(tasksCount)\n\t\treturn r.tasks[randNum]\n\t}\n\n\trandNum := rs.Intn(totalWeight)\n\trunningSum := 0\n\tfor _, task := range r.tasks {\n\t\trunningSum += task.Weight\n\t\tif runningSum > randNum {\n\t\t\treturn task\n\t\t}\n\t}    \n'})}),"\n",(0,r.jsx)(n.h2,{id:"statsstart",children:"statsStart"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func (r *runner) statsStart() {\n\tticker := time.NewTicker(reportStatsInterval)\n\tfor {\n\t\tselect {\n\n\t\tcase <-ticker.C:\n\t\t\tr.reportStats()\n\t\t\t// close reportedChan and return if the last stats is reported successfully\n\t\t\tif !r.isStarting() && !r.isStopping() {\n\t\t\t\tclose(r.reportedChan)\n\t\t\t\tlog.Info().Msg("Quitting statsStart")\n\t\t\t\treturn\n\t\t\t}           \n'})}),"\n",(0,r.jsx)(n.h2,{id:"stop",children:"stop"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (r *runner) stop() {\n\t// stop previous goroutines without blocking\n\t// those goroutines will exit when r.safeRun returns\n\tr.gracefulStop()\n\tif r.rateLimitEnabled {\n\t\tr.rateLimiter.Stop()\n\t}\n\tr.updateState(StateStopped)\n}\n\nfunc (r *runner) gracefulStop() {\n\tselect {\n\tcase r.stopChan <- true:\n\tcase <-r.doneChan:\n\t\treturn\n\t}\n\t<-r.doneChan\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"newlocalrunner",children:"newLocalRunner"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func newLocalRunner(spawnCount int64, spawnRate float64) *localRunner {\n\treturn &localRunner{\n\t\trunner: runner{\n\t\t\tstate:      StateInit,\n\t\t\tstats:      newRequestStats(),\n\t\t\tspawnCount: spawnCount,\n\t\t\tspawnRate:  spawnRate,\n\t\t\tcontroller: &Controller{},\n\t\t\toutputs:    make([]Output, 0),\n\t\t\tstopChan:   make(chan bool),\n\t\t\tcloseChan:  make(chan bool),\n\t\t\twg:         sync.WaitGroup{},\n\t\t\twgMu:       sync.RWMutex{},\n\t\t},\n\t}\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"localrunner-start",children:"localRunner start"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (r *localRunner) start() {\n\n\t// start rate limiter\n\tif r.rateLimitEnabled {\n\t\tr.rateLimiter.Start()\n\t}\n\t// output setup\n\tr.outputOnStart()\n\n\tgo r.runTimeCheck(r.getRunTime())\n\n\tgo r.spawnWorkers(r.getSpawnCount(), r.getSpawnRate(), r.stoppingChan, nil)    \n\n\tgo r.statsStart()\n\n\t<-r.stopChan    \n"})}),"\n",(0,r.jsx)(n.h2,{id:"newworkerrunner",children:"newWorkerRunner"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func newWorkerRunner(masterHost string, masterPort int) (r *workerRunner) {\n\tr = &workerRunner{\n\t\trunner: runner{\n\t\t\tstats:      newRequestStats(),\n\t\t\toutputs:    make([]Output, 0),\n\t\t\tcontroller: &Controller{},\n\t\t\tstopChan:   make(chan bool),\n\t\t\tcloseChan:  make(chan bool),\n\t\t},\n\t\tmasterHost: masterHost,\n\t\tmasterPort: masterPort,\n\t\tnodeID:     getNodeID(),\n\t\ttasksChan:  make(chan *task, 10),\n\t\tmutex:      sync.Mutex{},\n\t\tignoreQuit: false,\n\t}\n\treturn r\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"workerrunner-spawncomplete",children:"workerRunner spawnComplete"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func (r *workerRunner) spawnComplete() {\n\tdata := make(map[string][]byte)\n\tdata["count"] = builtin.Int64ToBytes(r.controller.getSpawnCount())\n\tr.client.sendChannel() <- newGenericMessage("spawning_complete", data, r.nodeID)\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"masterrunner-start",children:"masterRunner start"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'\tspawnCounts := builtin.SplitInteger(int(r.profile.SpawnCount), numWorkers)\n\n\t// spawn rate\n\tspawnRate := workerProfile.SpawnRate / float64(numWorkers)\n\tif spawnRate < 1 {\n\t\tspawnRate = 1\n\t}\n\n\t// max RPS\n\tmaxRPSs := builtin.SplitInteger(int(workerProfile.MaxRPS), numWorkers)\n\n\tr.updateState(StateSpawning)    \n\n\tcur := 0\n\tr.server.clients.Range(func(key, value interface{}) bool {\n        \n\t\t\tworkerInfo.getStream() <- &messager.StreamResponse{\n\t\t\t\tType:    "spawn",\n\t\t\t\tProfile: ProfileToBytes(workerProfile),\n\t\t\t\tNodeID:  workerInfo.ID,\n\t\t\t\tTasks:   testCasesBytes,\n\t\t\t}\n\t\t\tcur++        \n'})}),"\n",(0,r.jsx)(n.h2,{id:"masterrunner-rebalance",children:"masterRunner rebalance"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'\tspawnCounts := builtin.SplitInteger(int(r.profile.SpawnCount), numWorkers)\n\n\t// spawn rate\n\tspawnRate := workerProfile.SpawnRate / float64(numWorkers)\n\tif spawnRate < 1 {\n\t\tspawnRate = 1\n\t}\n\n\t// max RPS\n\tmaxRPSs := builtin.SplitInteger(int(workerProfile.MaxRPS), numWorkers)\n\n\tcur := 0\n\tlog.Info().Msg("send spawn data to worker")\n\tr.server.clients.Range(func(key, value interface{}) bool {\n        \n\t\t\tif workerInfo.getState() == StateInit {\n\t\t\t\tworkerInfo.getStream() <- &messager.StreamResponse{\n\t\t\t\t\tType:    "spawn",\n\t\t\t\t\tProfile: ProfileToBytes(workerProfile),\n\t\t\t\t\tNodeID:  workerInfo.ID,\n\t\t\t\t\tTasks:   r.testCasesBytes,\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tworkerInfo.getStream() <- &messager.StreamResponse{\n\t\t\t\t\tType:    "rebalance",\n\t\t\t\t\tProfile: ProfileToBytes(workerProfile),\n\t\t\t\t\tNodeID:  workerInfo.ID,\n\t\t\t\t}\n\t\t\t}\n\t\t\tcur++        \n'})}),"\n",(0,r.jsx)(n.h2,{id:"masterrunner-fetchtestcases",children:"masterRunner fetchTestCases"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'\tr.parseTestCasesChan <- true\n\tselect {\n\tcase <-ticker.C:\n\t\treturn nil, errors.New("parse testcases timeout")\n\tcase testCasesBytes := <-r.testCaseBytesChan:\n\t\tr.testCasesBytes = testCasesBytes\n\t\treturn testCasesBytes, nil\n\t}\n'})})]})}function p(t={}){const{wrapper:n}={...(0,s.R)(),...t.components};return n?(0,r.jsx)(n,{...t,children:(0,r.jsx)(c,{...t})}):c(t)}},28453:(t,n,e)=>{e.d(n,{R:()=>o,x:()=>l});var r=e(96540);const s={},a=r.createContext(s);function o(t){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function l(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(s):t.components||s:o(t.components),r.createElement(a.Provider,{value:n},t.children)}}}]);