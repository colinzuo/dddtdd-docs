"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[6842],{22043:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>d,toc:()=>r});var l=i(74848),s=i(28453);const t={},a=void 0,d={id:"cloud/helm/chart_template_guide",title:"chart_template_guide",description:"getting_started",source:"@site/docs/00500-cloud/helm/040-chart_template_guide.md",sourceDirName:"00500-cloud/helm",slug:"/cloud/helm/chart_template_guide",permalink:"/dddtdd-docs/cloud/helm/chart_template_guide",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1720187019e3,sidebarPosition:40,frontMatter:{},sidebar:"docSidebar",previous:{title:"using_helm",permalink:"/dddtdd-docs/cloud/helm/using_helm"},next:{title:"\u5b9a\u5236\u6a21\u677f",permalink:"/dddtdd-docs/cloud/helm/custom-template"}},c={},r=[{value:"getting_started",id:"getting_started",level:2},{value:"debug",id:"debug",level:3},{value:"Built-in Objects",id:"built-in-objects",level:2},{value:"Values Files",id:"values-files",level:2},{value:"Template Functions and Pipelines",id:"template-functions-and-pipelines",level:2},{value:"Pipelines",id:"pipelines",level:3},{value:"Using the default function",id:"using-the-default-function",level:3},{value:"Template Function List",id:"template-function-list",level:2},{value:"Flow Control",id:"flow-control",level:2},{value:"If/Else",id:"ifelse",level:3},{value:"Controlling Whitespace",id:"controlling-whitespace",level:3},{value:"Modifying scope using with",id:"modifying-scope-using-with",level:3},{value:"Looping with the range action",id:"looping-with-the-range-action",level:3},{value:"Variables",id:"variables",level:2},{value:"Named Templates",id:"named-templates",level:2},{value:"Partials and _ files",id:"partials-and-_-files",level:3},{value:"Declaring and using templates with define and template",id:"declaring-and-using-templates-with-define-and-template",level:3},{value:"Setting the scope of a template",id:"setting-the-scope-of-a-template",level:3},{value:"The include function",id:"the-include-function",level:3},{value:"Accessing Files Inside Templates",id:"accessing-files-inside-templates",level:2},{value:"Basic example",id:"basic-example",level:3},{value:"Debugging Templates",id:"debugging-templates",level:2},{value:"YAML Techniques",id:"yaml-techniques",level:2},{value:"Scalars and Collections",id:"scalars-and-collections",level:3},{value:"Strings in YAML",id:"strings-in-yaml",level:3},{value:"Controlling Spaces in Multi-line Strings",id:"controlling-spaces-in-multi-line-strings",level:3}];function o(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h2,{id:"getting_started",children:"getting_started"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"https://helm.sh/docs/chart_template_guide/getting_started/"})}),"\n",(0,l.jsxs)(n.p,{children:["Template names do not follow a rigid naming pattern. However, we recommend using the extension ",(0,l.jsx)(n.strong,{children:".yaml for YAML files and .tpl for helpers"})]}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"helm get manifest"})," command takes a release name (full-coral) and prints out all of the Kubernetes resources that were uploaded to the server"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: "Hello World"\n'})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"Release"})," object is one of the built-in objects for Helm"]}),"\n",(0,l.jsx)(n.h3,{id:"debug",children:"debug"}),"\n",(0,l.jsxs)(n.p,{children:["When you want to test the template rendering, but not actually install anything, you can use ",(0,l.jsx)(n.code,{children:"helm install --debug --dry-run goodly-guppy ./mychart"}),". This will render the templates. But instead of installing the chart, it will return the rendered template to you so you can see the output"]}),"\n",(0,l.jsx)(n.h2,{id:"built-in-objects",children:"Built-in Objects"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"https://helm.sh/docs/chart_template_guide/builtin_objects/"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Release: This object describes the release itself. It has several objects inside of it"}),"\n",(0,l.jsx)(n.li,{children:"Values: Values passed into the template from the values.yaml file and from user-supplied files"}),"\n",(0,l.jsxs)(n.li,{children:["Chart: The contents of the ",(0,l.jsx)(n.code,{children:"Chart.yaml"})," file"]}),"\n",(0,l.jsx)(n.li,{children:"Files: This provides access to all non-special files in a chart"}),"\n",(0,l.jsx)(n.li,{children:"Capabilities: This provides information about what capabilities the Kubernetes cluster supports"}),"\n",(0,l.jsx)(n.li,{children:"Template: Contains information about the current template that is being executed"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"values-files",children:"Values Files"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"https://helm.sh/docs/chart_template_guide/values_files/"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: "Hello World"\n  drink: {{ .Values.favoriteDrink }}\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"helm install geared-marsupi ./mychart --dry-run --debug"})}),"\n",(0,l.jsx)(n.h2,{id:"template-functions-and-pipelines",children:"Template Functions and Pipelines"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"https://helm.sh/docs/chart_template_guide/functions_and_pipelines/"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: "Hello World"\n  drink: {{ quote .Values.favorite.drink }}\n  food: {{ quote .Values.favorite.food }}\n'})}),"\n",(0,l.jsxs)(n.p,{children:["Template functions follow the syntax ",(0,l.jsx)(n.code,{children:"functionName arg1 arg2..."})]}),"\n",(0,l.jsx)(n.h3,{id:"pipelines",children:"Pipelines"}),"\n",(0,l.jsx)(n.p,{children:"pipelines are a tool for chaining together a series of template commands to compactly express a series of transformations"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"  food: {{ .Values.favorite.food | upper | quote }}\n"})}),"\n",(0,l.jsxs)(n.p,{children:["When pipelining arguments like this, the result of the first evaluation (.Values.favorite.drink) is sent as the ",(0,l.jsx)(n.strong,{children:"last argument"})," to the function"]}),"\n",(0,l.jsx)(n.h3,{id:"using-the-default-function",children:"Using the default function"}),"\n",(0,l.jsxs)(n.p,{children:["This function allows you to specify a default value inside of the template, in case ",(0,l.jsx)(n.strong,{children:"the value is omitted"})]}),"\n",(0,l.jsxs)(n.p,{children:["the default command is perfect for computed values, which cannot be declared inside ",(0,l.jsx)(n.code,{children:"values.yaml"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:'drink: {{ .Values.favorite.drink | default (printf "%s-tea" (include "fullname" .)) }}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"template-function-list",children:"Template Function List"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"https://helm.sh/docs/chart_template_guide/function_list/"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Logic and Flow Control Functions"}),"\n",(0,l.jsx)(n.li,{children:"String Functions"}),"\n",(0,l.jsx)(n.li,{children:"Type Conversion Functions"}),"\n",(0,l.jsx)(n.li,{children:"Regular Expressions"}),"\n",(0,l.jsx)(n.li,{children:"Cryptographic and Security Functions"}),"\n",(0,l.jsx)(n.li,{children:"Date Functions"}),"\n",(0,l.jsx)(n.li,{children:"Dictionaries and Dict Functions"}),"\n",(0,l.jsx)(n.li,{children:"Encoding Functions"}),"\n",(0,l.jsx)(n.li,{children:"Lists and List Functions"}),"\n",(0,l.jsx)(n.li,{children:"Math Functions"}),"\n",(0,l.jsx)(n.li,{children:"Float Math Functions"}),"\n",(0,l.jsx)(n.li,{children:"File Path Functions"}),"\n",(0,l.jsx)(n.li,{children:"URL Functions"}),"\n",(0,l.jsx)(n.li,{children:"UUID Functions"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"flow-control",children:"Flow Control"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"https://helm.sh/docs/chart_template_guide/control_structures/"})}),"\n",(0,l.jsx)(n.p,{children:"Helm's template language provides the following control structures:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"if/else"})," for creating conditional blocks"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"with"})," to specify a scope"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"range"}),', which provides a "for each"-style loop']}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["In addition to these, it provides a few actions for declaring and using ",(0,l.jsx)(n.strong,{children:"named template segments"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"define"})," declares a new named template inside of your template"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"template"})," imports a named template"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"block"})," declares a special kind of fillable template area"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"ifelse",children:"If/Else"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"{{ if PIPELINE }}\n  # Do something\n{{ else if OTHER PIPELINE }}\n  # Do something else\n{{ else }}\n  # Default case\n{{ end }}\n"})}),"\n",(0,l.jsxs)(n.p,{children:["A pipeline is ",(0,l.jsx)(n.strong,{children:"evaluated as false"})," if the value is:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"a boolean false"}),"\n",(0,l.jsx)(n.li,{children:"a numeric zero"}),"\n",(0,l.jsx)(n.li,{children:"an empty string"}),"\n",(0,l.jsx)(n.li,{children:"a nil (empty or null)"}),"\n",(0,l.jsx)(n.li,{children:"an empty collection (map, slice, tuple, dict, array)"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"controlling-whitespace",children:"Controlling Whitespace"}),"\n",(0,l.jsxs)(n.p,{children:["When the template engine runs, it removes the contents inside of ",(0,l.jsx)(n.code,{children:"{{ and }}"}),", but it leaves the remaining whitespace exactly as is"]}),"\n",(0,l.jsxs)(n.p,{children:["First, the curly brace syntax of template declarations can be modified with special characters to tell the template engine to chomp whitespace. ",(0,l.jsx)(n.code,{children:"{{-"})," (with the dash and space added) indicates that whitespace should be chomped left, while ",(0,l.jsx)(n.code,{children:"-}}"})," means whitespace to the right should be consumed. Be careful! ",(0,l.jsx)(n.strong,{children:"Newlines are whitespace!"})]}),"\n",(0,l.jsx)(n.h3,{id:"modifying-scope-using-with",children:"Modifying scope using with"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"{{ with PIPELINE }}\n  # restricted scope\n{{ end }}\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:'  {{- with .Values.favorite }}\n  drink: {{ .drink | default "tea" | quote }}\n  food: {{ .food | upper | quote }}\n  {{- end }}\n'})}),"\n",(0,l.jsxs)(n.p,{children:["we can use ",(0,l.jsx)(n.code,{children:"$"})," for accessing the object Release.Name from the parent scope"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"$"})," is mapped to the root scope when template execution begins and it does not change during template execution"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:'  {{- with .Values.favorite }}\n  drink: {{ .drink | default "tea" | quote }}\n  food: {{ .food | upper | quote }}\n  release: {{ $.Release.Name }}\n  {{- end }}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"looping-with-the-range-action",children:"Looping with the range action"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"  toppings: |-\n    {{- range .Values.pizzaToppings }}\n    - {{ . | title | quote }}\n    {{- end }} \n"})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"|-"})," marker in YAML takes a multi-line string"]}),"\n",(0,l.jsx)(n.h2,{id:"variables",children:"Variables"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"https://helm.sh/docs/chart_template_guide/variables/"})}),"\n",(0,l.jsxs)(n.p,{children:["One way to work around scoping issues is to assign objects to variables that can be ",(0,l.jsx)(n.strong,{children:"accessed without respect to the present scope"})]}),"\n",(0,l.jsxs)(n.p,{children:["In Helm templates, a variable is a named reference to another object. It follows the form ",(0,l.jsx)(n.code,{children:"$name"}),". Variables are assigned with a special assignment operator: ",(0,l.jsx)(n.code,{children:":="})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:'  {{- $relname := .Release.Name -}}\n  {{- with .Values.favorite }}\n  drink: {{ .drink | default "tea" | quote }}\n  food: {{ .food | upper | quote }}\n  release: {{ $relname }}\n  {{- end }}\n'})}),"\n",(0,l.jsxs)(n.p,{children:["Variables are particularly useful in range loops. They can be used on list-like objects to ",(0,l.jsx)(n.strong,{children:"capture both the index and the value"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"  toppings: |-\n    {{- range $index, $topping := .Values.pizzaToppings }}\n      {{ $index }}: {{ $topping }}\n    {{- end }}    \n"})}),"\n",(0,l.jsx)(n.p,{children:'Variables are normally not "global". They are scoped to the block in which they are declared'}),"\n",(0,l.jsxs)(n.p,{children:["However, there is one variable that is always global - ",(0,l.jsx)(n.code,{children:"$"})," - this variable will ",(0,l.jsx)(n.strong,{children:"always point to the root context"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:'    app.kubernetes.io/name: {{ template "fullname" $ }}\n    # I cannot reference .Chart.Name, but I can do $.Chart.Name\n    helm.sh/chart: "{{ $.Chart.Name }}-{{ $.Chart.Version }}"\n'})}),"\n",(0,l.jsx)(n.h2,{id:"named-templates",children:"Named Templates"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"https://helm.sh/docs/chart_template_guide/named_templates/"})}),"\n",(0,l.jsx)(n.p,{children:"A named template (sometimes called a partial or a subtemplate) is simply a template defined inside of a file, and given a name"}),"\n",(0,l.jsxs)(n.p,{children:["An important detail to keep in mind when naming templates: ",(0,l.jsx)(n.strong,{children:"template names are global"}),". If you declare two templates with the same name, whichever one is loaded last will be the one used"]}),"\n",(0,l.jsxs)(n.p,{children:["One popular naming convention is to prefix each defined template with the name of the chart: ",(0,l.jsx)(n.code,{children:'{{ define "mychart.labels" }}'})]}),"\n",(0,l.jsx)(n.h3,{id:"partials-and-_-files",children:"Partials and _ files"}),"\n",(0,l.jsx)(n.p,{children:"there is file naming convention that deserves mention:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Most files in ",(0,l.jsx)(n.code,{children:"templates/"})," are treated as if they contain Kubernetes manifests"]}),"\n",(0,l.jsxs)(n.li,{children:["The ",(0,l.jsx)(n.code,{children:"NOTES.txt"})," is one exception"]}),"\n",(0,l.jsxs)(n.li,{children:["But files whose name begins with an underscore (",(0,l.jsx)(n.code,{children:"_"}),") are assumed to not have a manifest inside. These files are not rendered to Kubernetes object definitions, but are available everywhere within other chart templates for use."]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"declaring-and-using-templates-with-define-and-template",children:"Declaring and using templates with define and template"}),"\n",(0,l.jsx)(n.p,{children:"The define action allows us to create a named template inside of a template file"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:'{{- define "MY.NAME" }}\n  # body of template here\n{{- end }}\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:'{{- define "mychart.labels" }}\n  labels:\n    generator: helm\n    date: {{ now | htmlDate }}\n{{- end }}\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\n  {{- template "mychart.labels" }}\n'})}),"\n",(0,l.jsxs)(n.p,{children:["By convention, define functions should have a simple documentation block (",(0,l.jsx)(n.code,{children:"{{/* ... */}}"}),") describing what they do"]}),"\n",(0,l.jsx)(n.h3,{id:"setting-the-scope-of-a-template",children:"Setting the scope of a template"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:'  {{- template "mychart.labels" . }}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"the-include-function",children:"The include function"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"template"})," is an action, and not a function, there is no way to pass the output of a template call to other functions; the data is simply inserted inline"]}),"\n",(0,l.jsx)(n.p,{children:"Helm provides an alternative to template that will import the contents of a template into the present pipeline where it can be passed along to other functions in the pipeline"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\n  labels:\n{{ include "mychart.app" . | indent 4 }}\ndata:\n  myvalue: "Hello World"\n  {{- range $key, $val := .Values.favorite }}\n  {{ $key }}: {{ $val | quote }}\n  {{- end }}\n{{ include "mychart.app" . | indent 2 }}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"accessing-files-inside-templates",children:"Accessing Files Inside Templates"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"https://helm.sh/docs/chart_template_guide/accessing_files/"})}),"\n",(0,l.jsx)(n.h3,{id:"basic-example",children:"Basic example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  {{- $files := .Files }}\n  {{- range tuple "config1.toml" "config2.toml" "config3.toml" }}\n  {{ . }}: |-\n        {{ $files.Get . }}\n  {{- end }}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"debugging-templates",children:"Debugging Templates"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"https://helm.sh/docs/chart_template_guide/debugging/"})}),"\n",(0,l.jsx)(n.p,{children:"There are a few commands that can help you debug."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"helm lint"})," is your go-to tool for verifying that your chart follows best practices"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"helm template --debug"})," will test rendering chart templates locally."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"helm install --dry-run --debug"})," will also render your chart locally without installing it, but will also check if conflicting resources are already running on the cluster. Setting --dry-run==server will additionally execute any lookup in your chart towards the server."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"helm get manifest"}),": This is a good way to see what templates are installed on the server"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"yaml-techniques",children:"YAML Techniques"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"https://helm.sh/docs/chart_template_guide/yaml_techniques/"})}),"\n",(0,l.jsx)(n.h3,{id:"scalars-and-collections",children:"Scalars and Collections"}),"\n",(0,l.jsxs)(n.p,{children:["According to the ",(0,l.jsx)(n.a,{href:"https://yaml.org/spec/1.2.2/",children:"YAML spec"}),", there are two types of collections, and many scalar types"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"map:\n  one: 1\n  two: 2\n  three: 3\n\nsequence:\n  - one\n  - two\n  - three\n"})}),"\n",(0,l.jsx)(n.h3,{id:"strings-in-yaml",children:"Strings in YAML"}),"\n",(0,l.jsx)(n.p,{children:'There are three "inline" ways of declaring a string'}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"way1: bare words\nway2: \"double-quoted strings\"\nway3: 'single-quoted strings'\n"})}),"\n",(0,l.jsx)(n.p,{children:"All inline styles must be on one line."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Bare words are unquoted, and are not ",(0,l.jsx)(n.strong,{children:"escaped"}),". For this reason, you have to be careful what characters you use."]}),"\n",(0,l.jsxs)(n.li,{children:["Double-quoted strings can have specific characters escaped with ",(0,l.jsx)(n.code,{children:"\\"}),". For example ",(0,l.jsx)(n.code,{children:'"\\"Hello\\", she said"'}),". You can escape line breaks with ",(0,l.jsx)(n.code,{children:"\\n"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:['Single-quoted strings are "literal" strings, and do not use the ',(0,l.jsx)(n.code,{children:"\\"})," to escape characters. The only escape sequence is '', which is decoded as a single '"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"In addition to the one-line strings, you can declare multi-line strings"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"coffee: |\n  Latte\n  Cappuccino\n  Espresso  \n"})}),"\n",(0,l.jsxs)(n.p,{children:["The above will treat the value of coffee as a single string equivalent to ",(0,l.jsx)(n.code,{children:"Latte\\nCappuccino\\nEspresso\\n"})]}),"\n",(0,l.jsxs)(n.p,{children:["Note that the ",(0,l.jsx)(n.strong,{children:"first line"})," after the ",(0,l.jsx)(n.code,{children:"|"})," must be correctly indented"]}),"\n",(0,l.jsx)(n.h3,{id:"controlling-spaces-in-multi-line-strings",children:"Controlling Spaces in Multi-line Strings"}),"\n",(0,l.jsxs)(n.p,{children:["If we want the YAML processor to strip off the trailing newline, we can add a ",(0,l.jsx)(n.code,{children:"-"})," after the ",(0,l.jsx)(n.code,{children:"|"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"coffee: |-\n  Latte\n  Cappuccino\n  Espresso \n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>d});var l=i(96540);const s={},t=l.createContext(s);function a(e){const n=l.useContext(t);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),l.createElement(t.Provider,{value:n},e.children)}}}]);