"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[7038],{55289:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>u});var r=o(74848),t=o(28453);const s={},i="Vue Examples",a={id:"frontend/cypress/component-testing/vue/examples",title:"Vue Examples",description:"Mounting Components",source:"@site/docs/00200-frontend/cypress/040-component-testing/060-vue/020-examples.md",sourceDirName:"00200-frontend/cypress/040-component-testing/060-vue",slug:"/frontend/cypress/component-testing/vue/examples",permalink:"/dddtdd-docs/frontend/cypress/component-testing/vue/examples",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1721530274e3,sidebarPosition:20,frontMatter:{},sidebar:"docSidebar",previous:{title:"Vue Component Testing",permalink:"/dddtdd-docs/frontend/cypress/component-testing/vue/overview"},next:{title:"Vue API",permalink:"/dddtdd-docs/frontend/cypress/component-testing/vue/api"}},l={},u=[{value:"Mounting Components",id:"mounting-components",level:2},{value:"Using Slots",id:"using-slots",level:2},{value:"Custom Mount Commands",id:"custom-mount-commands",level:2},{value:"Replicating Plugins",id:"replicating-plugins",level:3},{value:"Vue Router",id:"vue-router",level:3},{value:"Global Components",id:"global-components",level:3}];function c(n){const e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,t.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"vue-examples",children:"Vue Examples"}),"\n",(0,r.jsx)(e.h2,{id:"mounting-components",children:"Mounting Components"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"it('clicking + fires a change event with the incremented value', () => {\r\n  const onChangeSpy = cy.spy().as('onChangeSpy')\r\n  cy.mount(Stepper, { props: { onChange: onChangeSpy } })\r\n  cy.get('[data-cy=increment]').click()\r\n  cy.get('@onChangeSpy').should('have.been.calledWith', 1)\r\n})\n"})}),"\n",(0,r.jsx)(e.h2,{id:"using-slots",children:"Using Slots"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"import NamedSlot from './NamedSlot.vue'\r\n\r\ndescribe('<NamedSlot />', () => {\r\n  it('renders', () => {\r\n    const slots = {\r\n      header: 'my header',\r\n      footer: 'my footer',\r\n    }\r\n    cy.mount(NamedSlot, {\r\n      slots,\r\n    })\r\n    cy.get('header').should('have.text', 'my header')\r\n    cy.get('footer').should('have.text', 'my footer')\r\n  })\r\n})\n"})}),"\n",(0,r.jsx)(e.h2,{id:"custom-mount-commands",children:"Custom Mount Commands"}),"\n",(0,r.jsx)(e.h3,{id:"replicating-plugins",children:"Replicating Plugins"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"import { createPinia } from 'pinia' // or Vuex\r\nimport { createI18n } from 'vue-i18n'\r\nimport { mount } from 'cypress/vue'\r\nimport { h } from 'vue'\r\n\r\n// We recommend that you pull this out\r\n// into a constants file that you share with\r\n// your main.js file.\r\nconst i18nOptions = {\r\n  locale: 'en',\r\n  messages: {\r\n    en: {\r\n      hello: 'hello!',\r\n    },\r\n    ja: {\r\n      hello: '\u3053\u3093\u306b\u3061\u306f\uff01',\r\n    },\r\n  },\r\n}\r\n\r\nCypress.Commands.add('mount', (component, ...args) => {\r\n  args.global = args.global || {}\r\n  args.global.plugins = args.global.plugins || []\r\n  args.global.plugins.push(createPinia())\r\n  args.global.plugins.push(createI18n())\r\n\r\n  return mount(\r\n    () => {\r\n      return h(VApp, {}, component)\r\n    },\r\n    ...args\r\n  )\r\n})\n"})}),"\n",(0,r.jsx)(e.h3,{id:"vue-router",children:"Vue Router"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"import { mount } from 'cypress/vue'\r\nimport { createMemoryHistory, createRouter } from 'vue-router'\r\nimport { routes } from '../../src/router'\r\n\r\nCypress.Commands.add('mount', (component, options = {}) => {\r\n  // Setup options object\r\n  options.global = options.global || {}\r\n  options.global.plugins = options.global.plugins || []\r\n\r\n  // create router if one is not provided\r\n  if (!options.router) {\r\n    options.router = createRouter({\r\n      routes: routes,\r\n      history: createMemoryHistory(),\r\n    })\r\n  }\r\n\r\n  // Add router plugin\r\n  options.global.plugins.push({\r\n    install(app) {\r\n      app.use(options.router)\r\n    },\r\n  })\r\n\r\n  return mount(component, options)\r\n})\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"import { mount } from 'cypress/vue'\r\nimport { Router } from 'vue-router'\r\n\r\ntype MountParams = Parameters<typeof mount>\r\ntype OptionsParam = MountParams[1] & { router?: Router }\r\n\r\ndeclare global {\r\n  namespace Cypress {\r\n    interface Chainable {\r\n      /**\r\n       * Helper mount function for Vue Components\r\n       * @param component Vue Component or JSX Element to mount\r\n       * @param options Options passed to Vue Test Utils\r\n       */\r\n      mount(component: any, options?: OptionsParam): Chainable<any>\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"import Navigation from './Navigation.vue'\r\nimport { routes } from '../router'\r\nimport { createMemoryHistory, createRouter } from 'vue-router'\r\n\r\nit('home link should be active when url is \"/\"', () => {\r\n  // No need to pass in custom router as default url is '/'\r\n  cy.mount(<Navigation />)\r\n\r\n  cy.get('a').contains('Home').should('have.class', 'router-link-active')\r\n})\r\n\r\nit('login link should be active when url is \"/login\"', () => {\r\n  // Create a new router instance for each test\r\n  const router = createRouter({\r\n    routes: routes,\r\n    history: createMemoryHistory(),\r\n  })\r\n\r\n  // Change location to `/login`,\r\n  // and await on the promise with cy.wrap\r\n  cy.wrap(router.push('/login'))\r\n\r\n  // Pass the already initialized router for use\r\n  cy.mount(<Navigation />, { router })\r\n\r\n  cy.get('a').contains('Login').should('have.class', 'router-link-active')\r\n})\n"})}),"\n",(0,r.jsx)(e.admonition,{type:"note",children:(0,r.jsxs)(e.p,{children:["Calling ",(0,r.jsx)(e.code,{children:"router.push()"})," in the router for Vue 3 is an asynchronous operation. Use the ",(0,r.jsx)(e.code,{children:"cy.wrap"})," command to have Cypress await the promise's resolve before it continues with other commands"]})}),"\n",(0,r.jsx)(e.h3,{id:"global-components",children:"Global Components"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"import { mount } from 'cypress/vue'\r\nimport Button from '../../src/components/Button.vue'\r\n\r\nCypress.Commands.add('mount', (component, options = {}) => {\r\n  // Setup options object\r\n  options.global = options.global || {}\r\n  options.global.components = options.global.components || {}\r\n\r\n  // Register global components\r\n  options.global.components['Button'] = Button\r\n\r\n  return mount(component, options)\r\n})\n"})})]})}function p(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},28453:(n,e,o)=>{o.d(e,{R:()=>i,x:()=>a});var r=o(96540);const t={},s=r.createContext(t);function i(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:i(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);