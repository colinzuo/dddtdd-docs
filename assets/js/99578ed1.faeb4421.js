"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[4545],{77988:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>t,metadata:()=>r,toc:()=>o});var l=a(74848),s=a(28453);const t={},c=void 0,r={id:"tools/rabbitmq/tutorial",title:"tutorial",description:"https://www.rabbitmq.com/tutorials/tutorial-one-java.html",source:"@site/docs/00700-tools/rabbitmq/tutorial.md",sourceDirName:"00700-tools/rabbitmq",slug:"/tools/rabbitmq/tutorial",permalink:"/dddtdd-docs/tools/rabbitmq/tutorial",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1720187019e3,frontMatter:{},sidebar:"docSidebar",previous:{title:"\u4ecb\u7ecd",permalink:"/dddtdd-docs/tools/pyenv/"},next:{title:"utilities",permalink:"/dddtdd-docs/tools/shell/utilities"}},i={},o=[{value:"Hello World",id:"hello-world",level:2},{value:"Work Queues",id:"work-queues",level:2},{value:"Publish/Subscribe",id:"publishsubscribe",level:2},{value:"Routing",id:"routing",level:2},{value:"Topics",id:"topics",level:2},{value:"RPC",id:"rpc",level:2},{value:"Publisher Confirms",id:"publisher-confirms",level:2}];function u(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://www.rabbitmq.com/tutorials/tutorial-one-java.html",children:"https://www.rabbitmq.com/tutorials/tutorial-one-java.html"})}),"\n",(0,l.jsx)(n.h2,{id:"hello-world",children:"Hello World"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'  private final static String QUEUE_NAME = "hello";\n\n  ConnectionFactory factory = new ConnectionFactory();\n  factory.setHost("localhost");\n  try (Connection connection = factory.newConnection();\n      Channel channel = connection.createChannel()) {\n\n  }\n\n  channel.queueDeclare(QUEUE_NAME, false, false, false, null);\n  String message = "Hello World!";\n  channel.basicPublish("", QUEUE_NAME, null, message.getBytes());\n  System.out.println(" [x] Sent \'" + message + "\'");\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'  ConnectionFactory factory = new ConnectionFactory();\n  factory.setHost("localhost");\n  Connection connection = factory.newConnection();\n  Channel channel = connection.createChannel();\n\n  channel.queueDeclare(QUEUE_NAME, false, false, false, null);\n  System.out.println(" [*] Waiting for messages. To exit press CTRL+C");\n\n  DeliverCallback deliverCallback = (consumerTag, delivery) -> {\n      String message = new String(delivery.getBody(), "UTF-8");\n      System.out.println(" [x] Received \'" + message + "\'");\n  };\n  channel.basicConsume(QUEUE_NAME, true, deliverCallback, consumerTag -> { });    \n'})}),"\n",(0,l.jsx)(n.h2,{id:"work-queues",children:"Work Queues"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"boolean autoAck = true; // acknowledgment is covered below\nchannel.basicConsume(TASK_QUEUE_NAME, autoAck, deliverCallback, consumerTag -> { });\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'channel.basicQos(1); // accept only one unack-ed message at a time (see below)\n\nDeliverCallback deliverCallback = (consumerTag, delivery) -> {\n  String message = new String(delivery.getBody(), "UTF-8");\n\n  System.out.println(" [x] Received \'" + message + "\'");\n  try {\n    doWork(message);\n  } finally {\n    System.out.println(" [x] Done");\n    channel.basicAck(delivery.getEnvelope().getDeliveryTag(), false);\n  }\n};\nboolean autoAck = false;\nchannel.basicConsume(TASK_QUEUE_NAME, autoAck, deliverCallback, consumerTag -> { });\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'boolean durable = true;\nchannel.queueDeclare("task_queue", durable, false, false, null);\n\nchannel.basicPublish("", "task_queue",\n            MessageProperties.PERSISTENT_TEXT_PLAIN,\n            message.getBytes());\n'})}),"\n",(0,l.jsx)(n.h2,{id:"publishsubscribe",children:"Publish/Subscribe"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'channel.exchangeDeclare("logs", "fanout");\n\n// named exchange\nchannel.basicPublish( "logs", "", null, message.getBytes());\n\n// temporary queue\nString queueName = channel.queueDeclare().getQueue();\n\nchannel.queueBind(queueName, "logs", "");\n'})}),"\n",(0,l.jsx)(n.h2,{id:"routing",children:"Routing"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'channel.exchangeDeclare(EXCHANGE_NAME, "direct");\n\nchannel.basicPublish(EXCHANGE_NAME, severity, null, message.getBytes());\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"String queueName = channel.queueDeclare().getQueue();\n\nfor(String severity : argv){\n  channel.queueBind(queueName, EXCHANGE_NAME, severity);\n}\n"})}),"\n",(0,l.jsx)(n.h2,{id:"topics",children:"Topics"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'  channel.exchangeDeclare(EXCHANGE_NAME, "topic");\n\n  channel.basicPublish(EXCHANGE_NAME, routingKey, null, message.getBytes("UTF-8"));\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"  for (String bindingKey : argv) {\n      channel.queueBind(queueName, EXCHANGE_NAME, bindingKey);\n  }\n"})}),"\n",(0,l.jsx)(n.h2,{id:"rpc",children:"RPC"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'  callbackQueueName = channel.queueDeclare().getQueue();\n\n  BasicProperties props = new BasicProperties\n                              .Builder()\n                              .replyTo(callbackQueueName)\n                              .build();\n\n  channel.basicPublish("", "rpc_queue", props, message.getBytes());\n'})}),"\n",(0,l.jsx)(n.h2,{id:"publisher-confirms",children:"Publisher Confirms"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'  Channel channel = connection.createChannel();\n  channel.confirmSelect();\n\n  channel.addConfirmListener((sequenceNumber, multiple) -> {\n      // code when message is confirmed\n  }, (sequenceNumber, multiple) -> {\n      // code when message is nack-ed\n  });\n\n  ConcurrentNavigableMap<Long, String> outstandingConfirms = new ConcurrentSkipListMap<>();\n  // ... code for confirm callbacks will come later\n  String body = "...";\n  outstandingConfirms.put(channel.getNextPublishSeqNo(), body);\n  channel.basicPublish(exchange, queue, properties, body.getBytes());  \n'})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(u,{...e})}):u(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>c,x:()=>r});var l=a(96540);const s={},t=l.createContext(s);function c(e){const n=l.useContext(t);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),l.createElement(t.Provider,{value:n},e.children)}}}]);