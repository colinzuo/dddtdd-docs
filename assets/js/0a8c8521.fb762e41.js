"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[1471],{60384:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var t=r(74848),i=r(28453);const o={},s="Plugins",a={id:"frontend/vue3/pinia/plugins",title:"Plugins",description:"This is useful to add global objects like the router, modal, or toast managers",source:"@site/docs/00200-frontend/vue3/040-pinia/070-plugins.md",sourceDirName:"00200-frontend/vue3/040-pinia",slug:"/frontend/vue3/pinia/plugins",permalink:"/dddtdd-docs/frontend/vue3/pinia/plugins",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1720187019e3,sidebarPosition:70,frontMatter:{},sidebar:"docSidebar",previous:{title:"Actions",permalink:"/dddtdd-docs/frontend/vue3/pinia/actions"},next:{title:"Using a store outside of a component",permalink:"/dddtdd-docs/frontend/vue3/pinia/outside-component-usage"}},d={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Augmenting a Store",id:"augmenting-a-store",level:2},{value:"Adding new external properties",id:"adding-new-external-properties",level:2},{value:"Adding new options",id:"adding-new-options",level:2},{value:"TypeScript",id:"typescript",level:2},{value:"Typing plugins",id:"typing-plugins",level:3},{value:"Typing new store properties",id:"typing-new-store-properties",level:3},{value:"Typing new creation options",id:"typing-new-creation-options",level:3}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"plugins",children:"Plugins"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"pinia.use(myPiniaPlugin)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This is useful to add global objects like the router, modal, or ",(0,t.jsx)(n.strong,{children:"toast managers"})]}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(n.p,{children:"A Pinia plugin is a function that optionally returns properties to be added to a store. It takes one optional argument, a context"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"export function myPiniaPlugin(context) {\r\n  context.pinia // the pinia created with `createPinia()`\r\n  context.app // the current app created with `createApp()` (Vue 3 only)\r\n  context.store // the store the plugin is augmenting\r\n  context.options // the options object defining the store passed to `defineStore()`\r\n  // ...\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"augmenting-a-store",children:"Augmenting a Store"}),"\n",(0,t.jsxs)(n.p,{children:["Note that every store is wrapped with reactive, automatically unwrapping any Ref (",(0,t.jsx)(n.code,{children:"ref()"}),", ",(0,t.jsx)(n.code,{children:"computed()"}),", ...) ",(0,t.jsx)(n.strong,{children:"it contains"})]}),"\n",(0,t.jsxs)(n.p,{children:["This is why you can ",(0,t.jsx)(n.strong,{children:"access all computed properties without .value"})," and why they are reactive."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const sharedRef = ref('shared')\r\npinia.use(({ store }) => {\r\n  // each store has its individual `hello` property\r\n  store.hello = ref('secret')\r\n  // it gets automatically unwrapped\r\n  store.hello // 'secret'\r\n\r\n  // all stores are sharing the value `shared` property\r\n  store.shared = sharedRef\r\n  store.shared // 'shared'\r\n})\n"})}),"\n",(0,t.jsx)(n.h2,{id:"adding-new-external-properties",children:"Adding new external properties"}),"\n",(0,t.jsxs)(n.p,{children:["When adding external properties, class instances that come from other libraries, or simply things that are not reactive, you should wrap the object with ",(0,t.jsx)(n.code,{children:"markRaw()"})," before passing it to pinia"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { markRaw } from 'vue'\r\n// adapt this based on where your router is\r\nimport { router } from './router'\r\n\r\npinia.use(({ store }) => {\r\n  store.router = markRaw(router)\r\n})\n"})}),"\n",(0,t.jsx)(n.h2,{id:"adding-new-options",children:"Adding new options"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"defineStore('search', {\r\n  actions: {\r\n    searchContacts() {\r\n      // ...\r\n    },\r\n  },\r\n\r\n  // this will be read by a plugin later on\r\n  debounce: {\r\n    // debounce the action searchContacts by 300ms\r\n    searchContacts: 300,\r\n  },\r\n})\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// use any debounce library\r\nimport debounce from 'lodash/debounce'\r\n\r\npinia.use(({ options, store }) => {\r\n  if (options.debounce) {\r\n    // we are overriding the actions with new ones\r\n    return Object.keys(options.debounce).reduce((debouncedActions, action) => {\r\n      debouncedActions[action] = debounce(\r\n        store[action],\r\n        options.debounce[action]\r\n      )\r\n      return debouncedActions\r\n    }, {})\r\n  }\r\n})\n"})}),"\n",(0,t.jsx)(n.p,{children:"Note that custom options are passed as the 3rd argument when using the setup syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"defineStore(\r\n  'search',\r\n  () => {\r\n    // ...\r\n  },\r\n  {\r\n    // this will be read by a plugin later on\r\n    debounce: {\r\n      // debounce the action searchContacts by 300ms\r\n      searchContacts: 300,\r\n    },\r\n  }\r\n)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"typescript",children:"TypeScript"}),"\n",(0,t.jsx)(n.h3,{id:"typing-plugins",children:"Typing plugins"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { PiniaPluginContext } from 'pinia'\r\n\r\nexport function myPiniaPlugin(context: PiniaPluginContext) {\r\n  // ...\r\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"typing-new-store-properties",children:"Typing new store properties"}),"\n",(0,t.jsxs)(n.p,{children:["When adding new properties to stores, you should also extend the ",(0,t.jsx)(n.code,{children:"PiniaCustomProperties"})," interface"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import 'pinia'\r\nimport type { Router } from 'vue-router'\r\n\r\ndeclare module 'pinia' {\r\n  export interface PiniaCustomProperties {\r\n    // by using a setter we can allow both strings and refs\r\n    set hello(value: string | Ref<string>)\r\n    get hello(): string\r\n\r\n    // you can define simpler values too\r\n    simpleNumber: number\r\n\r\n    // type the router added by the plugin above (#adding-new-external-properties)\r\n    router: Router\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"typing-new-creation-options",children:"Typing new creation options"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import 'pinia'\r\n\r\ndeclare module 'pinia' {\r\n  export interface DefineStoreOptionsBase<S, Store> {\r\n    // allow defining a number of ms for any of the actions\r\n    debounce?: Partial<Record<keyof StoreActions<Store>, number>>\r\n  }\r\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var t=r(96540);const i={},o=t.createContext(i);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);