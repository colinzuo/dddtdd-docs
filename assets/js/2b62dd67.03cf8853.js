"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[3778],{27413:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>o});var i=t(74848),r=t(28453);const l={},s="Event Handling",d={id:"frontend/vue3/core/essentials/event-handling",title:"Event Handling",description:"Listening to Events",source:"@site/docs/00200-frontend/vue3/010-core/011-essentials/080-event-handling.md",sourceDirName:"00200-frontend/vue3/010-core/011-essentials",slug:"/frontend/vue3/core/essentials/event-handling",permalink:"/dddtdd-docs/frontend/vue3/core/essentials/event-handling",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1720187019e3,sidebarPosition:80,frontMatter:{},sidebar:"docSidebar",previous:{title:"List Rendering",permalink:"/dddtdd-docs/frontend/vue3/core/essentials/list-rendering"},next:{title:"Form Input Bindings",permalink:"/dddtdd-docs/frontend/vue3/core/essentials/form-input-bindings"}},c={},o=[{value:"Listening to Events",id:"listening-to-events",level:2},{value:"Inline Handlers",id:"inline-handlers",level:2},{value:"Method Handlers",id:"method-handlers",level:2},{value:"Calling Methods in Inline Handlers",id:"calling-methods-in-inline-handlers",level:2},{value:"Accessing Event Argument in Inline Handlers",id:"accessing-event-argument-in-inline-handlers",level:2},{value:"Event Modifiers",id:"event-modifiers",level:2},{value:"Key Modifiers",id:"key-modifiers",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"event-handling",children:"Event Handling"}),"\n",(0,i.jsx)(n.h2,{id:"listening-to-events",children:"Listening to Events"}),"\n",(0,i.jsx)(n.h2,{id:"inline-handlers",children:"Inline Handlers"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'<button @click="count++">Add 1</button>\r\n<p>Count is: {{ count }}</p>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"method-handlers",children:"Method Handlers"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'\x3c!-- `greet` is the name of the method defined above --\x3e\r\n<button @click="greet">Greet</button>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"calling-methods-in-inline-handlers",children:"Calling Methods in Inline Handlers"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"<button @click=\"say('hello')\">Say hello</button>\r\n<button @click=\"say('bye')\">Say bye</button>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"accessing-event-argument-in-inline-handlers",children:"Accessing Event Argument in Inline Handlers"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"\x3c!-- using $event special variable --\x3e\r\n<button @click=\"warn('Form cannot be submitted yet.', $event)\">\r\n  Submit\r\n</button>\r\n\r\n\x3c!-- using inline arrow function --\x3e\r\n<button @click=\"(event) => warn('Form cannot be submitted yet.', event)\">\r\n  Submit\r\n</button>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"event-modifiers",children:"Event Modifiers"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:".stop"}),"\n",(0,i.jsx)(n.li,{children:".prevent"}),"\n",(0,i.jsx)(n.li,{children:".self"}),"\n",(0,i.jsx)(n.li,{children:".capture"}),"\n",(0,i.jsx)(n.li,{children:".once"}),"\n",(0,i.jsx)(n.li,{children:".passive"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'\x3c!-- the click event\'s propagation will be stopped --\x3e\r\n<a @click.stop="doThis"></a>\r\n\r\n\x3c!-- the submit event will no longer reload the page --\x3e\r\n<form @submit.prevent="onSubmit"></form>\r\n\r\n\x3c!-- modifiers can be chained --\x3e\r\n<a @click.stop.prevent="doThat"></a>\r\n\r\n\x3c!-- just the modifier --\x3e\r\n<form @submit.prevent></form>\r\n\r\n\x3c!-- only trigger handler if event.target is the element itself --\x3e\r\n\x3c!-- i.e. not from a child element --\x3e\r\n<div @click.self="doThat">...</div>\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'\x3c!-- use capture mode when adding the event listener     --\x3e\r\n\x3c!-- i.e. an event targeting an inner element is handled --\x3e\r\n\x3c!-- here before being handled by that element           --\x3e\r\n<div @click.capture="doThis">...</div>\r\n\r\n\x3c!-- the click event will be triggered at most once --\x3e\r\n<a @click.once="doThis"></a>\r\n\r\n\x3c!-- the scroll event\'s default behavior (scrolling) will happen --\x3e\r\n\x3c!-- immediately, instead of waiting for `onScroll` to complete  --\x3e\r\n\x3c!-- in case it contains `event.preventDefault()`                --\x3e\r\n<div @scroll.passive="onScroll">...</div>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"key-modifiers",children:"Key Modifiers"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'\x3c!-- only call `submit` when the `key` is `Enter` --\x3e\r\n<input @keyup.enter="submit" />\r\n\r\n<input @keyup.page-down="onPageDown" />\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>d});var i=t(96540);const r={},l=i.createContext(r);function s(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);