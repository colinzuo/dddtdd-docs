"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[9954],{38384:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>g,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var s=r(74848),t=r(28453);const a={},i=void 0,o={id:"programming-languages/python/libs/pytest/startup",title:"startup",description:"\u521d\u59cb\u5316 PytestPluginManager \u548c Config",source:"@site/docs/00400-programming-languages/python/libs/pytest/110-startup.md",sourceDirName:"00400-programming-languages/python/libs/pytest",slug:"/programming-languages/python/libs/pytest/startup",permalink:"/dddtdd-docs/programming-languages/python/libs/pytest/startup",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1733377229e3,sidebarPosition:110,frontMatter:{},sidebar:"docSidebar",previous:{title:"fixture",permalink:"/dddtdd-docs/programming-languages/python/libs/pytest/fixture"},next:{title:"collect",permalink:"/dddtdd-docs/programming-languages/python/libs/pytest/collect"}},l={},p=[{value:"\u521d\u59cb\u5316 PytestPluginManager \u548c Config",id:"\u521d\u59cb\u5316-pytestpluginmanager-\u548c-config",level:2},{value:"\u6ce8\u518cdefault_plugins",id:"\u6ce8\u518cdefault_plugins",level:2},{value:"pytest_cmdline_parse",id:"pytest_cmdline_parse",level:2},{value:"Config._preparse",id:"config_preparse",level:3},{value:"capture.pytest_load_initial_conftests",id:"capturepytest_load_initial_conftests",level:5},{value:"Config.pytest_load_initial_conftests",id:"configpytest_load_initial_conftests",level:5},{value:"Parser.parse_setoption",id:"parserparse_setoption",level:4},{value:"pytest_cmdline_main",id:"pytest_cmdline_main",level:2},{value:"wrap_session",id:"wrap_session",level:3},{value:"_main",id:"_main",level:3}];function c(n){const e={code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",p:"p",pre:"pre",...(0,t.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{id:"\u521d\u59cb\u5316-pytestpluginmanager-\u548c-config",children:"\u521d\u59cb\u5316 PytestPluginManager \u548c Config"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",metastring:'title="src_pytest\\config__init__.py"',children:"def console_main() -> int:\r\n\r\n        code = main()    \n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",metastring:'title="src_pytest\\config__init__.py"',children:"def main(\r\n    args: list[str] | os.PathLike[str] | None = None,\r\n    plugins: Sequence[str | _PluggyPlugin] | None = None,\r\n) -> int | ExitCode:\r\n\r\n            config = _prepareconfig(args, plugins)\r\n\r\n                ret: ExitCode | int = config.hook.pytest_cmdline_main(config=config)            \n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",metastring:'title="src_pytest\\config__init__.py"',children:"def _prepareconfig(\r\n    args: list[str] | os.PathLike[str] | None = None,\r\n    plugins: Sequence[str | _PluggyPlugin] | None = None,\r\n) -> Config:\r\n    if args is None:\r\n        args = sys.argv[1:]\r\n\r\n    config = get_config(args, plugins)\r\n\r\n        if plugins:\r\n            for plugin in plugins:\r\n                if isinstance(plugin, str):\r\n                    pluginmanager.consider_pluginarg(plugin)\r\n                else:\r\n                    pluginmanager.register(plugin)\r\n        config = pluginmanager.hook.pytest_cmdline_parse(\r\n            pluginmanager=pluginmanager, args=args\r\n        )    \n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",metastring:'title="src_pytest\\config__init__.py"',children:'def get_config(\r\n    args: list[str] | None = None,\r\n    plugins: Sequence[str | _PluggyPlugin] | None = None,\r\n) -> Config:\r\n\r\n    pluginmanager = PytestPluginManager()\r\n    config = Config(\r\n        pluginmanager,\r\n        invocation_params=Config.InvocationParams(\r\n            args=args or (),\r\n            plugins=plugins,\r\n            dir=pathlib.Path.cwd(),\r\n        ),\r\n    )\r\n\r\n    if args is not None:\r\n        # Handle any "-p no:plugin" args.\r\n        pluginmanager.consider_preparse(args, exclude_only=True)\r\n\r\n    for spec in default_plugins:\r\n        pluginmanager.import_plugin(spec)\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",metastring:'title="src_pytest\\config__init__.py"',children:'class PytestPluginManager(PluginManager):\r\n\r\n        self.add_hookspecs(_pytest.hookspec)\r\n        self.register(self)\r\n        if os.environ.get("PYTEST_DEBUG"):\r\n\r\n            self.trace.root.setwriter(err.write)\r\n            self.enable_tracing()\r\n\r\n        self.rewrite_hook = _pytest.assertion.DummyRewriteHook()\r\n        # Used to know when we are importing conftests after the pytest_configure stage.\r\n        self._configured = False                               \n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",metastring:'title="src_pytest\\config__init__.py"',children:'class Config:\r\n\r\n    def __init__(\r\n        self,\r\n        pluginmanager: PytestPluginManager,\r\n        *,\r\n        invocation_params: InvocationParams | None = None,\r\n    ) -> None:\r\n\r\n        self.option = argparse.Namespace()\r\n\r\n        self._parser = Parser(\r\n            usage=f"%(prog)s [options] [{_a}] [{_a}] [...]",\r\n            processopt=self._processopt,\r\n            _ispytest=True,\r\n        )\r\n        self.pluginmanager = pluginmanager\r\n\r\n        self.pluginmanager.register(self, "pytestconfig")\r\n        self._configured = False\r\n        self.hook.pytest_addoption.call_historic(\r\n            kwargs=dict(parser=self._parser, pluginmanager=self.pluginmanager)\r\n        )\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",metastring:'title="src_pytest\\config__init__.py"',children:"class PytestPluginManager(PluginManager):\r\n\r\n    def consider_preparse(\r\n        self, args: Sequence[str], *, exclude_only: bool = False\r\n    ) -> None:\r\n\r\n                self.consider_pluginarg(parg)\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",metastring:'title="src_pytest\\config__init__.py"',children:'class PytestPluginManager(PluginManager):\r\n\r\n    def consider_pluginarg(self, arg: str) -> None:\r\n\r\n        if arg.startswith("no:"):\r\n\r\n            self.set_blocked(name)\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",metastring:'title="src_pytest\\config__init__.py"',children:'class PytestPluginManager(PluginManager):\r\n\r\n    def import_plugin(self, modname: str, consider_entry_points: bool = False) -> None:\r\n\r\n        if self.is_blocked(modname) or self.get_plugin(modname) is not None:\r\n            return\r\n\r\n        importspec = "_pytest." + modname if modname in builtin_plugins else modname\r\n\r\n            mod = sys.modules[importspec]\r\n            self.register(mod, modname)        \n'})}),"\n",(0,s.jsx)(e.h2,{id:"\u6ce8\u518cdefault_plugins",children:"\u6ce8\u518cdefault_plugins"}),"\n",(0,s.jsx)(e.p,{children:"\u4f7f\u80fd\u7684default_plugins\u7684pytest_addoption hook\u88ab\u8c03\u7528"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",metastring:'title="src_pytest\\config__init__.py"',children:'def get_config(\r\n    args: list[str] | None = None,\r\n    plugins: Sequence[str | _PluggyPlugin] | None = None,\r\n) -> Config:\r\n\r\n    if args is not None:\r\n        # Handle any "-p no:plugin" args.\r\n        pluginmanager.consider_preparse(args, exclude_only=True)\r\n\r\n    for spec in default_plugins:\r\n        pluginmanager.import_plugin(spec)\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",metastring:'title="src_pytest\\hookspec.py"',children:'def pytest_addoption(parser: Parser, pluginmanager: PytestPluginManager) -> None:\r\n    """Register argparse-style options and ini-style config values,\r\n    called once at the beginning of a test run.\n'})}),"\n",(0,s.jsx)(e.h2,{id:"pytest_cmdline_parse",children:"pytest_cmdline_parse"}),"\n",(0,s.jsx)(e.p,{children:"\u4e09\u65b9\u7684plugin\u548cconftest\u7684pytest_addoption hook\u88ab\u8c03\u7528"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",metastring:'title="src_pytest\\config__init__.py"',children:'class Config:\r\n\r\n    def pytest_cmdline_parse(\r\n        self, pluginmanager: PytestPluginManager, args: list[str]\r\n    ) -> Config:\r\n\r\n            self.parse(args)\r\n\r\n    def parse(self, args: list[str], addopts: bool = True) -> None:\r\n\r\n        self.hook.pytest_addhooks.call_historic(\r\n            kwargs=dict(pluginmanager=self.pluginmanager)\r\n        )\r\n        self._preparse(args, addopts=addopts)\r\n        self._parser.after_preparse = True  # type: ignore\r\n\r\n            args = self._parser.parse_setoption(\r\n                args, self.option, namespace=self.option\r\n            )\r\n            self.args, self.args_source = self._decide_args(\r\n                args=args,\r\n                pyargs=self.known_args_namespace.pyargs,\r\n                testpaths=self.getini("testpaths"),\r\n                invocation_dir=self.invocation_params.dir,\r\n                rootpath=self.rootpath,\r\n                warn=True,\r\n            )            \n'})}),"\n",(0,s.jsx)(e.h3,{id:"config_preparse",children:"Config._preparse"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",metastring:'title="src_pytest\\config__init__.py"',children:'class Config:\r\n\r\n    def _preparse(self, args: list[str], addopts: bool = True) -> None:\r\n        if addopts:\r\n            env_addopts = os.environ.get("PYTEST_ADDOPTS", "")\r\n            if len(env_addopts):\r\n                args[:] = (\r\n                    self._validate_args(shlex.split(env_addopts), "via PYTEST_ADDOPTS")\r\n                    + args\r\n                )\r\n        self._initini(args)\r\n        if addopts:\r\n            args[:] = (\r\n                self._validate_args(self.getini("addopts"), "via addopts config") + args\r\n            )\r\n\r\n        self.known_args_namespace = self._parser.parse_known_args(\r\n            args, namespace=copy.copy(self.option)\r\n        )\r\n        self._checkversion()\r\n        self._consider_importhook(args)\r\n        self._configure_python_path()\r\n        self.pluginmanager.consider_preparse(args, exclude_only=False)\r\n        if not os.environ.get("PYTEST_DISABLE_PLUGIN_AUTOLOAD"):\r\n            # Don\'t autoload from distribution package entry point. Only\r\n            # explicitly specified plugins are going to be loaded.\r\n            self.pluginmanager.load_setuptools_entrypoints("pytest11")\r\n        self.pluginmanager.consider_env()\r\n\r\n        self.known_args_namespace = self._parser.parse_known_args(\r\n            args, namespace=copy.copy(self.known_args_namespace)\r\n        )\r\n\r\n        self._validate_plugins()\r\n        self._warn_about_skipped_plugins()\r\n\r\n                confcutdir = str(self.inipath.parent)\r\n                \r\n            self.known_args_namespace.confcutdir = confcutdir\r\n\r\n            self.hook.pytest_load_initial_conftests(\r\n                early_config=self, args=args, parser=self._parser\r\n            )\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",metastring:'title="src_pytest\\config__init__.py"',children:"class Config:\r\n\r\n    def _consider_importhook(self, args: Sequence[str]) -> None:\r\n\r\n                hook = _pytest.assertion.install_importhook(self)\r\n\r\n                self._mark_plugins_for_rewrite(hook)       \r\n\r\n    def _mark_plugins_for_rewrite(self, hook) -> None:\r\n\r\n        self.pluginmanager.rewrite_hook = hook    \r\n\r\n        for name in _iter_rewritable_modules(package_files):\r\n            hook.mark_rewrite(name)                                     \n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",metastring:'title="src_pytest\\config__init__.py"',children:'class PytestPluginManager(PluginManager):\r\n\r\n    def consider_preparse(\r\n        self, args: Sequence[str], *, exclude_only: bool = False\r\n    ) -> None:\r\n\r\n                if opt == "-p":\r\n\r\n                self.consider_pluginarg(parg)\r\n\r\n    def consider_pluginarg(self, arg: str) -> None:\r\n\r\n            self.import_plugin(arg, consider_entry_points=True)                                                \n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",metastring:'title="src_pytest\\hookspec.py"',children:'def pytest_load_initial_conftests(\r\n    early_config: Config, parser: Parser, args: list[str]\r\n) -> None:\r\n    """Called to implement the loading of :ref:`initial conftest files\r\n    <pluginorder>` ahead of command line option parsing.\r\n\n'})}),"\n",(0,s.jsx)(e.h5,{id:"capturepytest_load_initial_conftests",children:"capture.pytest_load_initial_conftests"}),"\n",(0,s.jsxs)(e.p,{children:["\u901a\u8fc7\u4fee\u6539",(0,s.jsx)(e.code,{children:"sys.stdout"}),"\u7b49\u5c06\u5bf9\u5e94\u6d41\u5b9a\u4f4d\u5230tempfile\uff0c\u5982\u679c\u4e0d\u51fa\u9519\u5219\u6700\u540e\u653e\u5230report\u4e2d\uff0c\r\n\u51fa\u9519\u5219\u6062\u590d\u5e76\u8f93\u51fa"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",metastring:'title="src_pytest\\capture.py"',children:"def pytest_load_initial_conftests(early_config: Config) -> Generator[None]:\r\n\r\n    capman.start_global_capturing()\r\n    try:\r\n        try:\r\n            yield\r\n        finally:\r\n            capman.suspend_global_capture()\r\n    except BaseException:\r\n        out, err = capman.read_global_capture()\r\n        sys.stdout.write(out)\r\n        sys.stderr.write(err)\n"})}),"\n",(0,s.jsx)(e.h5,{id:"configpytest_load_initial_conftests",children:"Config.pytest_load_initial_conftests"}),"\n",(0,s.jsx)(e.p,{children:"\u5982\u679c\u547d\u4ee4\u884c\u6307\u5b9a\u4e86\u76ee\u5f55\u5219\u4f7f\u7528\uff0c\u5426\u5219\u4f7f\u7528\u5f53\u524d\u76ee\u5f55"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",metastring:'title="src_pytest\\config__init__.py"',children:'class Config:\r\n\r\n    def pytest_load_initial_conftests(self, early_config: Config) -> None:\r\n\r\n        args, args_source = early_config._decide_args(\r\n            args=early_config.known_args_namespace.file_or_dir,\r\n            pyargs=early_config.known_args_namespace.pyargs,\r\n            testpaths=early_config.getini("testpaths"),\r\n            invocation_dir=early_config.invocation_params.dir,\r\n            rootpath=early_config.rootpath,\r\n            warn=False,\r\n        )\r\n        self.pluginmanager._set_initial_conftests(\r\n            args=args,\r\n            pyargs=early_config.known_args_namespace.pyargs,\r\n            noconftest=early_config.known_args_namespace.noconftest,\r\n            rootpath=early_config.rootpath,\r\n            confcutdir=early_config.known_args_namespace.confcutdir,\r\n            invocation_dir=early_config.invocation_params.dir,\r\n            importmode=early_config.known_args_namespace.importmode,\r\n            consider_namespace_packages=early_config.getini(\r\n                "consider_namespace_packages"\r\n            ),\r\n        )\r\n\r\n    def _set_initial_conftests(\r\n        self,\r\n        args: Sequence[str | pathlib.Path],\r\n        pyargs: bool,\r\n        noconftest: bool,\r\n        rootpath: pathlib.Path,\r\n        confcutdir: pathlib.Path | None,\r\n        invocation_dir: pathlib.Path,\r\n        importmode: ImportMode | str,\r\n        *,\r\n        consider_namespace_packages: bool,\r\n    ) -> None:\r\n\r\n                self._try_load_conftest(\r\n                    anchor,\r\n                    importmode,\r\n                    rootpath,\r\n                    consider_namespace_packages=consider_namespace_packages,\r\n                )\r\n\r\n    def _try_load_conftest(\r\n        self,\r\n        anchor: pathlib.Path,\r\n        importmode: str | ImportMode,\r\n        rootpath: pathlib.Path,\r\n        *,\r\n        consider_namespace_packages: bool,\r\n    ) -> None:\r\n\r\n        self._loadconftestmodules(\r\n            anchor,\r\n            importmode,\r\n            rootpath,\r\n            consider_namespace_packages=consider_namespace_packages,\r\n        )     \r\n\r\n        if anchor.is_dir():\r\n            for x in anchor.glob("test*"):\r\n                if x.is_dir():\r\n                    self._loadconftestmodules(\r\n                        x,\r\n                        importmode,\r\n                        rootpath,\r\n                        consider_namespace_packages=consider_namespace_packages,\r\n                    )\r\n\r\n    def _loadconftestmodules(\r\n        self,\r\n        path: pathlib.Path,\r\n        importmode: str | ImportMode,\r\n        rootpath: pathlib.Path,\r\n        *,\r\n        consider_namespace_packages: bool,\r\n    ) -> None: \r\n\r\n        directory = self._get_directory(path)\r\n\r\n        for parent in reversed((directory, *directory.parents)):    \r\n\r\n                conftestpath = parent / "conftest.py"\r\n                if conftestpath.is_file():\r\n                    mod = self._importconftest(\r\n                        conftestpath,\r\n                        importmode,\r\n                        rootpath,\r\n                        consider_namespace_packages=consider_namespace_packages,\r\n                    )\r\n                    clist.append(mod)\r\n        self._dirpath2confmods[directory] = clist  \r\n\r\n    def _importconftest(\r\n        self,\r\n        conftestpath: pathlib.Path,\r\n        importmode: str | ImportMode,\r\n        rootpath: pathlib.Path,\r\n        *,\r\n        consider_namespace_packages: bool,\r\n    ) -> types.ModuleType:\r\n\r\n            mod = import_path(\r\n                conftestpath,\r\n                mode=importmode,\r\n                root=rootpath,\r\n                consider_namespace_packages=consider_namespace_packages,\r\n            )\r\n\r\n        self.consider_conftest(mod, registration_name=conftestpath_plugin_name)\r\n\r\n    def consider_conftest(\r\n        self, conftestmodule: types.ModuleType, registration_name: str\r\n    ) -> None:\r\n        """:meta private:"""\r\n        self.register(conftestmodule, name=registration_name)                                                                                      \n'})}),"\n",(0,s.jsx)(e.h4,{id:"parserparse_setoption",children:"Parser.parse_setoption"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",metastring:'title="src_pytest\\config\\argparsing.py"',children:"class Parser:\r\n\r\n    def parse_setoption(\r\n        self,\r\n        args: Sequence[str | os.PathLike[str]],\r\n        option: argparse.Namespace,\r\n        namespace: argparse.Namespace | None = None,\r\n    ) -> list[str]:\r\n        parsedoption = self.parse(args, namespace=namespace)\r\n        for name, value in parsedoption.__dict__.items():\r\n            setattr(option, name, value)\r\n        return cast(List[str], getattr(parsedoption, FILE_OR_DIR))\n"})}),"\n",(0,s.jsx)(e.h2,{id:"pytest_cmdline_main",children:"pytest_cmdline_main"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",metastring:'title="src_pytest\\main.py"',children:"def pytest_cmdline_main(config: Config) -> int | ExitCode:\r\n    return wrap_session(config, _main)               \n"})}),"\n",(0,s.jsx)(e.h3,{id:"wrap_session",children:"wrap_session"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"def wrap_session(\r\n    config: Config, doit: Callable[[Config, Session], int | ExitCode | None]\r\n) -> int | ExitCode:\r\n\r\n    session = Session.from_config(config)\r\n\r\n            config._do_configure()\r\n            initstate = 1\r\n            config.hook.pytest_sessionstart(session=session)\r\n            initstate = 2\r\n            session.exitstatus = doit(config, session) or 0            \r\n\r\n    finally:\r\n\r\n                config.hook.pytest_sessionfinish(\r\n                    session=session, exitstatus=session.exitstatus\r\n                )\r\n\r\n        config._ensure_unconfigure()\n"})}),"\n",(0,s.jsx)(e.h3,{id:"_main",children:"_main"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"def _main(config: Config, session: Session) -> int | ExitCode | None:\r\n\r\n    config.hook.pytest_collection(session=session)\r\n    config.hook.pytest_runtestloop(session=session)    \n"})})]})}function g(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},28453:(n,e,r)=>{r.d(e,{R:()=>i,x:()=>o});var s=r(96540);const t={},a=s.createContext(t);function i(n){const e=s.useContext(a);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:i(n.components),s.createElement(a.Provider,{value:e},n.children)}}}]);