"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[9997],{57103:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var s=n(74848),i=n(28453);const r={},o="Defining Extension Types: Tutorial",a={id:"programming-languages/python/extending/newtypes_tutorial",title:"Defining Extension Types: Tutorial",description:"https://docs.python.org/3.11/extending/newtypestutorial.html",source:"@site/docs/00400-programming-languages/python/extending/0200-newtypes_tutorial.md",sourceDirName:"00400-programming-languages/python/extending",slug:"/programming-languages/python/extending/newtypes_tutorial",permalink:"/dddtdd-docs/programming-languages/python/extending/newtypes_tutorial",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1720187019e3,sidebarPosition:200,frontMatter:{},sidebar:"docSidebar",previous:{title:"extending",permalink:"/dddtdd-docs/programming-languages/python/extending/extending"},next:{title:"Defining Extension Types: Assorted Topics",permalink:"/dddtdd-docs/programming-languages/python/extending/newtypes"}},c={},l=[{value:"The Basics",id:"the-basics",level:2},{value:"Adding data and methods to the Basic example",id:"adding-data-and-methods-to-the-basic-example",level:2},{value:"Providing finer control over data attributes",id:"providing-finer-control-over-data-attributes",level:2},{value:"Supporting cyclic garbage collection",id:"supporting-cyclic-garbage-collection",level:2},{value:"Subclassing other types",id:"subclassing-other-types",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"defining-extension-types-tutorial",children:"Defining Extension Types: Tutorial"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://docs.python.org/3.11/extending/newtypes_tutorial.html",children:"https://docs.python.org/3.11/extending/newtypes_tutorial.html"})}),"\n",(0,s.jsx)(t.h2,{id:"the-basics",children:"The Basics"}),"\n",(0,s.jsxs)(t.p,{children:["The CPython runtime sees all Python objects as variables of type ",(0,s.jsx)(t.code,{children:"PyObject*"})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-c",children:'#define PY_SSIZE_T_CLEAN\n#include <Python.h>\n\ntypedef struct {\n    PyObject_HEAD\n    /* Type-specific fields go here. */\n} CustomObject;\n\nstatic PyTypeObject CustomType = {\n    PyVarObject_HEAD_INIT(NULL, 0)\n    .tp_name = "custom.Custom",\n    .tp_doc = PyDoc_STR("Custom objects"),\n    .tp_basicsize = sizeof(CustomObject),\n    .tp_itemsize = 0,\n    .tp_flags = Py_TPFLAGS_DEFAULT,\n    .tp_new = PyType_GenericNew,\n};\n\nstatic PyModuleDef custommodule = {\n    PyModuleDef_HEAD_INIT,\n    .m_name = "custom",\n    .m_doc = "Example module that creates an extension type.",\n    .m_size = -1,\n};\n\nPyMODINIT_FUNC\nPyInit_custom(void)\n{\n    PyObject *m;\n    if (PyType_Ready(&CustomType) < 0)\n        return NULL;\n\n    m = PyModule_Create(&custommodule);\n    if (m == NULL)\n        return NULL;\n\n    Py_INCREF(&CustomType);\n    if (PyModule_AddObject(m, "Custom", (PyObject *) &CustomType) < 0) {\n        Py_DECREF(&CustomType);\n        Py_DECREF(m);\n        return NULL;\n    }\n\n    return m;\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"PyObject_HEAD"})," is mandatory at the start of each object struct and defines a field called ob_base of type PyObject, containing a pointer to a type object and a reference count (these can be accessed using the macros ",(0,s.jsx)(t.code,{children:"Py_TYPE"})," and ",(0,s.jsx)(t.code,{children:"Py_REFCNT"})," respectively)"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"PyVarObject_HEAD_INIT(NULL, 0)"})}),"\n",(0,s.jsxs)(t.p,{children:["This line is mandatory boilerplate to initialize the ",(0,s.jsx)(t.code,{children:"ob_base"})," field mentioned above"]}),"\n",(0,s.jsx)(t.h2,{id:"adding-data-and-methods-to-the-basic-example",children:"Adding data and methods to the Basic example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-c",children:'#define PY_SSIZE_T_CLEAN\n#include <Python.h>\n#include "structmember.h"\n\ntypedef struct {\n    PyObject_HEAD\n    PyObject *first; /* first name */\n    PyObject *last;  /* last name */\n    int number;\n} CustomObject;\n\nstatic void\nCustom_dealloc(CustomObject *self)\n{\n    Py_XDECREF(self->first);\n    Py_XDECREF(self->last);\n    Py_TYPE(self)->tp_free((PyObject *) self);\n}\n\nstatic PyObject *\nCustom_new(PyTypeObject *type, PyObject *args, PyObject *kwds)\n{\n    CustomObject *self;\n    self = (CustomObject *) type->tp_alloc(type, 0);\n    if (self != NULL) {\n        self->first = PyUnicode_FromString("");\n        if (self->first == NULL) {\n            Py_DECREF(self);\n            return NULL;\n        }\n        self->last = PyUnicode_FromString("");\n        if (self->last == NULL) {\n            Py_DECREF(self);\n            return NULL;\n        }\n        self->number = 0;\n    }\n    return (PyObject *) self;\n}\n\nstatic int\nCustom_init(CustomObject *self, PyObject *args, PyObject *kwds)\n{\n    static char *kwlist[] = {"first", "last", "number", NULL};\n    PyObject *first = NULL, *last = NULL, *tmp;\n\n    if (!PyArg_ParseTupleAndKeywords(args, kwds, "|OOi", kwlist,\n                                     &first, &last,\n                                     &self->number))\n        return -1;\n\n    if (first) {\n        tmp = self->first;\n        Py_INCREF(first);\n        self->first = first;\n        Py_XDECREF(tmp);\n    }\n    if (last) {\n        tmp = self->last;\n        Py_INCREF(last);\n        self->last = last;\n        Py_XDECREF(tmp);\n    }\n    return 0;\n}\n\nstatic PyMemberDef Custom_members[] = {\n    {"first", T_OBJECT_EX, offsetof(CustomObject, first), 0,\n     "first name"},\n    {"last", T_OBJECT_EX, offsetof(CustomObject, last), 0,\n     "last name"},\n    {"number", T_INT, offsetof(CustomObject, number), 0,\n     "custom number"},\n    {NULL}  /* Sentinel */\n};\n\nstatic PyObject *\nCustom_name(CustomObject *self, PyObject *Py_UNUSED(ignored))\n{\n    if (self->first == NULL) {\n        PyErr_SetString(PyExc_AttributeError, "first");\n        return NULL;\n    }\n    if (self->last == NULL) {\n        PyErr_SetString(PyExc_AttributeError, "last");\n        return NULL;\n    }\n    return PyUnicode_FromFormat("%S %S", self->first, self->last);\n}\n\nstatic PyMethodDef Custom_methods[] = {\n    {"name", (PyCFunction) Custom_name, METH_NOARGS,\n     "Return the name, combining the first and last name"\n    },\n    {NULL}  /* Sentinel */\n};\n\nstatic PyTypeObject CustomType = {\n    PyVarObject_HEAD_INIT(NULL, 0)\n    .tp_name = "custom2.Custom",\n    .tp_doc = PyDoc_STR("Custom objects"),\n    .tp_basicsize = sizeof(CustomObject),\n    .tp_itemsize = 0,\n    .tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,\n    .tp_new = Custom_new,\n    .tp_init = (initproc) Custom_init,\n    .tp_dealloc = (destructor) Custom_dealloc,\n    .tp_members = Custom_members,\n    .tp_methods = Custom_methods,\n};\n\nstatic PyModuleDef custommodule = {\n    PyModuleDef_HEAD_INIT,\n    .m_name = "custom2",\n    .m_doc = "Example module that creates an extension type.",\n    .m_size = -1,\n};\n\nPyMODINIT_FUNC\nPyInit_custom2(void)\n{\n    PyObject *m;\n    if (PyType_Ready(&CustomType) < 0)\n        return NULL;\n\n    m = PyModule_Create(&custommodule);\n    if (m == NULL)\n        return NULL;\n\n    Py_INCREF(&CustomType);\n    if (PyModule_AddObject(m, "Custom", (PyObject *) &CustomType) < 0) {\n        Py_DECREF(&CustomType);\n        Py_DECREF(m);\n        return NULL;\n    }\n\n    return m;\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["We didn\u2019t fill the tp_alloc slot ourselves. Rather ",(0,s.jsx)(t.code,{children:"PyType_Ready()"})," fills it for us by inheriting it from our base class, which is object by default. Most types use the default allocation strategy."]}),"\n",(0,s.jsx)(t.p,{children:"To be paranoid and protect ourselves against this possibility, we almost always reassign members before decrementing their reference counts"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-c",children:"    if (first) {\n        tmp = self->first;\n        Py_INCREF(first);\n        self->first = first;\n        Py_XDECREF(tmp);\n    }\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Further, the attributes can be deleted, setting the C pointers to ",(0,s.jsx)(t.code,{children:"NULL"}),". Even though we can make sure the members are initialized to non-NULL values, the members can be set to NULL if the attributes are deleted."]}),"\n",(0,s.jsx)(t.h2,{id:"providing-finer-control-over-data-attributes",children:"Providing finer control over data attributes"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-c",children:'static PyObject *\nCustom_getfirst(CustomObject *self, void *closure)\n{\n    Py_INCREF(self->first);\n    return self->first;\n}\n\nstatic int\nCustom_setfirst(CustomObject *self, PyObject *value, void *closure)\n{\n    PyObject *tmp;\n    if (value == NULL) {\n        PyErr_SetString(PyExc_TypeError, "Cannot delete the first attribute");\n        return -1;\n    }\n    if (!PyUnicode_Check(value)) {\n        PyErr_SetString(PyExc_TypeError,\n                        "The first attribute value must be a string");\n        return -1;\n    }\n    tmp = self->first;\n    Py_INCREF(value);\n    self->first = value;\n    Py_DECREF(tmp);\n    return 0;\n}\n\nstatic PyGetSetDef Custom_getsetters[] = {\n    {"first", (getter) Custom_getfirst, (setter) Custom_setfirst,\n     "first name", NULL},\n    {"last", (getter) Custom_getlast, (setter) Custom_setlast,\n     "last name", NULL},\n    {NULL}  /* Sentinel */\n};\n\nstatic PyTypeObject CustomType = {\n    ...\n    .tp_getset = Custom_getsetters,\n'})}),"\n",(0,s.jsx)(t.p,{children:"The last item in a PyGetSetDef structure is the \u201cclosure\u201d mentioned above. In this case, we aren\u2019t using a closure, so we just pass NULL"}),"\n",(0,s.jsx)(t.h2,{id:"supporting-cyclic-garbage-collection",children:"Supporting cyclic garbage collection"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-c",children:"static int\nCustom_traverse(CustomObject *self, visitproc visit, void *arg)\n{\n    Py_VISIT(self->first);\n    Py_VISIT(self->last);\n    return 0;\n}\n\nstatic int\nCustom_clear(CustomObject *self)\n{\n    Py_CLEAR(self->first);\n    Py_CLEAR(self->last);\n    return 0;\n}\n\nstatic void\nCustom_dealloc(CustomObject *self)\n{\n    PyObject_GC_UnTrack(self);\n    Custom_clear(self);\n    Py_TYPE(self)->tp_free((PyObject *) self);\n}\n\nstatic PyTypeObject CustomType = {\n\n    .tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_GC,\n    .tp_traverse = (traverseproc) Custom_traverse,\n    .tp_clear = (inquiry) Custom_clear,\n"})}),"\n",(0,s.jsx)(t.h2,{id:"subclassing-other-types",children:"Subclassing other types"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-c",children:"typedef struct {\n    PyListObject list;\n    int state;\n} SubListObject;\n\nstatic int\nSubList_init(SubListObject *self, PyObject *args, PyObject *kwds)\n{\n    if (PyList_Type.tp_init((PyObject *) self, args, kwds) < 0)\n        return -1;\n    self->state = 0;\n    return 0;\n}\n\nstatic PyTypeObject SubListType = {\n    ...\n    .tp_init = (initproc) SubList_init,\n    .tp_methods = SubList_methods,\n\nPyMODINIT_FUNC\nPyInit_sublist(void)\n{\n    PyObject *m;\n    SubListType.tp_base = &PyList_Type;\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The primary difference for derived type objects is that the base type\u2019s object structure ",(0,s.jsx)(t.strong,{children:"must be the first"})," value. The base type will already include the ",(0,s.jsx)(t.code,{children:"PyObject_HEAD()"})," at the beginning of its structure."]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var s=n(96540);const i={},r=s.createContext(i);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);