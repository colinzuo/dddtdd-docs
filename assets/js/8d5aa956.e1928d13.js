"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[2050],{18930:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>o});var i=s(74848),t=s(28453);const r={},l=void 0,c={id:"programming-languages/python/pep/2014-0483-The-Theory-of-Type-Hints",title:"2014-0483-The-Theory-of-Type-Hints",description:"This PEP lays out the theory referenced by PEP 484",source:"@site/docs/00400-programming-languages/python/pep/2014-0483-The-Theory-of-Type-Hints.md",sourceDirName:"00400-programming-languages/python/pep",slug:"/programming-languages/python/pep/2014-0483-The-Theory-of-Type-Hints",permalink:"/dddtdd-docs/programming-languages/python/pep/2014-0483-The-Theory-of-Type-Hints",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1726186426e3,frontMatter:{},sidebar:"docSidebar",previous:{title:"2013-0451-ModuleSpec-Type",permalink:"/dddtdd-docs/programming-languages/python/pep/2013-0451-ModuleSpec-Type"},next:{title:"2014-0484-Type-Hints",permalink:"/dddtdd-docs/programming-languages/python/pep/2014-0484-Type-Hints"}},a={},o=[{value:"Introduction",id:"introduction",level:2},{value:"Background",id:"background",level:2},{value:"Subtype relationships",id:"subtype-relationships",level:3},{value:"Summary of gradual typing",id:"summary-of-gradual-typing",level:2},{value:"Fundamental building blocks",id:"fundamental-building-blocks",level:3},{value:"Generic types",id:"generic-types",level:2},{value:"Type variables",id:"type-variables",level:3},{value:"Defining and using generic types",id:"defining-and-using-generic-types",level:3},{value:"Pragmatics",id:"pragmatics",level:2},{value:"Predefined generic types and Protocols in typing.py",id:"predefined-generic-types-and-protocols-in-typingpy",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"This PEP lays out the theory referenced by PEP 484"}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["We start by recalling basic concepts of ",(0,i.jsx)(n.strong,{children:"type theory"}),";"]}),"\n",(0,i.jsxs)(n.li,{children:["then we explain ",(0,i.jsx)(n.strong,{children:"gradual typing"}),";"]}),"\n",(0,i.jsxs)(n.li,{children:["then we state some ",(0,i.jsx)(n.strong,{children:"general rules"})," and define the new ",(0,i.jsx)(n.strong,{children:"special types"})," (such as ",(0,i.jsx)(n.code,{children:"Union"}),") that can be used in annotations;"]}),"\n",(0,i.jsxs)(n.li,{children:["and finally we define the approach to ",(0,i.jsx)(n.strong,{children:"generic types and pragmatic aspects"})," of type hinting."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"background",children:"Background"}),"\n",(0,i.jsxs)(n.p,{children:["Here we assume that type is a ",(0,i.jsx)(n.strong,{children:"set of values"})," and a ",(0,i.jsx)(n.strong,{children:"set of functions"})," that one can apply to these values"]}),"\n",(0,i.jsx)(n.p,{children:"There are several ways to define a particular type:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["By explicitly ",(0,i.jsx)(n.strong,{children:"listing all values"}),". E.g., True and False form the type bool."]}),"\n",(0,i.jsxs)(n.li,{children:["By ",(0,i.jsx)(n.strong,{children:"specifying functions"})," which can be used with variables of a type. E.g. all objects that have a ",(0,i.jsx)(n.code,{children:"__len__"})," method form the type ",(0,i.jsx)(n.code,{children:"Sized"})]}),"\n",(0,i.jsxs)(n.li,{children:["By a simple ",(0,i.jsx)(n.strong,{children:"class definition"}),", then all instances of this class also form a type."]}),"\n",(0,i.jsxs)(n.li,{children:["There are also more complex types. E.g., one can define the type ",(0,i.jsx)(n.code,{children:"FancyList"})," as all lists containing only instances of int, str or their subclasses"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"subtype-relationships",children:"Subtype relationships"}),"\n",(0,i.jsxs)(n.p,{children:["If first_var has type first_type, and second_var has type second_type, is it safe to assign ",(0,i.jsx)(n.code,{children:"first_var = second_var"}),"?"]}),"\n",(0,i.jsx)(n.p,{children:"A strong criterion for when it should be safe is:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"every value from second_type is also in the set of values of first_type; and"}),"\n",(0,i.jsx)(n.li,{children:"every function from first_type is also in the set of functions of second_type."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The relation defined thus is called a subtype relation"}),"\n",(0,i.jsxs)(n.p,{children:["There are ",(0,i.jsx)(n.strong,{children:"two"})," widespread approaches to declare subtype information to type checker"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"In nominal subtyping, the type tree is based on the class tree"}),"\n",(0,i.jsx)(n.li,{children:"In structural subtyping the subtype relation is deduced from the declared methods"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["We strive to provide ",(0,i.jsx)(n.strong,{children:"support for both"})," approaches, so that structural information can be used in addition to nominal subtyping"]}),"\n",(0,i.jsx)(n.h2,{id:"summary-of-gradual-typing",children:"Summary of gradual typing"}),"\n",(0,i.jsxs)(n.p,{children:["We define a new relationship, ",(0,i.jsx)(n.strong,{children:"is-consistent-with"}),", which is similar to ",(0,i.jsx)(n.strong,{children:"is-subtype-of"})]}),"\n",(0,i.jsx)(n.p,{children:"The is-consistent-with relationship is defined by three rules:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A type t1 is consistent with a type t2 if t1 is a ",(0,i.jsx)(n.strong,{children:"subtype"})," of t2. (But not the other way around.)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Any"})," is consistent with every type. (But Any is not a subtype of every type.)"]}),"\n",(0,i.jsxs)(n.li,{children:["Every type is consistent with ",(0,i.jsx)(n.code,{children:"Any"}),". (But every type is not a subtype of Any.)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"fundamental-building-blocks",children:"Fundamental building blocks"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"Any"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"Union[t1, t2, \u2026]"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"Optional[t1]"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Tuple[t1, t2, \u2026, tn]"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["To spell the type of the empty tuple, use ",(0,i.jsx)(n.code,{children:"Tuple[()]"})]}),"\n",(0,i.jsxs)(n.li,{children:["A variadic homogeneous tuple type can be written ",(0,i.jsx)(n.code,{children:"Tuple[t1, ...]"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Callable[[t1, t2, \u2026, tn], tr]"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["There is no way to indicate optional or keyword arguments, nor varargs, but you can say the argument list is entirely unchecked by writing ",(0,i.jsx)(n.code,{children:"Callable[..., tr]"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"Intersection[t1, t2, \u2026]"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"generic-types",children:"Generic types"}),"\n",(0,i.jsxs)(n.p,{children:["Such semantics is known as ",(0,i.jsx)(n.strong,{children:"generic type constructor"}),", it is similar to semantics of functions, but a function takes a value and returns a value, while generic type constructor takes a type and \u201creturns\u201d a type"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"users = [] # type: List[UserID]\nusers.append(UserID(42)) # OK\nusers.append('Some guy') # Should be rejected by the type checker\n\nexamples = {} # type: Dict[str, Any]\nexamples['first example'] = object() # OK\nexamples[2] = None                   # rejected by the type checker\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To allow type annotations in situations from the first example, ",(0,i.jsx)(n.strong,{children:"built-in containers and container abstract base classes are extended with type parameters"}),", so that they behave as generic type constructors. Classes, that behave as generic type constructors are called ",(0,i.jsx)(n.strong,{children:"generic types"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"from typing import Iterable\n\nclass Task:\n    ...\n\ndef work(todo_list: Iterable[Task]) -> None:\n    ...\n"})}),"\n",(0,i.jsx)(n.h3,{id:"type-variables",children:"Type variables"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Y = TypeVar('Y', t1, t2, ...)"}),". Ditto, constrained to t1, etc. Behaves similar to ",(0,i.jsx)(n.code,{children:"Union[t1, t2, ...]"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"AnyStr = TypeVar('AnyStr', str, bytes)\n\ndef longest(first: AnyStr, second: AnyStr) -> AnyStr:\n    return first if len(first) >= len(second) else second\n"})}),"\n",(0,i.jsx)(n.h3,{id:"defining-and-using-generic-types",children:"Defining and using generic types"}),"\n",(0,i.jsxs)(n.p,{children:["Users can declare their classes as generic types using the special building block ",(0,i.jsx)(n.code,{children:"Generic"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class CustomQueue(Generic[T]):\n\n    def put(self, task: T) -> None:\n        ...\n    def get(self) -> T:\n        ...\n\ndef communicate(queue: CustomQueue[str]) -> Optional[str]:\n    ...\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If a generic type appears in a type annotation with a type variable omitted, it is assumed to be ",(0,i.jsx)(n.code,{children:"Any"}),". Such form could be used as a fallback to dynamic typing and is allowed for use with issubclass and isinstance. All type information in instances is ",(0,i.jsx)(n.strong,{children:"erased at runtime"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"pragmatics",children:"Pragmatics"}),"\n",(0,i.jsx)(n.p,{children:"Some things are irrelevant to the theory but make practical use more convenient"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Where a type is expected, ",(0,i.jsx)(n.code,{children:"None"})," can be substituted for ",(0,i.jsx)(n.code,{children:"type(None)"}),"; e.g. ",(0,i.jsx)(n.code,{children:"Union[t1, None] == Union[t1, type(None)]"})]}),"\n",(0,i.jsx)(n.li,{children:"Type aliases"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"Point = Tuple[float, float]\ndef distance(point: Point) -> float: ...\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Forward references via strings"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"class MyComparable:\n    def compare(self, other: 'MyComparable') -> int: ...\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Casts using ",(0,i.jsx)(n.code,{children:"cast(T, obj)"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"zork = cast(Any, frobozz())\n"})}),"\n",(0,i.jsx)(n.h3,{id:"predefined-generic-types-and-protocols-in-typingpy",children:"Predefined generic types and Protocols in typing.py"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Everything from ",(0,i.jsx)(n.code,{children:"collections.abc"})," (but ",(0,i.jsx)(n.code,{children:"Set"})," renamed to ",(0,i.jsx)(n.code,{children:"AbstractSet"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Dict"}),", ",(0,i.jsx)(n.code,{children:"List"}),", ",(0,i.jsx)(n.code,{children:"Set"}),", ",(0,i.jsx)(n.code,{children:"FrozenSet"}),", a few more."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"re.Pattern[AnyStr]"}),", ",(0,i.jsx)(n.code,{children:"re.Match[AnyStr]"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"io.IO[AnyStr]"}),", ",(0,i.jsx)(n.code,{children:"io.TextIO"})," ~ ",(0,i.jsx)(n.code,{children:"io.IO[str]"}),", ",(0,i.jsx)(n.code,{children:"io.BinaryIO"})," ~ ",(0,i.jsx)(n.code,{children:"io.IO[bytes]"}),"."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>c});var i=s(96540);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);