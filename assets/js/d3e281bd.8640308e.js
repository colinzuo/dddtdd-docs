"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[9609],{69030:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=t(74848),s=t(28453);const r={},i=void 0,o={id:"programming-languages/python/pep/2015-0492-Coroutines-with-async-and-await-syntax",title:"2015-0492-Coroutines-with-async-and-await-syntax",description:"PEP 492 \u2013 Coroutines with async and await syntax",source:"@site/docs/00400-programming-languages/python/pep/2015-0492-Coroutines-with-async-and-await-syntax.md",sourceDirName:"00400-programming-languages/python/pep",slug:"/programming-languages/python/pep/2015-0492-Coroutines-with-async-and-await-syntax",permalink:"/dddtdd-docs/programming-languages/python/pep/2015-0492-Coroutines-with-async-and-await-syntax",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1726186426e3,frontMatter:{},sidebar:"docSidebar",previous:{title:"2014-0484-Type-Hints",permalink:"/dddtdd-docs/programming-languages/python/pep/2014-0484-Type-Hints"},next:{title:"2016-0518-Specifying-Minimum-Build-System-Requirements-for-Python-Projects",permalink:"/dddtdd-docs/programming-languages/python/pep/2016-0518-Specifying-Minimum-Build-System-Requirements-for-Python-Projects"}},c={},d=[{value:"Abstract",id:"abstract",level:2},{value:"Specification",id:"specification",level:2},{value:"New Coroutine Declaration Syntax",id:"new-coroutine-declaration-syntax",level:3},{value:"Await Expression",id:"await-expression",level:3},{value:"Asynchronous Context Managers and \u201casync with\u201d",id:"asynchronous-context-managers-and-async-with",level:3},{value:"Asynchronous Iterators and \u201casync for\u201d",id:"asynchronous-iterators-and-async-for",level:3},{value:"Glossary",id:"glossary",level:2}];function l(n){const e={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.p,{children:(0,a.jsx)(e.a,{href:"https://peps.python.org/pep-0492/",children:"PEP 492 \u2013 Coroutines with async and await syntax"})}),"\n",(0,a.jsx)(e.h2,{id:"abstract",children:"Abstract"}),"\n",(0,a.jsxs)(e.p,{children:["This PEP assumes that the asynchronous tasks are scheduled and coordinated by an ",(0,a.jsx)(e.strong,{children:"Event Loop"})," similar to that of stdlib module ",(0,a.jsx)(e.code,{children:"asyncio.events.AbstractEventLoop"}),". While the PEP is not tied to any specific Event Loop implementation, it is relevant only to the kind of coroutine that uses ",(0,a.jsx)(e.code,{children:"yield"})," as a signal to the scheduler, indicating that the coroutine will be waiting until an event (such as IO) is completed"]}),"\n",(0,a.jsx)(e.h2,{id:"specification",children:"Specification"}),"\n",(0,a.jsx)(e.h3,{id:"new-coroutine-declaration-syntax",children:"New Coroutine Declaration Syntax"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-py",children:"async def read_data(db):\r\n    pass\n"})}),"\n",(0,a.jsx)(e.h3,{id:"await-expression",children:"Await Expression"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-py",children:"async def read_data(db):\r\n    data = await db.fetch('SELECT ...')\r\n    ...\n"})}),"\n",(0,a.jsx)(e.h3,{id:"asynchronous-context-managers-and-async-with",children:"Asynchronous Context Managers and \u201casync with\u201d"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-py",children:"class AsyncContextManager:\r\n    async def __aenter__(self):\r\n        await log('entering context')\r\n\r\n    async def __aexit__(self, exc_type, exc, tb):\r\n        await log('exiting context')\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-py",children:"async with EXPR as VAR:\r\n    BLOCK\n"})}),"\n",(0,a.jsx)(e.h3,{id:"asynchronous-iterators-and-async-for",children:"Asynchronous Iterators and \u201casync for\u201d"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-py",children:"class AsyncIterable:\r\n    def __aiter__(self):\r\n        return self\r\n\r\n    async def __anext__(self):\r\n        data = await self.fetch_data()\r\n        if data:\r\n            return data\r\n        else:\r\n            raise StopAsyncIteration\r\n\r\n    async def fetch_data(self):\r\n        ...\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-py",children:"async for TARGET in ITER:\r\n    BLOCK\r\nelse:\r\n    BLOCK2\n"})}),"\n",(0,a.jsx)(e.h2,{id:"glossary",children:"Glossary"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Native coroutine function"}),"\n",(0,a.jsx)(e.li,{children:"Native coroutine"}),"\n",(0,a.jsx)(e.li,{children:"Generator-based coroutine function"}),"\n",(0,a.jsx)(e.li,{children:"Generator-based coroutine"}),"\n",(0,a.jsx)(e.li,{children:"Coroutine"}),"\n",(0,a.jsx)(e.li,{children:"Coroutine object"}),"\n",(0,a.jsx)(e.li,{children:"Future-like object"}),"\n",(0,a.jsx)(e.li,{children:"Awaitable"}),"\n",(0,a.jsx)(e.li,{children:"Asynchronous context manager"}),"\n",(0,a.jsx)(e.li,{children:"Asynchronous iterable"}),"\n",(0,a.jsx)(e.li,{children:"Asynchronous iterator"}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(l,{...n})}):l(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>o});var a=t(96540);const s={},r=a.createContext(s);function i(n){const e=a.useContext(r);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:i(n.components),a.createElement(r.Provider,{value:e},n.children)}}}]);