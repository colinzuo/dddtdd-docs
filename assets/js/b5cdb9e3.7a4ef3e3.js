"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[5846],{98335:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>t,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>o});var a=r(74848),d=r(28453);const s={},i="Intro to data structures",l={id:"programming-languages/python/libs/pandas/user_guide/dsintro",title:"Intro to data structures",description:"Series",source:"@site/docs/00400-programming-languages/python/libs/pandas/user_guide/0200-dsintro.md",sourceDirName:"00400-programming-languages/python/libs/pandas/user_guide",slug:"/programming-languages/python/libs/pandas/user_guide/dsintro",permalink:"/dddtdd-docs/programming-languages/python/libs/pandas/user_guide/dsintro",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1733377229e3,sidebarPosition:200,frontMatter:{},sidebar:"docSidebar",previous:{title:"enum",permalink:"/dddtdd-docs/programming-languages/python/how-to/enum"},next:{title:"Essential basic functionality",permalink:"/dddtdd-docs/programming-languages/python/libs/pandas/user_guide/basics"}},t={},o=[{value:"Series",id:"series",level:2},{value:"From ndarray",id:"from-ndarray",level:3},{value:"From dict",id:"from-dict",level:3},{value:"From scalar value",id:"from-scalar-value",level:3},{value:"Series is ndarray-like",id:"series-is-ndarray-like",level:3},{value:"Series is dict-like",id:"series-is-dict-like",level:3},{value:"Vectorized operations and label alignment with Series",id:"vectorized-operations-and-label-alignment-with-series",level:3},{value:"Name attribute",id:"name-attribute",level:3},{value:"DataFrame",id:"dataframe",level:2},{value:"From dict of Series or dicts",id:"from-dict-of-series-or-dicts",level:3},{value:"From dict of ndarrays / lists",id:"from-dict-of-ndarrays--lists",level:3},{value:"From structured or record array",id:"from-structured-or-record-array",level:3},{value:"From a list of dicts",id:"from-a-list-of-dicts",level:3},{value:"From a Series",id:"from-a-series",level:3},{value:"DataFrame.from_dict",id:"dataframefrom_dict",level:3},{value:"DataFrame.from_records",id:"dataframefrom_records",level:3},{value:"Column selection, addition, deletion",id:"column-selection-addition-deletion",level:3},{value:"Indexing / selection",id:"indexing--selection",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,d.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"intro-to-data-structures",children:"Intro to data structures"}),"\n",(0,a.jsx)(n.h2,{id:"series",children:"Series"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:"s = pd.Series(data, index=index)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"from-ndarray",children:"From ndarray"}),"\n",(0,a.jsxs)(n.p,{children:["If data is an ",(0,a.jsx)(n.code,{children:"ndarray"}),", index must be the ",(0,a.jsx)(n.strong,{children:"same length"})," as data. If no index is passed, one will be created having values ",(0,a.jsx)(n.code,{children:"[0, ..., len(data) - 1]"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:'s = pd.Series(np.random.randn(5), index=["a", "b", "c", "d", "e"])\r\n\r\npd.Series(np.random.randn(5))\n'})}),"\n",(0,a.jsx)(n.h3,{id:"from-dict",children:"From dict"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:'d = {"b": 1, "a": 0, "c": 2}\r\n\r\npd.Series(d)\r\n\r\npd.Series(d, index=["b", "c", "d", "a"])\n'})}),"\n",(0,a.jsx)(n.h3,{id:"from-scalar-value",children:"From scalar value"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:'pd.Series(5.0, index=["a", "b", "c", "d", "e"])\n'})}),"\n",(0,a.jsx)(n.h3,{id:"series-is-ndarray-like",children:"Series is ndarray-like"}),"\n",(0,a.jsxs)(n.p,{children:["Series acts very similarly to a ndarray and is a ",(0,a.jsx)(n.strong,{children:"valid argument to most NumPy functions"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:"s.iloc[0]\r\n\r\ns.iloc[:3]\r\n\r\ns[s > s.median()]\r\n\r\ns.iloc[[4, 3, 1]]\r\n\r\nnp.exp(s)\r\n\r\ns.to_numpy()\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:"s.dtype\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This is often a NumPy dtype. However, pandas and 3rd-party libraries extend NumPy\u2019s type system in a few places, in which case the dtype would be an ",(0,a.jsx)(n.code,{children:"ExtensionDtype"}),". Some examples within pandas are ",(0,a.jsx)(n.code,{children:"Categorical data"})," and ",(0,a.jsx)(n.code,{children:"Nullable integer data type"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:"s.array\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Series.array"})," will always be an ",(0,a.jsx)(n.code,{children:"ExtensionArray"}),". Briefly, an ",(0,a.jsx)(n.code,{children:"ExtensionArray"})," is a thin wrapper around one or more concrete arrays like a ",(0,a.jsx)(n.code,{children:"numpy.ndarray"})]}),"\n",(0,a.jsx)(n.h3,{id:"series-is-dict-like",children:"Series is dict-like"}),"\n",(0,a.jsxs)(n.p,{children:["A Series is also like a ",(0,a.jsx)(n.strong,{children:"fixed-size dict"})," in that you can get and set values by ",(0,a.jsx)(n.strong,{children:"index label"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:'s["a"]\r\n\r\ns["e"] = 12.0\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Using the ",(0,a.jsx)(n.code,{children:"Series.get()"})," method, a missing label will return ",(0,a.jsx)(n.code,{children:"None"})," or specified default:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:'s.get("f")\r\n\r\ns.get("f", np.nan)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"vectorized-operations-and-label-alignment-with-series",children:"Vectorized operations and label alignment with Series"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:"s + s\r\n\r\ns * 2\r\n\r\nnp.exp(s)\n"})}),"\n",(0,a.jsxs)(n.p,{children:["A key difference between ",(0,a.jsx)(n.code,{children:"Series"})," and ",(0,a.jsx)(n.code,{children:"ndarray"})," is that operations between ",(0,a.jsx)(n.code,{children:"Series"})," automatically ",(0,a.jsx)(n.strong,{children:"align the data based on label"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:"s.iloc[1:] + s.iloc[:-1]\n"})}),"\n",(0,a.jsx)(n.h3,{id:"name-attribute",children:"Name attribute"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:'s = pd.Series(np.random.randn(5), name="something")\r\n\r\ns2 = s.rename("different")\n'})}),"\n",(0,a.jsx)(n.h2,{id:"dataframe",children:"DataFrame"}),"\n",(0,a.jsx)(n.h3,{id:"from-dict-of-series-or-dicts",children:"From dict of Series or dicts"}),"\n",(0,a.jsxs)(n.p,{children:["The resulting ",(0,a.jsx)(n.strong,{children:"index"})," will be the ",(0,a.jsx)(n.strong,{children:"union"})," of the indexes of the various ",(0,a.jsx)(n.code,{children:"Series"}),". If there are any nested dicts, these will first be converted to ",(0,a.jsx)(n.code,{children:"Series"}),". If no columns are passed, the columns will be the ordered list of dict keys"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:'d = {\r\n    "one": pd.Series([1.0, 2.0, 3.0], index=["a", "b", "c"]),\r\n    "two": pd.Series([1.0, 2.0, 3.0, 4.0], index=["a", "b", "c", "d"]),\r\n}\r\n\r\ndf = pd.DataFrame(d)\r\n\r\npd.DataFrame(d, index=["d", "b", "a"])\r\n\r\npd.DataFrame(d, index=["d", "b", "a"], columns=["two", "three"])\r\n\r\ndf.index\r\n\r\ndf.columns\n'})}),"\n",(0,a.jsx)(n.h3,{id:"from-dict-of-ndarrays--lists",children:"From dict of ndarrays / lists"}),"\n",(0,a.jsxs)(n.p,{children:["All ndarrays must share the ",(0,a.jsx)(n.strong,{children:"same length"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:'d = {"one": [1.0, 2.0, 3.0, 4.0], "two": [4.0, 3.0, 2.0, 1.0]}\r\n\r\npd.DataFrame(d)\r\n\r\npd.DataFrame(d, index=["a", "b", "c", "d"])\n'})}),"\n",(0,a.jsx)(n.h3,{id:"from-structured-or-record-array",children:"From structured or record array"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:'data = np.zeros((2,), dtype=[("A", "i4"), ("B", "f4"), ("C", "a10")])\r\n\r\ndata[:] = [(1, 2.0, "Hello"), (2, 3.0, "World")]\r\n\r\npd.DataFrame(data)\r\n\r\npd.DataFrame(data, index=["first", "second"])\r\n\r\npd.DataFrame(data, columns=["C", "A", "B"])\n'})}),"\n",(0,a.jsx)(n.h3,{id:"from-a-list-of-dicts",children:"From a list of dicts"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:'data2 = [{"a": 1, "b": 2}, {"a": 5, "b": 10, "c": 20}]\r\n\r\npd.DataFrame(data2)\r\n\r\npd.DataFrame(data2, index=["first", "second"])\r\n\r\npd.DataFrame(data2, columns=["a", "b"])\n'})}),"\n",(0,a.jsx)(n.h3,{id:"from-a-series",children:"From a Series"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:'ser = pd.Series(range(3), index=list("abc"), name="ser")\r\n\r\npd.DataFrame(ser)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"dataframefrom_dict",children:"DataFrame.from_dict"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:'In [68]: pd.DataFrame.from_dict(dict([("A", [1, 2, 3]), ("B", [4, 5, 6])]))\r\nOut[68]: \r\n   A  B\r\n0  1  4\r\n1  2  5\r\n2  3  6\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:'In [69]: pd.DataFrame.from_dict(\r\n   ....:     dict([("A", [1, 2, 3]), ("B", [4, 5, 6])]),\r\n   ....:     orient="index",\r\n   ....:     columns=["one", "two", "three"],\r\n   ....: )\r\n   ....: \r\nOut[69]: \r\n   one  two  three\r\nA    1    2      3\r\nB    4    5      6\n'})}),"\n",(0,a.jsx)(n.h3,{id:"dataframefrom_records",children:"DataFrame.from_records"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:"In [70]: data\r\nOut[70]: \r\narray([(1, 2., b'Hello'), (2, 3., b'World')],\r\n      dtype=[('A', '<i4'), ('B', '<f4'), ('C', 'S10')])\r\n\r\nIn [71]: pd.DataFrame.from_records(data, index=\"C\")\r\nOut[71]: \r\n          A    B\r\nC               \r\nb'Hello'  1  2.0\r\nb'World'  2  3.0\n"})}),"\n",(0,a.jsx)(n.h3,{id:"column-selection-addition-deletion",children:"Column selection, addition, deletion"}),"\n",(0,a.jsxs)(n.p,{children:["Getting, setting, and deleting columns works with the ",(0,a.jsx)(n.strong,{children:"same syntax as the analogous dict"})," operations:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:'df["one"]\r\n\r\ndf["three"] = df["one"] * df["two"]\r\n\r\ndf["flag"] = df["one"] > 2\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:'del df["two"]\r\n\r\nthree = df.pop("three")\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:'df.insert(1, "bar", df["one"])\n'})}),"\n",(0,a.jsx)(n.h3,{id:"indexing--selection",children:"Indexing / selection"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:"df[col]\r\n\r\ndf.loc[label]\r\n\r\ndf.iloc[loc]\r\n\r\ndf[5:10]\r\n\r\ndf[bool_vec]\n"})})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>l});var a=r(96540);const d={},s=a.createContext(d);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);