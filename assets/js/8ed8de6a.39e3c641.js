"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[7584],{82902:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>o});var r=n(74848),i=n(28453);const a={},c=void 0,s={id:"topic/grpc/grpc-go-pkg",title:"grpc-go-pkg",description:"https://pkg.go.dev/google.golang.org/grpc",source:"@site/docs/00800-topic/grpc/130-grpc-go-pkg.md",sourceDirName:"00800-topic/grpc",slug:"/topic/grpc/grpc-go-pkg",permalink:"/dddtdd-docs/topic/grpc/grpc-go-pkg",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1720187019e3,sidebarPosition:130,frontMatter:{},sidebar:"docSidebar",previous:{title:"grpc-go",permalink:"/dddtdd-docs/topic/grpc/grpc-go"},next:{title:"README",permalink:"/dddtdd-docs/topic/llm/auto-gpt/"}},l={},o=[{value:"func SendHeader",id:"func-sendheader",level:2},{value:"func SetHeader",id:"func-setheader",level:2},{value:"type CallOption",id:"type-calloption",level:2},{value:"func Header",id:"func-header",level:2},{value:"func Peer",id:"func-peer",level:2},{value:"func DialContext",id:"func-dialcontext",level:2},{value:"type ClientConn",id:"type-clientconn",level:2},{value:"type ClientConnInterface",id:"type-clientconninterface",level:2},{value:"type ClientStream",id:"type-clientstream",level:2},{value:"type DialOption",id:"type-dialoption",level:2},{value:"func WithAuthority",id:"func-withauthority",level:2},{value:"func WithBlock",id:"func-withblock",level:2},{value:"func WithChainStreamInterceptor",id:"func-withchainstreaminterceptor",level:2},{value:"func WithChainUnaryInterceptor",id:"func-withchainunaryinterceptor",level:2},{value:"func WithConnectParams",id:"func-withconnectparams",level:2},{value:"func WithContextDialer",id:"func-withcontextdialer",level:2},{value:"func WithDefaultCallOptions",id:"func-withdefaultcalloptions",level:2},{value:"func WithKeepaliveParams",id:"func-withkeepaliveparams",level:2},{value:"func WithStreamInterceptor",id:"func-withstreaminterceptor",level:2},{value:"func WithUnaryInterceptor",id:"func-withunaryinterceptor",level:2},{value:"func WithUserAgent",id:"func-withuseragent",level:2},{value:"type Server",id:"type-server",level:2},{value:"type ServerOption",id:"type-serveroption",level:2},{value:"func ChainStreamInterceptor",id:"func-chainstreaminterceptor",level:2},{value:"func ChainUnaryInterceptor",id:"func-chainunaryinterceptor",level:2},{value:"func KeepaliveParams",id:"func-keepaliveparams",level:2},{value:"func StreamInterceptor",id:"func-streaminterceptor",level:2},{value:"func UnaryInterceptor",id:"func-unaryinterceptor",level:2},{value:"type ServerStream",id:"type-serverstream",level:2},{value:"type ServiceInfo",id:"type-serviceinfo",level:2}];function d(e){const t={a:"a",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://pkg.go.dev/google.golang.org/grpc",children:"https://pkg.go.dev/google.golang.org/grpc"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:'import "google.golang.org/grpc"\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"go get google.golang.org/grpc\n"})}),"\n",(0,r.jsx)(t.h2,{id:"func-sendheader",children:"func SendHeader"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"func SendHeader(ctx context.Context, md metadata.MD) error"})}),"\n",(0,r.jsxs)(t.p,{children:["It may be called at most once, and may not be called after any event that causes headers to be sent (see SetHeader for a complete list). The provided md and headers set by ",(0,r.jsx)(t.code,{children:"SetHeader()"})," will be sent"]}),"\n",(0,r.jsx)(t.h2,{id:"func-setheader",children:"func SetHeader"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"func SetHeader(ctx context.Context, md metadata.MD) error"})}),"\n",(0,r.jsx)(t.p,{children:"When called multiple times, all the provided metadata will be merged"}),"\n",(0,r.jsx)(t.h2,{id:"type-calloption",children:"type CallOption"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"type CallOption interface"})}),"\n",(0,r.jsx)(t.h2,{id:"func-header",children:"func Header"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"func Header(md *metadata.MD) CallOption"})}),"\n",(0,r.jsxs)(t.p,{children:["Header returns a CallOptions that ",(0,r.jsx)(t.strong,{children:"retrieves the header metadata"})," for a unary RPC"]}),"\n",(0,r.jsx)(t.h2,{id:"func-peer",children:"func Peer"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"func Peer(p *peer.Peer) CallOption"})}),"\n",(0,r.jsxs)(t.p,{children:["Peer returns a CallOption that ",(0,r.jsx)(t.strong,{children:"retrieves peer information"})," for a unary RPC. The peer field will be populated ",(0,r.jsx)(t.em,{children:"after"})," the RPC completes"]}),"\n",(0,r.jsx)(t.h2,{id:"func-dialcontext",children:"func DialContext"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"func DialContext(ctx context.Context, target string, opts ...DialOption) (conn *ClientConn, err error)"})}),"\n",(0,r.jsxs)(t.p,{children:["To make it a blocking dial, use ",(0,r.jsx)(t.code,{children:"WithBlock()"})," dial option"]}),"\n",(0,r.jsx)(t.p,{children:"In the non-blocking case, the ctx does not act against the connection. It only controls the setup steps."}),"\n",(0,r.jsx)(t.p,{children:"In the blocking case, ctx can be used to cancel or expire the pending connection. Once this function returns, the cancellation and expiration of ctx will be noop. Users should call ClientConn.Close to terminate all the pending operations after this function returns"}),"\n",(0,r.jsx)(t.h2,{id:"type-clientconn",children:"type ClientConn"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"type ClientConn struct {"})}),"\n",(0,r.jsx)(t.p,{children:"ClientConn represents a virtual connection to a conceptual endpoint, to perform RPCs."}),"\n",(0,r.jsx)(t.p,{children:"A ClientConn is free to have zero or more actual connections to the endpoint based on configuration, load, etc. It is also free to determine which actual endpoints to use and may change it every RPC, permitting client-side load balancing"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"func (cc *ClientConn) Close() error"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"func (cc *ClientConn) Connect()"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"func (cc *ClientConn) Invoke(ctx context.Context, method string, args, reply any, opts ...CallOption) error"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"func (cc *ClientConn) NewStream(ctx context.Context, desc *StreamDesc, method string, opts ...CallOption) (ClientStream, error)"})}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"type-clientconninterface",children:"type ClientConnInterface"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:"type ClientConnInterface interface {\n\t// Invoke performs a unary RPC and returns after the response is received\n\t// into reply.\n\tInvoke(ctx context.Context, method string, args any, reply any, opts ...CallOption) error\n\t// NewStream begins a streaming RPC.\n\tNewStream(ctx context.Context, desc *StreamDesc, method string, opts ...CallOption) (ClientStream, error)\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"type-clientstream",children:"type ClientStream"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:"type ClientStream interface {\n\t// Header returns the header metadata received from the server if there\n\t// is any. It blocks if the metadata is not ready to read.  If the metadata\n\t// is nil and the error is also nil, then the stream was terminated without\n\t// headers, and the status can be discovered by calling RecvMsg.\n\tHeader() (metadata.MD, error)\n\t// Trailer returns the trailer metadata from the server, if there is any.\n\t// It must only be called after stream.CloseAndRecv has returned, or\n\t// stream.Recv has returned a non-nil error (including io.EOF).\n\tTrailer() metadata.MD\n\t// CloseSend closes the send direction of the stream. It closes the stream\n\t// when non-nil error is met. It is also not safe to call CloseSend\n\t// concurrently with SendMsg.\n\tCloseSend() error\n\t// Context returns the context for this stream.\n\t//\n\t// It should not be called until after Header or RecvMsg has returned. Once\n\t// called, subsequent client-side retries are disabled.\n\tContext() context.Context\n\t// SendMsg is generally called by generated code. On error, SendMsg aborts\n\t// the stream. If the error was generated by the client, the status is\n\t// returned directly; otherwise, io.EOF is returned and the status of\n\t// the stream may be discovered using RecvMsg.\n\t//\n\t// SendMsg blocks until:\n\t//   - There is sufficient flow control to schedule m with the transport, or\n\t//   - The stream is done, or\n\t//   - The stream breaks.\n\t//\n\t// SendMsg does not wait until the message is received by the server. An\n\t// untimely stream closure may result in lost messages. To ensure delivery,\n\t// users should ensure the RPC completed successfully using RecvMsg.\n\t//\n\t// It is safe to have a goroutine calling SendMsg and another goroutine\n\t// calling RecvMsg on the same stream at the same time, but it is not safe\n\t// to call SendMsg on the same stream in different goroutines. It is also\n\t// not safe to call CloseSend concurrently with SendMsg.\n\t//\n\t// It is not safe to modify the message after calling SendMsg. Tracing\n\t// libraries and stats handlers may use the message lazily.\n\tSendMsg(m any) error\n\t// RecvMsg blocks until it receives a message into m or the stream is\n\t// done. It returns io.EOF when the stream completes successfully. On\n\t// any other error, the stream is aborted and the error contains the RPC\n\t// status.\n\t//\n\t// It is safe to have a goroutine calling SendMsg and another goroutine\n\t// calling RecvMsg on the same stream at the same time, but it is not\n\t// safe to call RecvMsg on the same stream in different goroutines.\n\tRecvMsg(m any) error\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"type-dialoption",children:"type DialOption"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"type DialOption interface {"})}),"\n",(0,r.jsx)(t.h2,{id:"func-withauthority",children:"func WithAuthority"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"func WithAuthority(a string) DialOption"})}),"\n",(0,r.jsxs)(t.p,{children:["WithAuthority returns a DialOption that specifies the value to be used as the ",(0,r.jsx)(t.code,{children:":authority"})," pseudo-header and as the server name in authentication handshake"]}),"\n",(0,r.jsx)(t.h2,{id:"func-withblock",children:"func WithBlock"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"func WithBlock() DialOption"})}),"\n",(0,r.jsx)(t.p,{children:"WithBlock returns a DialOption which makes callers of Dial block until the underlying connection is up. Without this, Dial returns immediately and connecting the server happens in background"}),"\n",(0,r.jsx)(t.h2,{id:"func-withchainstreaminterceptor",children:"func WithChainStreamInterceptor"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"func WithChainStreamInterceptor(interceptors ...StreamClientInterceptor) DialOption"})}),"\n",(0,r.jsx)(t.p,{children:"The first interceptor will be the outer most, while the last interceptor will be the inner most wrapper around the real call. All interceptors added by this method will be chained, and the interceptor defined by WithStreamInterceptor will always be prepended to the chain"}),"\n",(0,r.jsx)(t.h2,{id:"func-withchainunaryinterceptor",children:"func WithChainUnaryInterceptor"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"func WithChainUnaryInterceptor(interceptors ...UnaryClientInterceptor) DialOption"})}),"\n",(0,r.jsx)(t.h2,{id:"func-withconnectparams",children:"func WithConnectParams"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"func WithConnectParams(p ConnectParams) DialOption"})}),"\n",(0,r.jsx)(t.h2,{id:"func-withcontextdialer",children:"func WithContextDialer"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"func WithContextDialer(f func(context.Context, string) (net.Conn, error)) DialOption"})}),"\n",(0,r.jsx)(t.h2,{id:"func-withdefaultcalloptions",children:"func WithDefaultCallOptions"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"func WithDefaultCallOptions(cos ...CallOption) DialOption"})}),"\n",(0,r.jsx)(t.h2,{id:"func-withkeepaliveparams",children:"func WithKeepaliveParams"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"func WithKeepaliveParams(kp keepalive.ClientParameters) DialOption"})}),"\n",(0,r.jsx)(t.h2,{id:"func-withstreaminterceptor",children:"func WithStreamInterceptor"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"func WithStreamInterceptor(f StreamClientInterceptor) DialOption"})}),"\n",(0,r.jsx)(t.h2,{id:"func-withunaryinterceptor",children:"func WithUnaryInterceptor"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"func WithUnaryInterceptor(f UnaryClientInterceptor) DialOption"})}),"\n",(0,r.jsx)(t.h2,{id:"func-withuseragent",children:"func WithUserAgent"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"func WithUserAgent(s string) DialOption"})}),"\n",(0,r.jsx)(t.h2,{id:"type-server",children:"type Server"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"type Server struct {"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"func NewServer(opt ...ServerOption) *Server"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"func (s *Server) GetServiceInfo() map[string]ServiceInfo"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"func (s *Server) GracefulStop()"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"func (s *Server) RegisterService(sd *ServiceDesc, ss any)"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"func (s *Server) Serve(lis net.Listener) error"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"func (s *Server) Stop()"})}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"type-serveroption",children:"type ServerOption"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"type ServerOption interface"})}),"\n",(0,r.jsx)(t.h2,{id:"func-chainstreaminterceptor",children:"func ChainStreamInterceptor"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"func ChainStreamInterceptor(interceptors ...StreamServerInterceptor) ServerOption"})}),"\n",(0,r.jsx)(t.h2,{id:"func-chainunaryinterceptor",children:"func ChainUnaryInterceptor"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"func ChainUnaryInterceptor(interceptors ...UnaryServerInterceptor) ServerOption"})}),"\n",(0,r.jsx)(t.h2,{id:"func-keepaliveparams",children:"func KeepaliveParams"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"func KeepaliveParams(kp keepalive.ServerParameters) ServerOption"})}),"\n",(0,r.jsx)(t.h2,{id:"func-streaminterceptor",children:"func StreamInterceptor"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"func StreamInterceptor(i StreamServerInterceptor) ServerOption"})}),"\n",(0,r.jsx)(t.h2,{id:"func-unaryinterceptor",children:"func UnaryInterceptor"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"func UnaryInterceptor(i UnaryServerInterceptor) ServerOption"})}),"\n",(0,r.jsx)(t.h2,{id:"type-serverstream",children:"type ServerStream"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:"type ServerStream interface {\n\t// SetHeader sets the header metadata. It may be called multiple times.\n\t// When call multiple times, all the provided metadata will be merged.\n\t// All the metadata will be sent out when one of the following happens:\n\t//  - ServerStream.SendHeader() is called;\n\t//  - The first response is sent out;\n\t//  - An RPC status is sent out (error or success).\n\tSetHeader(metadata.MD) error\n\t// SendHeader sends the header metadata.\n\t// The provided md and headers set by SetHeader() will be sent.\n\t// It fails if called multiple times.\n\tSendHeader(metadata.MD) error\n\t// SetTrailer sets the trailer metadata which will be sent with the RPC status.\n\t// When called more than once, all the provided metadata will be merged.\n\tSetTrailer(metadata.MD)\n\t// Context returns the context for this stream.\n\tContext() context.Context\n\t// SendMsg sends a message. On error, SendMsg aborts the stream and the\n\t// error is returned directly.\n\t//\n\t// SendMsg blocks until:\n\t//   - There is sufficient flow control to schedule m with the transport, or\n\t//   - The stream is done, or\n\t//   - The stream breaks.\n\t//\n\t// SendMsg does not wait until the message is received by the client. An\n\t// untimely stream closure may result in lost messages.\n\t//\n\t// It is safe to have a goroutine calling SendMsg and another goroutine\n\t// calling RecvMsg on the same stream at the same time, but it is not safe\n\t// to call SendMsg on the same stream in different goroutines.\n\t//\n\t// It is not safe to modify the message after calling SendMsg. Tracing\n\t// libraries and stats handlers may use the message lazily.\n\tSendMsg(m any) error\n\t// RecvMsg blocks until it receives a message into m or the stream is\n\t// done. It returns io.EOF when the client has performed a CloseSend. On\n\t// any non-EOF error, the stream is aborted and the error contains the\n\t// RPC status.\n\t//\n\t// It is safe to have a goroutine calling SendMsg and another goroutine\n\t// calling RecvMsg on the same stream at the same time, but it is not\n\t// safe to call RecvMsg on the same stream in different goroutines.\n\tRecvMsg(m any) error\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"type-serviceinfo",children:"type ServiceInfo"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:"type ServiceInfo struct {\n\tMethods []MethodInfo\n\t// Metadata is the metadata specified in ServiceDesc when registering service.\n\tMetadata any\n}\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>s});var r=n(96540);const i={},a=r.createContext(i);function c(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);