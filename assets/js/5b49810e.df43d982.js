"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[6195],{53668:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var t=s(74848),i=s(28453);const r={},a=void 0,l={id:"programming-languages/typescript/handbook",title:"handbook",description:"https://www.typescriptlang.org/docs/handbook/typescript-from-scratch.html",source:"@site/docs/00400-programming-languages/typescript/010-handbook.md",sourceDirName:"00400-programming-languages/typescript",slug:"/programming-languages/typescript/handbook",permalink:"/dddtdd-docs/programming-languages/typescript/handbook",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1720187019e3,sidebarPosition:10,frontMatter:{},sidebar:"docSidebar",previous:{title:"Typescript\u4ecb\u7ecd",permalink:"/dddtdd-docs/programming-languages/typescript/"},next:{title:"handbook-type-manipulation",permalink:"/dddtdd-docs/programming-languages/typescript/handbook-type-manipulation"}},o={},c=[{value:"TypeScript for the New Programmer",id:"typescript-for-the-new-programmer",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Runtime Behavior",id:"runtime-behavior",level:3},{value:"TypeScript for JavaScript Programmers",id:"typescript-for-javascript-programmers",level:2},{value:"Types by Inference",id:"types-by-inference",level:3},{value:"Defining Types",id:"defining-types",level:3},{value:"Composing Types",id:"composing-types",level:3},{value:"Generics",id:"generics",level:3},{value:"Structural Type System",id:"structural-type-system",level:3},{value:"The Basics",id:"the-basics",level:2},{value:"tsc, the TypeScript compiler",id:"tsc-the-typescript-compiler",level:3},{value:"Emitting with Errors",id:"emitting-with-errors",level:3},{value:"Downleveling",id:"downleveling",level:3},{value:"Strictness",id:"strictness",level:3},{value:"Everyday Types",id:"everyday-types",level:2},{value:"Differences Between Type Aliases and Interfaces",id:"differences-between-type-aliases-and-interfaces",level:3},{value:"Type Assertions",id:"type-assertions",level:3},{value:"Literal Types",id:"literal-types",level:3},{value:"null and undefined",id:"null-and-undefined",level:3},{value:"enums",id:"enums",level:3},{value:"Narrowing",id:"narrowing",level:2},{value:"Equality narrowing",id:"equality-narrowing",level:3},{value:"The in operator narrowing",id:"the-in-operator-narrowing",level:3},{value:"instanceof narrowing",id:"instanceof-narrowing",level:3},{value:"Using type predicates",id:"using-type-predicates",level:3},{value:"Discriminated unions",id:"discriminated-unions",level:3},{value:"The never type",id:"the-never-type",level:3},{value:"More on Functions",id:"more-on-functions",level:2},{value:"Call Signatures",id:"call-signatures",level:3},{value:"Construct Signatures",id:"construct-signatures",level:3},{value:"Generic Functions",id:"generic-functions",level:3},{value:"Optional Parameters",id:"optional-parameters",level:3},{value:"Function Overloads",id:"function-overloads",level:3},{value:"Declaring this in a Function",id:"declaring-this-in-a-function",level:3},{value:"Other Types to Know About",id:"other-types-to-know-about",level:3},{value:"Rest Parameters and Arguments",id:"rest-parameters-and-arguments",level:3},{value:"Parameter Destructuring",id:"parameter-destructuring",level:3},{value:"Return type void",id:"return-type-void",level:3},{value:"Object Types",id:"object-types",level:2},{value:"Property Modifiers",id:"property-modifiers",level:3},{value:"Index Signatures",id:"index-signatures",level:3},{value:"Extending Types",id:"extending-types",level:3},{value:"Intersection Types",id:"intersection-types",level:3},{value:"Tuple Types",id:"tuple-types",level:3},{value:"Classes",id:"classes",level:2},{value:"Getters / Setters",id:"getters--setters",level:3},{value:"implements Clauses",id:"implements-clauses",level:3},{value:"extends Clauses",id:"extends-clauses",level:3},{value:"Overriding Methods",id:"overriding-methods",level:3},{value:"Type-only Field Declarations",id:"type-only-field-declarations",level:3},{value:"Initialization Order",id:"initialization-order",level:3},{value:"visibility",id:"visibility",level:3},{value:"Static Members",id:"static-members",level:3},{value:"static Blocks in Classes",id:"static-blocks-in-classes",level:3},{value:"this parameters",id:"this-parameters",level:3},{value:"this based type guards",id:"this-based-type-guards",level:3},{value:"Parameter Properties",id:"parameter-properties",level:3},{value:"Relationships Between Classes",id:"relationships-between-classes",level:3},{value:"Modules",id:"modules",level:2},{value:"How JavaScript Modules are Defined",id:"how-javascript-modules-are-defined",level:3},{value:"ES Module Syntax",id:"es-module-syntax",level:3},{value:"Additional Import Syntax",id:"additional-import-syntax",level:3},{value:"TypeScript Specific ES Module Syntax",id:"typescript-specific-es-module-syntax",level:3},{value:"CommonJS Syntax",id:"commonjs-syntax",level:3},{value:"TypeScript\u2019s Module Resolution Options",id:"typescripts-module-resolution-options",level:3},{value:"TypeScript\u2019s Module Output Options",id:"typescripts-module-output-options",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/typescript-from-scratch.html",children:"https://www.typescriptlang.org/docs/handbook/typescript-from-scratch.html"})}),"\n",(0,t.jsx)(n.h2,{id:"typescript-for-the-new-programmer",children:"TypeScript for the New Programmer"}),"\n",(0,t.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,t.jsx)(n.p,{children:"TypeScript is a language that is a superset of JavaScript: JS syntax is therefore legal TS."}),"\n",(0,t.jsx)(n.h3,{id:"runtime-behavior",children:"Runtime Behavior"}),"\n",(0,t.jsx)(n.p,{children:"TypeScript is also a programming language that preserves the runtime behavior of JavaScript"}),"\n",(0,t.jsx)(n.h2,{id:"typescript-for-javascript-programmers",children:"TypeScript for JavaScript Programmers"}),"\n",(0,t.jsx)(n.h3,{id:"types-by-inference",children:"Types by Inference"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'let helloWorld = "Hello World";\n'})}),"\n",(0,t.jsx)(n.h3,{id:"defining-types",children:"Defining Types"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'interface User {\n  name: string;\n  id: number;\n}\n\nconst user: User = {\n  name: "Hayes",\n  id: 0,\n};\n'})}),"\n",(0,t.jsx)(n.h3,{id:"composing-types",children:"Composing Types"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'type MyBool = true | false;\n\ntype WindowStates = "open" | "closed" | "minimized";\n\nfunction getLength(obj: string | string[]) {\n  return obj.length;\n}\n\nstring\ttypeof s === "string"\nnumber\ttypeof n === "number"\nboolean\ttypeof b === "boolean"\nundefined\ttypeof undefined === "undefined"\nfunction\ttypeof f === "function"\narray\tArray.isArray(a)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"generics",children:"Generics"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"type StringArray = Array<string>;\ntype NumberArray = Array<number>;\ntype ObjectWithNameArray = Array<{ name: string }>;\n\ninterface Backpack<Type> {\n  add: (obj: Type) => void;\n  get: () => Type;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"structural-type-system",children:"Structural Type System"}),"\n",(0,t.jsx)(n.p,{children:"One of TypeScript\u2019s core principles is that type checking focuses on the shape that values have. This is sometimes called \u201cduck typing\u201d or \u201cstructural typing\u201d."}),"\n",(0,t.jsx)(n.h2,{id:"the-basics",children:"The Basics"}),"\n",(0,t.jsxs)(n.p,{children:["JavaScript only truly provides ",(0,t.jsx)(n.strong,{children:"dynamic typing"})," - running the code to see what happens."]}),"\n",(0,t.jsx)(n.h3,{id:"tsc-the-typescript-compiler",children:"tsc, the TypeScript compiler"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install -g typescript\n\ntsc hello.ts\n"})}),"\n",(0,t.jsx)(n.h3,{id:"emitting-with-errors",children:"Emitting with Errors"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"tsc --noEmitOnError hello.ts"})}),"\n",(0,t.jsx)(n.h3,{id:"downleveling",children:"Downleveling"}),"\n",(0,t.jsxs)(n.p,{children:["By default TypeScript targets ",(0,t.jsx)(n.strong,{children:"ES3"}),", an extremely old version of ECMAScript. We could have chosen something a little bit more recent by using the ",(0,t.jsx)(n.strong,{children:"target option"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"tsc --target es2015 hello.ts"})}),"\n",(0,t.jsx)(n.h3,{id:"strictness",children:"Strictness"}),"\n",(0,t.jsxs)(n.p,{children:["TypeScript has ",(0,t.jsx)(n.strong,{children:"several type-checking strictness flags"})," that can be turned on or off"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:'"strict": true'})," in a tsconfig.json toggles them ",(0,t.jsx)(n.strong,{children:"all on simultaneously"}),", but we can opt out of them individually. The two biggest ones you should know about are noImplicitAny and strictNullChecks."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"noImplicitAny: TypeScript doesn\u2019t try to infer types for us and instead falls back to the most lenient type: any"}),"\n",(0,t.jsx)(n.li,{children:"strictNullChecks: By default, values like null and undefined are assignable to any other type"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"everyday-types",children:"Everyday Types"}),"\n",(0,t.jsx)(n.p,{children:"The primitives: string, number, and boolean"}),"\n",(0,t.jsxs)(n.p,{children:["JavaScript does not have a special runtime value for integers, so there\u2019s ",(0,t.jsx)(n.strong,{children:"no equivalent to int or float - everything is simply number"})]}),"\n",(0,t.jsx)(n.p,{children:"Arrays, any, Functions"}),"\n",(0,t.jsx)(n.p,{children:"Apart from primitives, the most common sort of type you\u2019ll encounter is an object type."}),"\n",(0,t.jsxs)(n.p,{children:["Object types can also specify that some or all of their properties are optional. To do this, add a ",(0,t.jsx)(n.strong,{children:"? after the property name"})]}),"\n",(0,t.jsx)(n.p,{children:"Union Types"}),"\n",(0,t.jsxs)(n.p,{children:["A union type is a type formed from two or more other types, representing values that may be ",(0,t.jsx)(n.strong,{children:"any one of those types"})]}),"\n",(0,t.jsx)(n.p,{children:"Type Aliases"}),"\n",(0,t.jsx)(n.p,{children:"A type alias is a name for any type"}),"\n",(0,t.jsxs)(n.p,{children:["Note that aliases are only aliases - you cannot use type aliases to create different/distinct \u201cversions\u201d of the same type. When you use the alias, it\u2019s ",(0,t.jsx)(n.strong,{children:"exactly as if you had written the aliased type."})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"type ID = number | string;\n\ntype UserInputSanitizedString = string;\n"})}),"\n",(0,t.jsx)(n.p,{children:"Interfaces"}),"\n",(0,t.jsxs)(n.p,{children:["Being concerned only with the structure and capabilities of types is why we call TypeScript a ",(0,t.jsx)(n.strong,{children:"structurally typed type system."})]}),"\n",(0,t.jsx)(n.h3,{id:"differences-between-type-aliases-and-interfaces",children:"Differences Between Type Aliases and Interfaces"}),"\n",(0,t.jsxs)(n.p,{children:["the key distinction is that a type cannot be re-opened to add new properties vs ",(0,t.jsx)(n.strong,{children:"an interface which is always extendable"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface Window {\n  title: string\n}\n\ninterface Window {\n  ts: TypeScriptAPI\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"type-assertions",children:"Type Assertions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'const myCanvas = document.getElementById("main_canvas") as HTMLCanvasElement;\n'})}),"\n",(0,t.jsx)(n.p,{children:"Sometimes this rule can be too conservative and will disallow more complex coercions that might be valid. If this happens, you can use two assertions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const a = (expr as any) as T;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"literal-types",children:"Literal Types"}),"\n",(0,t.jsx)(n.p,{children:"by combining literals into unions, you can express a much more useful concept - for example, functions that only accept a certain set of known values"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'function printText(s: string, alignment: "left" | "right" | "center") {\n  // ...\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"The type boolean itself is actually just an alias for the union true | false"}),"\n",(0,t.jsx)(n.p,{children:"You can change the inference by adding a type assertion in either location"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'// Change 1:\nconst req = { url: "https://example.com", method: "GET" as "GET" };\n// Change 2\nhandleRequest(req.url, req.method as "GET");\n'})}),"\n",(0,t.jsx)(n.p,{children:"You can use as const to convert the entire object to be type literals"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const req = { url: "https://example.com", method: "GET" } as const;\nhandleRequest(req.url, req.method);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"null-and-undefined",children:"null and undefined"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"strictNullChecks"})," off/on"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"function liveDangerously(x?: number | null) {\n  // No error\n  console.log(x!.toFixed());\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"enums",children:"enums"}),"\n",(0,t.jsxs)(n.p,{children:["Unlike most TypeScript features, this is ",(0,t.jsx)(n.strong,{children:"not a type-level addition to JavaScript but something added to the language and runtime"})]}),"\n",(0,t.jsx)(n.h2,{id:"narrowing",children:"Narrowing"}),"\n",(0,t.jsx)(n.p,{children:"typeof type guards"}),"\n",(0,t.jsxs)(n.p,{children:["Within our if check, TypeScript sees ",(0,t.jsx)(n.strong,{children:'typeof padding === "number"'})," and understands that as a special form of code called a ",(0,t.jsx)(n.strong,{children:"type guard"})]}),"\n",(0,t.jsxs)(n.p,{children:["It looks at these special checks (called type guards) and assignments, and the process of ",(0,t.jsx)(n.strong,{children:"refining types to more specific types than declared is called narrowing"})]}),"\n",(0,t.jsx)(n.p,{children:'in JavaScript, typeof null is actually "object"'}),"\n",(0,t.jsx)(n.p,{children:"Truthiness narrowing"}),"\n",(0,t.jsxs)(n.p,{children:["In JavaScript, constructs like if first ",(0,t.jsx)(n.strong,{children:"\u201ccoerce\u201d their conditions to booleans"})," to make sense of them"]}),"\n",(0,t.jsx)(n.p,{children:"You can always coerce values to booleans by running them through the Boolean function, or by using the shorter double-Boolean negation"}),"\n",(0,t.jsx)(n.h3,{id:"equality-narrowing",children:"Equality narrowing"}),"\n",(0,t.jsx)(n.p,{children:"checking whether something == null actually not only checks whether it is specifically the value null - it also checks whether it\u2019s potentially undefined"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"function example(x: string | number, y: string | boolean) {\n  if (x === y) {\n"})}),"\n",(0,t.jsx)(n.h3,{id:"the-in-operator-narrowing",children:"The in operator narrowing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'type Fish = { swim: () => void };\ntype Bird = { fly: () => void };\n \nfunction move(animal: Fish | Bird) {\n  if ("swim" in animal) {\n    return animal.swim();\n  }\n \n  return animal.fly();\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"instanceof-narrowing",children:"instanceof narrowing"}),"\n",(0,t.jsx)(n.p,{children:"in JavaScript x instanceof Foo checks whether the prototype chain of x contains Foo.prototype"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"function logValue(x: Date | string) {\n  if (x instanceof Date) {\n    console.log(x.toUTCString());\n"})}),"\n",(0,t.jsx)(n.h3,{id:"using-type-predicates",children:"Using type predicates"}),"\n",(0,t.jsxs)(n.p,{children:["To define a ",(0,t.jsx)(n.strong,{children:"user-defined type guard"}),", we simply need to define a function whose return type is a type predicate"]}),"\n",(0,t.jsxs)(n.p,{children:["A predicate takes the form ",(0,t.jsx)(n.strong,{children:"parameterName is Type"}),", where parameterName must be the name of a parameter from the current function signature"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"function isFish(pet: Fish | Bird): pet is Fish {\n  return (pet as Fish).swim !== undefined;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"discriminated-unions",children:"Discriminated unions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'interface Circle {\n  kind: "circle";\n  radius: number;\n}\n \ninterface Square {\n  kind: "square";\n  sideLength: number;\n}\n \ntype Shape = Circle | Square;\n\nfunction getArea(shape: Shape) {\n  if (shape.kind === "circle") {\n    return Math.PI * shape.radius ** 2;\n'})}),"\n",(0,t.jsx)(n.h3,{id:"the-never-type",children:"The never type"}),"\n",(0,t.jsx)(n.p,{children:"The never type is assignable to every type; however, no type is assignable to never (except never itself)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"function getArea(shape: Shape) {\n  switch (shape.kind) {\n\n    default:\n      const _exhaustiveCheck: never = shape;\n      return _exhaustiveCheck;    \n"})}),"\n",(0,t.jsx)(n.h2,{id:"more-on-functions",children:"More on Functions"}),"\n",(0,t.jsx)(n.h3,{id:"call-signatures",children:"Call Signatures"}),"\n",(0,t.jsx)(n.p,{children:"In JavaScript, functions can have properties in addition to being callable"}),"\n",(0,t.jsx)(n.p,{children:"If we want to describe something callable with properties, we can write a call signature in an object type"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'type DescribableFunction = {\n  description: string;\n  (someArg: number): boolean;\n};\nfunction doSomething(fn: DescribableFunction) {\n  console.log(fn.description + " returned " + fn(6));\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"construct-signatures",children:"Construct Signatures"}),"\n",(0,t.jsxs)(n.p,{children:["You can write a ",(0,t.jsx)(n.strong,{children:"construct signature by adding the new keyword"})," in front of a call signature"]}),"\n",(0,t.jsx)(n.p,{children:"Some objects, like JavaScript\u2019s Date object, can be called with or without new. You can combine call and construct signatures in the same type arbitrarily"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'type SomeConstructor = {\n  new (s: string): SomeObject;\n};\nfunction fn(ctor: SomeConstructor) {\n  return new ctor("hello");\n}\n\ninterface CallOrConstruct {\n  new (s: string): Date;\n  (n?: number): number;\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"generic-functions",children:"Generic Functions"}),"\n",(0,t.jsx)(n.p,{children:"generics are all about relating two or more values with the same type"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"function firstElement<Type>(arr: Type[]): Type | undefined {\n  return arr[0];\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"optional-parameters",children:"Optional Parameters"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"function f(x?: number) {\n"})}),"\n",(0,t.jsx)(n.h3,{id:"function-overloads",children:"Function Overloads"}),"\n",(0,t.jsxs)(n.p,{children:["In TypeScript, we can specify a function that can be called in different ways by writing ",(0,t.jsx)(n.strong,{children:"overload signatures"})]}),"\n",(0,t.jsxs)(n.p,{children:["Functions have an ",(0,t.jsx)(n.strong,{children:"implementation signature"}),", but this signature can\u2019t be called directly"]}),"\n",(0,t.jsx)(n.p,{children:"Always prefer parameters with union types instead of overloads when possible"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"function makeDate(timestamp: number): Date;\nfunction makeDate(m: number, d: number, y: number): Date;\nfunction makeDate(mOrTimestamp: number, d?: number, y?: number): Date {\n  if (d !== undefined && y !== undefined) {\n    return new Date(y, mOrTimestamp, d);\n  } else {\n    return new Date(mOrTimestamp);\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"declaring-this-in-a-function",children:"Declaring this in a Function"}),"\n",(0,t.jsx)(n.p,{children:"The JavaScript specification states that you cannot have a parameter called this, and so TypeScript uses that syntax space to let you declare the type for this in the function body"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"interface DB {\n  filterUsers(filter: (this: User) => boolean): User[];\n}\n \nconst db = getDB();\nconst admins = db.filterUsers(function (this: User) {\n  return this.admin;\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"other-types-to-know-about",children:"Other Types to Know About"}),"\n",(0,t.jsxs)(n.p,{children:["In JavaScript, a function that doesn\u2019t return any value will implicitly return the value undefined. However, ",(0,t.jsx)(n.strong,{children:"void and undefined are not the same thing in TypeScript"})]}),"\n",(0,t.jsx)(n.p,{children:"object is not Object. Always use object!"}),"\n",(0,t.jsx)(n.p,{children:"unknown: The unknown type represents any value. This is similar to the any type, but is safer because it\u2019s not legal to do anything with an unknown value"}),"\n",(0,t.jsx)(n.p,{children:"The never type represents values which are never observed. In a return type, this means that the function throws an exception or terminates execution of the program."}),"\n",(0,t.jsx)(n.p,{children:"never also appears when TypeScript determines there\u2019s nothing left in a union"}),"\n",(0,t.jsx)(n.p,{children:"The global type Function describes properties like bind, call, apply, and others present on all function values in JavaScript."}),"\n",(0,t.jsx)(n.p,{children:"values of type Function can always be called; these calls return any"}),"\n",(0,t.jsx)(n.h3,{id:"rest-parameters-and-arguments",children:"Rest Parameters and Arguments"}),"\n",(0,t.jsx)(n.p,{children:"A rest parameter appears after all other parameters, and uses the ... syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"function multiply(n: number, ...m: number[]) {\n  return m.map((x) => n * x);\n}\n// 'a' gets value [10, 20, 30, 40]\nconst a = multiply(10, 1, 2, 3, 4);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Note that in general, TypeScript does not assume that arrays are immutable"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'// Inferred type is number[] -- "an array with zero or more numbers",\n// not specifically two numbers\nconst args = [8, 5];\nconst angle = Math.atan2(...args);\n'})}),"\n",(0,t.jsx)(n.p,{children:"The best fix for this situation depends a bit on your code, but in general a const context is the most straightforward solution"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// Inferred as 2-length tuple\nconst args = [8, 5] as const;\n// OK\nconst angle = Math.atan2(...args);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"parameter-destructuring",children:"Parameter Destructuring"}),"\n",(0,t.jsx)(n.p,{children:"The type annotation for the object goes after the destructuring syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"function sum({ a, b, c }: { a: number; b: number; c: number }) {\n  console.log(a + b + c);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"return-type-void",children:"Return type void"}),"\n",(0,t.jsxs)(n.p,{children:["a contextual function type with a void return type ",(0,t.jsx)(n.code,{children:"(type vf = () => void)"}),", when implemented, ",(0,t.jsx)(n.strong,{children:"can return any other value, but it will be ignored"})]}),"\n",(0,t.jsx)(n.h2,{id:"object-types",children:"Object Types"}),"\n",(0,t.jsx)(n.h3,{id:"property-modifiers",children:"Property Modifiers"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"optional"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface PaintOptions {\n  shape: Shape;\n  xPos?: number;\n  yPos?: number;\n}\n\nfunction paintShape({ shape, xPos = 0, yPos = 0 }: PaintOptions) {\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In an object destructuring pattern, ",(0,t.jsx)(n.code,{children:"shape: Shape"})," means \u201cgrab the property shape and redefine it locally as a variable named Shape. Likewise ",(0,t.jsx)(n.code,{children:"xPos: number"})," creates a variable named number whose value is based on the parameter\u2019s xPos"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"function draw({ shape: Shape, xPos: number = 100 /*...*/ }) {\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"readonly Properties"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface SomeType {\n  readonly prop: string;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"index-signatures",children:"Index Signatures"}),"\n",(0,t.jsxs)(n.p,{children:["Sometimes you don\u2019t know all the names of a type\u2019s properties ahead of time, but you do know the ",(0,t.jsx)(n.strong,{children:"shape of the values"})]}),"\n",(0,t.jsx)(n.p,{children:"Only some types are allowed for index signature properties: string, number, symbol, template string patterns, and union types consisting only of these"}),"\n",(0,t.jsxs)(n.p,{children:["when indexing with a number, JavaScript will actually ",(0,t.jsx)(n.strong,{children:"convert that to a string before indexing into an object"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface StringArray {\n  [index: number]: string;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"properties of different types are acceptable if the index signature is a union of the property types"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface NumberOrStringDictionary {\n  [index: string]: number | string;\n  length: number; // ok, length is a number\n  name: string; // ok, name is a string\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"extending-types",children:"Extending Types"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface BasicAddress {\n  name?: string;\n  street: string;\n  city: string;\n  country: string;\n  postalCode: string;\n}\n \ninterface AddressWithUnit extends BasicAddress {\n  unit: string;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"intersection-types",children:"Intersection Types"}),"\n",(0,t.jsx)(n.p,{children:"intersection types that is mainly used to combine existing object types"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"interface Colorful {\n  color: string;\n}\ninterface Circle {\n  radius: number;\n}\n \ntype ColorfulCircle = Colorful & Circle;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"tuple-types",children:"Tuple Types"}),"\n",(0,t.jsxs)(n.p,{children:["A tuple type is another sort of Array type that knows ",(0,t.jsx)(n.strong,{children:"exactly how many elements it contains, and exactly which types it contains at specific positions"})]}),"\n",(0,t.jsx)(n.p,{children:"Like ReadonlyArray, it has no representation at runtime, but is significant to TypeScript."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"type StringNumberPair = [string, number];\n"})}),"\n",(0,t.jsx)(n.h2,{id:"classes",children:"Classes"}),"\n",(0,t.jsxs)(n.p,{children:["Just as in JavaScript, if you have a base class, you\u2019ll need to call ",(0,t.jsx)(n.code,{children:"super()"}),"; in your constructor body ",(0,t.jsx)(n.strong,{children:"before using any this. members"})]}),"\n",(0,t.jsxs)(n.p,{children:["Note that inside a method body, it is still ",(0,t.jsx)(n.strong,{children:"mandatory"})," to access fields and other methods via ",(0,t.jsx)(n.code,{children:"this."})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'class Point {\n  readonly name: string = "world";\n\n  x: number;\n  y: number;\n \n  // Normal signature with defaults\n  constructor(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  scale(n: number): void {\n    this.x *= n;\n    this.y *= n;\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"getters--setters",children:"Getters / Setters"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"class C {\n  _length = 0;\n  get length() {\n    return this._length;\n  }\n  set length(value) {\n    this._length = value;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"implements-clauses",children:"implements Clauses"}),"\n",(0,t.jsx)(n.p,{children:"You can use an implements clause to check that a class satisfies a particular interface"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'interface Pingable {\n  ping(): void;\n}\n \nclass Sonar implements Pingable {\n  ping() {\n    console.log("ping!");\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"extends-clauses",children:"extends Clauses"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'class Animal {\n  move() {\n    console.log("Moving along!");\n  }\n}\n \nclass Dog extends Animal {\n  woof(times: number) {\n    for (let i = 0; i < times; i++) {\n      console.log("woof!");\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"overriding-methods",children:"Overriding Methods"}),"\n",(0,t.jsxs)(n.p,{children:["A derived class can also override a base class field or property. You can use the ",(0,t.jsx)(n.code,{children:"super."})," syntax to access base class methods"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"class Derived extends Base {\n  greet(name?: string) {\n    if (name === undefined) {\n      super.greet();\n    } else {\n      console.log(`Hello, ${name.toUpperCase()}`);\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"type-only-field-declarations",children:"Type-only Field Declarations"}),"\n",(0,t.jsxs)(n.p,{children:["When ",(0,t.jsx)(n.code,{children:"target >= ES2022 or useDefineForClassFields is true"}),", class fields are initialized after the parent class constructor completes, overwriting any value set by the parent class"]}),"\n",(0,t.jsx)(n.h3,{id:"initialization-order",children:"Initialization Order"}),"\n",(0,t.jsx)(n.p,{children:"The order of class initialization, as defined by JavaScript, is:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The base class fields are initialized"}),"\n",(0,t.jsx)(n.li,{children:"The base class constructor runs"}),"\n",(0,t.jsx)(n.li,{children:"The derived class fields are initialized"}),"\n",(0,t.jsx)(n.li,{children:"The derived class constructor runs"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"visibility",children:"visibility"}),"\n",(0,t.jsx)(n.p,{children:"Unlike TypeScripts\u2019s private, JavaScript\u2019s private fields (#) remain private after compilation and do not provide the previously mentioned escape hatches like bracket notation access, making them hard private."}),"\n",(0,t.jsx)(n.h3,{id:"static-members",children:"Static Members"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"class MyClass {\n  static x = 0;\n  static printX() {\n    console.log(MyClass.x);\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"static-blocks-in-classes",children:"static Blocks in Classes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"class Foo {\n    static #count = 0;\n \n    get count() {\n        return Foo.#count;\n    }\n \n    static {\n        try {\n            const lastInstances = loadLastInstances();\n            Foo.#count += lastInstances.length;\n        }\n        catch {}\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"this-parameters",children:"this parameters"}),"\n",(0,t.jsxs)(n.p,{children:["In a method or function definition, an ",(0,t.jsx)(n.strong,{children:"initial parameter named this"})," has special meaning in TypeScript. These parameters are erased during compilation"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// TypeScript input with 'this' parameter\nfunction fn(this: SomeType, x: number) {\n  /* ... */\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"this-based-type-guards",children:"this based type guards"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"class FileSystemObject {\n  isFile(): this is FileRep {\n    return this instanceof FileRep;\n  }\n  isDirectory(): this is Directory {\n    return this instanceof Directory;\n  }\n  isNetworked(): this is Networked & this {\n    return this.networked;\n  }\n  constructor(public path: string, private networked: boolean) {}\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"parameter-properties",children:"Parameter Properties"}),"\n",(0,t.jsxs)(n.p,{children:["TypeScript offers special syntax for ",(0,t.jsx)(n.strong,{children:"turning a constructor parameter into a class property with the same name and value"}),". These are called ",(0,t.jsx)(n.strong,{children:"parameter properties"})," and are created by prefixing a constructor argument with one of the visibility modifiers ",(0,t.jsx)(n.code,{children:"public, private, protected, or readonly"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"class Params {\n  constructor(\n    public readonly x: number,\n    protected y: number,\n    private z: number\n  ) {\n    // No body necessary\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"relationships-between-classes",children:"Relationships Between Classes"}),"\n",(0,t.jsxs)(n.p,{children:["In most cases, classes in TypeScript are ",(0,t.jsx)(n.strong,{children:"compared structurally"}),", the same as other types."]}),"\n",(0,t.jsx)(n.h2,{id:"modules",children:"Modules"}),"\n",(0,t.jsx)(n.h3,{id:"how-javascript-modules-are-defined",children:"How JavaScript Modules are Defined"}),"\n",(0,t.jsxs)(n.p,{children:["In TypeScript, just as in ECMAScript 2015, ",(0,t.jsx)(n.strong,{children:"any file containing a top-level import or export is considered a module"})]}),"\n",(0,t.jsxs)(n.p,{children:["Conversely, a file without any top-level import or export declarations is treated as a ",(0,t.jsx)(n.strong,{children:"script whose contents are available in the global scope"})," (and therefore to modules as well)."]}),"\n",(0,t.jsx)(n.p,{children:"Modules are executed within their own scope, not in the global scope."}),"\n",(0,t.jsx)(n.h3,{id:"es-module-syntax",children:"ES Module Syntax"}),"\n",(0,t.jsx)(n.p,{children:"A file can declare a main export via export default"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// @filename: hello.ts\nexport default function helloWorld() {\n  console.log("Hello, world!");\n}\n\nimport helloWorld from "./hello.js";\nhelloWorld();\n'})}),"\n",(0,t.jsx)(n.h3,{id:"additional-import-syntax",children:"Additional Import Syntax"}),"\n",(0,t.jsxs)(n.p,{children:["An import can be renamed using a format like ",(0,t.jsx)(n.code,{children:"import {old as new}"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { pi as \u03c0 } from "./maths.js";\n'})}),"\n",(0,t.jsx)(n.p,{children:"You can mix and match the above syntax into a single import:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import RandomNumberGenerator, { pi as \u03c0 } from "./maths.js";\n'})}),"\n",(0,t.jsxs)(n.p,{children:["You can take all of the exported objects and put them into a single namespace using ",(0,t.jsx)(n.code,{children:"* as name"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import * as math from "./maths.js";\n'})}),"\n",(0,t.jsxs)(n.p,{children:["You can import a file and not include any variables into your current module via ",(0,t.jsx)(n.code,{children:'import "./file"'})]}),"\n",(0,t.jsx)(n.h3,{id:"typescript-specific-es-module-syntax",children:"TypeScript Specific ES Module Syntax"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"import type"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import type { Cat, Dog } from "./animal";\n\nimport { createCatName, type Cat, type Dog } from "./animal";\n'})}),"\n",(0,t.jsx)(n.h3,{id:"commonjs-syntax",children:"CommonJS Syntax"}),"\n",(0,t.jsxs)(n.p,{children:["CommonJS is the format which ",(0,t.jsx)(n.strong,{children:"most modules on npm"})," are delivered in"]}),"\n",(0,t.jsx)(n.p,{children:"Identifiers are exported via setting the exports property on a global called module."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"function absolute(num: number) {\n  if (num < 0) return num * -1;\n  return num;\n}\n \nmodule.exports = {\n  pi: 3.14,\n  squareTwo: 1.41,\n  phi: 1.61,\n  absolute,\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"Then these files can be imported via a require statement:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'const maths = require("maths");\nmaths.pi;\n'})}),"\n",(0,t.jsx)(n.h3,{id:"typescripts-module-resolution-options",children:"TypeScript\u2019s Module Resolution Options"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Module resolution is"})," the process of taking a string from the import or require statement, and determining what file that string refers to"]}),"\n",(0,t.jsxs)(n.p,{children:["TypeScript includes two resolution strategies: ",(0,t.jsx)(n.strong,{children:"Classic and Node"}),". Classic, the default when the compiler option module is not commonjs, is included for backwards compatibility. ",(0,t.jsx)(n.strong,{children:"The Node strategy replicates how Node.js works in CommonJS mode"}),", with additional checks for .ts and .d.ts."]}),"\n",(0,t.jsx)(n.p,{children:"There are many TSConfig flags which influence the module strategy within TypeScript: moduleResolution, baseUrl, paths, rootDirs."}),"\n",(0,t.jsx)(n.h3,{id:"typescripts-module-output-options",children:"TypeScript\u2019s Module Output Options"}),"\n",(0,t.jsx)(n.p,{children:"All communication between modules happens via a module loader, the compiler option module determines which one is used. At runtime the module loader is responsible for locating and executing all dependencies of a module before executing it."})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var t=s(96540);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);