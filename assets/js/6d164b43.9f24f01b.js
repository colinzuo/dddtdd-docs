"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[8261],{63255:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>a,default:()=>f,frontMatter:()=>s,metadata:()=>o,toc:()=>u});var t=n(74848),i=n(28453);const s={},a=void 0,o={id:"programming-languages/python/libs/pytest/fixture",title:"fixture",description:"FixtureManager.init",source:"@site/docs/00400-programming-languages/python/libs/pytest/010-fixture.md",sourceDirName:"00400-programming-languages/python/libs/pytest",slug:"/programming-languages/python/libs/pytest/fixture",permalink:"/dddtdd-docs/programming-languages/python/libs/pytest/fixture",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1733377229e3,sidebarPosition:10,frontMatter:{},sidebar:"docSidebar",previous:{title:"10 minutes to pandas",permalink:"/dddtdd-docs/programming-languages/python/libs/pandas/user_guide/0100-10min"},next:{title:"startup",permalink:"/dddtdd-docs/programming-languages/python/libs/pytest/startup"}},d={},u=[{value:"FixtureManager.<strong>init</strong>",id:"fixturemanagerinit",level:2},{value:"FixtureManager.pytest_plugin_registered",id:"fixturemanagerpytest_plugin_registered",level:2},{value:"FixtureManager.parsefactories",id:"fixturemanagerparsefactories",level:2},{value:"FixtureManager._register_fixture",id:"fixturemanager_register_fixture",level:2},{value:"FixtureManager.getfixtureinfo",id:"fixturemanagergetfixtureinfo",level:2},{value:"FixtureManager.pytest_generate_tests",id:"fixturemanagerpytest_generate_tests",level:2},{value:"FixtureManager.pytest_collection_modifyitems",id:"fixturemanagerpytest_collection_modifyitems",level:2}];function l(e){const r={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.h2,{id:"fixturemanagerinit",children:["FixtureManager.",(0,t.jsx)(r.strong,{children:"init"})]}),"\n",(0,t.jsx)(r.p,{children:"\u6ce8\u518cplugin"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-py",children:'class FixtureManager:\r\n\r\n    def __init__(self, session: Session) -> None:\r\n\r\n        self._arg2fixturedefs: Final[dict[str, list[FixtureDef[Any]]]] = {}\r\n\r\n        self._nodeid_autousenames: Final[dict[str, list[str]]] = {\r\n            "": self.config.getini("usefixtures"),\r\n        }\r\n        session.config.pluginmanager.register(self, "funcmanage")                \n'})}),"\n",(0,t.jsx)(r.h2,{id:"fixturemanagerpytest_plugin_registered",children:"FixtureManager.pytest_plugin_registered"}),"\n",(0,t.jsx)(r.p,{children:"\u53d1\u73b0\u65b0\u6ce8\u518cplugin\u65f6\u5019\u63d0\u53d6fixture\u4fe1\u606f\uff0c\u7136\u540e\u6ce8\u518c"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-py",children:'    def pytest_plugin_registered(self, plugin: _PluggyPlugin, plugin_name: str) -> None:\r\n\r\n        if plugin_name and plugin_name.endswith("conftest.py"):\r\n\r\n            conftestpath = absolutepath(plugin_name)\r\n\r\n                nodeid = str(conftestpath.parent.relative_to(self.config.rootpath))\r\n\r\n        else:\r\n            nodeid = None       \r\n\r\n        self.parsefactories(plugin, nodeid)                                     \n'})}),"\n",(0,t.jsx)(r.h2,{id:"fixturemanagerparsefactories",children:"FixtureManager.parsefactories"}),"\n",(0,t.jsx)(r.p,{children:"\u63d0\u53d6fixture\u4fe1\u606f\uff0c\u7136\u540e\u6ce8\u518c"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-py",children:"    def parsefactories(\r\n        self,\r\n        node_or_obj: nodes.Node | object,\r\n        nodeid: str | NotSetType | None = NOTSET,\r\n    ) -> None:\r\n\r\n        if nodeid is not NOTSET:\r\n            holderobj = node_or_obj\r\n        else:\r\n            assert isinstance(node_or_obj, nodes.Node)\r\n            holderobj = cast(object, node_or_obj.obj)  # type: ignore[attr-defined]\r\n            assert isinstance(node_or_obj.nodeid, str)\r\n            nodeid = node_or_obj.nodeid                                                                \r\n\r\n        for name in dir(holderobj):\r\n\r\n            obj_ub = safe_getattr(holderobj_tp, name, None)\r\n            marker = getfixturemarker(obj_ub)\r\n\r\n            self._register_fixture(\r\n                name=name,\r\n                nodeid=nodeid,\r\n                func=func,\r\n                scope=marker.scope,\r\n                params=marker.params,\r\n                ids=marker.ids,\r\n                autouse=marker.autouse,\r\n            )\n"})}),"\n",(0,t.jsx)(r.h2,{id:"fixturemanager_register_fixture",children:"FixtureManager._register_fixture"}),"\n",(0,t.jsx)(r.p,{children:"\u5b9e\u9645\u6ce8\u518cfixture"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.code,{children:"_arg2fixturedefs"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.code,{children:"_nodeid_autousenames"})}),"\n"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-py",children:'    def _register_fixture(\r\n        self,\r\n        *,\r\n        name: str,\r\n        func: _FixtureFunc[object],\r\n        nodeid: str | None,\r\n        scope: Scope | _ScopeName | Callable[[str, Config], _ScopeName] = "function",\r\n        params: Sequence[object] | None = None,\r\n        ids: tuple[object | None, ...] | Callable[[Any], object | None] | None = None,\r\n        autouse: bool = False,\r\n    ) -> None:\r\n\r\n        fixture_def = FixtureDef(\r\n            config=self.config,\r\n            baseid=nodeid,\r\n            argname=name,\r\n            func=func,\r\n            scope=scope,\r\n            params=params,\r\n            ids=ids,\r\n            _ispytest=True,\r\n        )\r\n\r\n        faclist = self._arg2fixturedefs.setdefault(name, [])\r\n        if fixture_def.has_location:\r\n            faclist.append(fixture_def)\r\n        else:\r\n            # fixturedefs with no location are at the front\r\n            # so this inserts the current fixturedef after the\r\n            # existing fixturedefs from external plugins but\r\n            # before the fixturedefs provided in conftests.\r\n            i = len([f for f in faclist if not f.has_location])\r\n            faclist.insert(i, fixture_def)\r\n        if autouse:\r\n            self._nodeid_autousenames.setdefault(nodeid or "", []).append(name)  \n'})}),"\n",(0,t.jsx)(r.h2,{id:"fixturemanagergetfixtureinfo",children:"FixtureManager.getfixtureinfo"}),"\n",(0,t.jsxs)(r.p,{children:["\u4ece\u51fd\u6570\u63d0\u53d6",(0,t.jsx)(r.code,{children:"FuncFixtureInfo"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-py",children:"    def getfixtureinfo(\r\n        self,\r\n        node: nodes.Item,\r\n        func: Callable[..., object] | None,\r\n        cls: type | None,\r\n    ) -> FuncFixtureInfo:\r\n\r\n            # \u51fd\u6570\u53c2\u6570\u540d\u5b57\r\n            argnames = getfuncargnames(func, name=node.name, cls=cls)\r\n\r\n        # marker usefixtures\u8bbe\u7f6e\u7684fixture names\r\n        usefixturesnames = self._getusefixturesnames(node)\r\n        # autouse \r\n        autousenames = self._getautousenames(node)\r\n        # \u6574\u5408\u51e0\u4e2a\u6765\u6e90\u5e76\u53bb\u91cd\r\n        initialnames = deduplicate_names(autousenames, usefixturesnames, argnames)\r\n\r\n        # marker parametrize\u6307\u5b9a\u7684\u53c2\u6570\u4e0d\u662ffixture\r\n        direct_parametrize_args = _get_direct_parametrize_args(node)\r\n\r\n        # \u6dfb\u52a0\u88ab\u521d\u59cbfixture\u4f9d\u8d56\u7684fixture\r\n        names_closure, arg2fixturedefs = self.getfixtureclosure(\r\n            parentnode=node,\r\n            initialnames=initialnames,\r\n            ignore_args=direct_parametrize_args,\r\n        )\r\n\r\n        return FuncFixtureInfo(argnames, initialnames, names_closure, arg2fixturedefs)        \n"})}),"\n",(0,t.jsx)(r.h2,{id:"fixturemanagerpytest_generate_tests",children:"FixtureManager.pytest_generate_tests"}),"\n",(0,t.jsxs)(r.p,{children:["\u6839\u636eparametrize\u4fe1\u606f\u66f4\u65b0",(0,t.jsx)(r.code,{children:"Metafunc"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-py",children:'    def pytest_generate_tests(self, metafunc: Metafunc) -> None:\r\n\r\n        for argname in metafunc.fixturenames:\r\n\r\n            # \u76f4\u63a5\u8bbe\u7f6e\u5728marker\u4e0a\u7684\u4f18\u5148\u7ea7\u9ad8\r\n            if any(\r\n                argname in get_parametrize_mark_argnames(mark)\r\n                for mark in metafunc.definition.iter_markers("parametrize")\r\n            ):\r\n                continue\r\n\r\n            # \u68c0\u67e5fixture\u662f\u5426\u662fparametrize\u7684\uff0c\u5305\u62ec\u867d\u7136\u6700\u65b0\u7684\u6ca1\u6709\u4f7f\u7528\r\n            # params\uff0c\u4f46\u662f\u5b83\u662f\u901a\u8fc7override\u751f\u6210\uff0c\u800c\u88aboverride\u7684\u662f\u4f7f\u7528params\r\n            for fixturedef in reversed(fixture_defs):\r\n                # Fixture is parametrized, apply it and stop.\r\n                if fixturedef.params is not None:\r\n                    metafunc.parametrize(\r\n                        argname,\r\n                        fixturedef.params,\r\n                        indirect=True,\r\n                        scope=fixturedef.scope,\r\n                        ids=fixturedef.ids,\r\n                    )\r\n                    break\r\n\r\n                # Not requesting the overridden super fixture, stop.\r\n                if argname not in fixturedef.argnames:\r\n                    break                                    \n'})}),"\n",(0,t.jsx)(r.h2,{id:"fixturemanagerpytest_collection_modifyitems",children:"FixtureManager.pytest_collection_modifyitems"}),"\n",(0,t.jsx)(r.p,{children:"\u6309\u7167scope\u91cd\u6392\u5e8f\uff0c\u5c3d\u91cf\u91cd\u590d\u5229\u7528fixture\u5b9e\u4f8b"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-py",children:"    def pytest_collection_modifyitems(self, items: list[nodes.Item]) -> None:\r\n        # Separate parametrized setups.\r\n        items[:] = reorder_items(items)\n"})})]})}function f(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>o});var t=n(96540);const i={},s=t.createContext(i);function a(e){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);