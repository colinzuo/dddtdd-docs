"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[3203],{19933:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>o});var t=i(74848),l=i(28453);const r={title:"Initialization, Finalization, and Threads"},a=void 0,s={id:"programming-languages/python/c-api/init",title:"Initialization, Finalization, and Threads",description:"Before Python Initialization",source:"@site/docs/00400-programming-languages/python/c-api/1120-init.md",sourceDirName:"00400-programming-languages/python/c-api",slug:"/programming-languages/python/c-api/init",permalink:"/dddtdd-docs/programming-languages/python/c-api/init",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1720187019e3,sidebarPosition:1120,frontMatter:{title:"Initialization, Finalization, and Threads"},sidebar:"docSidebar",previous:{title:"Objects for Type Hinting",permalink:"/dddtdd-docs/programming-languages/python/c-api/concrete-typehints"},next:{title:"Python Initialization Configuration",permalink:"/dddtdd-docs/programming-languages/python/c-api/init_config"}},d={},o=[{value:"Before Python Initialization",id:"before-python-initialization",level:2},{value:"Global configuration variables",id:"global-configuration-variables",level:2},{value:"Initializing and finalizing the interpreter",id:"initializing-and-finalizing-the-interpreter",level:2},{value:"Process-wide parameters",id:"process-wide-parameters",level:2},{value:"Thread State and the Global Interpreter Lock",id:"thread-state-and-the-global-interpreter-lock",level:2},{value:"High-level API",id:"high-level-api",level:3},{value:"Low-level API",id:"low-level-api",level:3},{value:"Asynchronous Notifications",id:"asynchronous-notifications",level:2},{value:"Profiling and Tracing",id:"profiling-and-tracing",level:2},{value:"Thread Local Storage Support",id:"thread-local-storage-support",level:2}];function c(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"before-python-initialization",children:"Before Python Initialization"}),"\n",(0,t.jsx)(n.p,{children:"In an application embedding Python, the Py_Initialize() function must be called before using any other Python/C API functions; with the exception of a few functions and the global configuration variables"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"PyImport_AppendInittab()"}),"\n......"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"global-configuration-variables",children:"Global configuration variables"}),"\n",(0,t.jsx)(n.p,{children:"Python has variables for the global configuration to control different features and options. By default, these flags are controlled by command line options"}),"\n",(0,t.jsx)(n.h2,{id:"initializing-and-finalizing-the-interpreter",children:"Initializing and finalizing the interpreter"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"void Py_Initialize()"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"void Py_InitializeEx(int initsigs)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"int Py_IsInitialized()"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"int Py_FinalizeEx()"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"void Py_Finalize()"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"process-wide-parameters",children:"Process-wide parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"wchar_t *Py_GetProgramName()"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"wchar_t *Py_GetProgramFullPath()"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"wchar_t *Py_GetPath()"}),": The list ",(0,t.jsx)(n.code,{children:"sys.path"})," is initialized with this value on interpreter startup; it can be (and usually is) modified later to change the search path for loading modules"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"const char *Py_GetVersion()"}),": The value is available to Python code as ",(0,t.jsx)(n.code,{children:"sys.version"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"const char *Py_GetPlatform()"}),": The value is available to Python code as ",(0,t.jsx)(n.code,{children:"sys.platform"})]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"const char *Py_GetCompiler()"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"const char *Py_GetBuildInfo()"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"wchar_t *Py_GetPythonHome()"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"thread-state-and-the-global-interpreter-lock",children:"Thread State and the Global Interpreter Lock"}),"\n",(0,t.jsx)(n.p,{children:"The lock is also released around potentially blocking I/O operations like reading or writing a file, so that other Python threads can run in the meantime."}),"\n",(0,t.jsxs)(n.p,{children:["The Python interpreter keeps some thread-specific bookkeeping information inside a data structure called ",(0,t.jsx)(n.code,{children:"PyThreadState"}),". There\u2019s also one global variable pointing to the current PyThreadState: it can be retrieved using ",(0,t.jsx)(n.code,{children:"PyThreadState_Get()"})]}),"\n",(0,t.jsx)(n.h3,{id:"high-level-api",children:"High-level API"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"PyThreadState *PyEval_SaveThread()"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"void PyEval_RestoreThread(PyThreadState *tstate)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"PyThreadState *PyThreadState_Get()"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"PyGILState_STATE PyGILState_Ensure()"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"void PyGILState_Release(PyGILState_STATE)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"int PyGILState_Check()"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"low-level-api",children:"Low-level API"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"void PyEval_AcquireThread(PyThreadState *tstate)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"void PyEval_ReleaseThread(PyThreadState *tstate)"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"asynchronous-notifications",children:"Asynchronous Notifications"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"int Py_AddPendingCall(int (*func)(void*), void *arg)"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"profiling-and-tracing",children:"Profiling and Tracing"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"typedef int (*Py_tracefunc)(PyObject *obj, PyFrameObject *frame, int what, PyObject *arg)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"void PyEval_SetProfile(Py_tracefunc func, PyObject *obj)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"void PyEval_SetTrace(Py_tracefunc func, PyObject *obj)"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"thread-local-storage-support",children:"Thread Local Storage Support"}),"\n",(0,t.jsxs)(n.p,{children:["The Python interpreter provides low-level support for thread-local storage (TLS) which wraps the underlying native TLS implementation to support the Python-level thread local storage API (",(0,t.jsx)(n.code,{children:"threading.local"}),")"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"type Py_tss_t"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"Py_tss_NEEDS_INIT"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"Py_tss_t *PyThread_tss_alloc()"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"void PyThread_tss_free(Py_tss_t *key)"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"int PyThread_tss_is_created(Py_tss_t *key)"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"int PyThread_tss_create(Py_tss_t *key)"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"void PyThread_tss_delete(Py_tss_t *key)"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"int PyThread_tss_set(Py_tss_t *key, void *value)"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"void *PyThread_tss_get(Py_tss_t *key)"})}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>s});var t=i(96540);const l={},r=t.createContext(l);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);