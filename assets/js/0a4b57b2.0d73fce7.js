"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[5764],{27520:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>a});var r=n(74848),s=n(28453);const o={},l=void 0,p={id:"programming-languages/python/libs/pytest/runtestloop",title:"runtestloop",description:"main.py _main",source:"@site/docs/00400-programming-languages/python/libs/pytest/130-runtestloop.md",sourceDirName:"00400-programming-languages/python/libs/pytest",slug:"/programming-languages/python/libs/pytest/runtestloop",permalink:"/dddtdd-docs/programming-languages/python/libs/pytest/runtestloop",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1733377229e3,sidebarPosition:130,frontMatter:{},sidebar:"docSidebar",previous:{title:"collect",permalink:"/dddtdd-docs/programming-languages/python/libs/pytest/collect"},next:{title:"2001-0007-Style-Guide-for-C-Code",permalink:"/dddtdd-docs/programming-languages/python/pep/2001-0007-Style-Guide-for-C-Code"}},i={},a=[{value:"main.py _main",id:"mainpy-_main",level:2},{value:"main.py pytest_runtestloop",id:"mainpy-pytest_runtestloop",level:2},{value:"runner.py pytest_runtest_protocol",id:"runnerpy-pytest_runtest_protocol",level:2},{value:"runner.py call_and_report",id:"runnerpy-call_and_report",level:2},{value:"runner.py pytest_runtest_setup",id:"runnerpy-pytest_runtest_setup",level:2},{value:"runner.py SetupState setup",id:"runnerpy-setupstate-setup",level:3},{value:"python.py Function setup",id:"pythonpy-function-setup",level:3},{value:"runner.py pytest_runtest_call",id:"runnerpy-pytest_runtest_call",level:2},{value:"python.py Function runtest",id:"pythonpy-function-runtest",level:3},{value:"runner.py pytest_runtest_teardown",id:"runnerpy-pytest_runtest_teardown",level:2}];function u(e){const t={code:"code",h2:"h2",h3:"h3",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"mainpy-_main",children:"main.py _main"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-py",metastring:'title="src_pytest\\main.py"',children:"def _main(config: Config, session: Session) -> int | ExitCode | None:\r\n\r\n    config.hook.pytest_runtestloop(session=session)    \n"})}),"\n",(0,r.jsx)(t.h2,{id:"mainpy-pytest_runtestloop",children:"main.py pytest_runtestloop"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-py",children:"def pytest_runtestloop(session: Session) -> bool:\r\n\r\n    for i, item in enumerate(session.items):\r\n        nextitem = session.items[i + 1] if i + 1 < len(session.items) else None\r\n        item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)    \n"})}),"\n",(0,r.jsx)(t.h2,{id:"runnerpy-pytest_runtest_protocol",children:"runner.py pytest_runtest_protocol"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-py",children:'def pytest_runtest_protocol(item: Item, nextitem: Item | None) -> bool:\r\n\r\n    runtestprotocol(item, nextitem=nextitem)\r\n\r\ndef runtestprotocol(\r\n    item: Item, log: bool = True, nextitem: Item | None = None\r\n) -> list[TestReport]:\r\n\r\n    rep = call_and_report(item, "setup", log)\r\n\r\n        if not item.config.getoption("setuponly", False):\r\n            reports.append(call_and_report(item, "call", log))\r\n\r\n    reports.append(call_and_report(item, "teardown", log, nextitem=nextitem))\n'})}),"\n",(0,r.jsx)(t.h2,{id:"runnerpy-call_and_report",children:"runner.py call_and_report"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-py",children:'def call_and_report(\r\n    item: Item, when: Literal["setup", "call", "teardown"], log: bool = True, **kwds\r\n) -> TestReport:\r\n    ihook = item.ihook\r\n    if when == "setup":\r\n        runtest_hook: Callable[..., None] = ihook.pytest_runtest_setup\r\n    elif when == "call":\r\n        runtest_hook = ihook.pytest_runtest_call\r\n    elif when == "teardown":\r\n        runtest_hook = ihook.pytest_runtest_teardown\r\n\r\n    call = CallInfo.from_call(\r\n        lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise\r\n    )\r\n    report: TestReport = ihook.pytest_runtest_makereport(item=item, call=call)        \n'})}),"\n",(0,r.jsx)(t.h2,{id:"runnerpy-pytest_runtest_setup",children:"runner.py pytest_runtest_setup"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-py",children:'def pytest_runtest_setup(item: Item) -> None:\r\n    _update_current_test_var(item, "setup")\r\n    item.session._setupstate.setup(item)\n'})}),"\n",(0,r.jsx)(t.h3,{id:"runnerpy-setupstate-setup",children:"runner.py SetupState setup"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-py",children:"    def setup(self, item: Item) -> None:\r\n\r\n        needed_collectors = item.listchain()\r\n\r\n        for col in needed_collectors[len(self.stack) :]:\r\n\r\n            self.stack[col] = ([col.teardown], None)\r\n            try:\r\n                col.setup()                            \n"})}),"\n",(0,r.jsx)(t.h3,{id:"pythonpy-function-setup",children:"python.py Function setup"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-py",children:"    def setup(self) -> None:\r\n        self._request._fillfixtures()\n"})}),"\n",(0,r.jsx)(t.h2,{id:"runnerpy-pytest_runtest_call",children:"runner.py pytest_runtest_call"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-py",children:"def pytest_runtest_call(item: Item) -> None:\r\n\r\n        item.runtest()    \n"})}),"\n",(0,r.jsx)(t.h3,{id:"pythonpy-function-runtest",children:"python.py Function runtest"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-py",children:'    def runtest(self) -> None:\r\n        """Execute the underlying test function."""\r\n        self.ihook.pytest_pyfunc_call(pyfuncitem=self)\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-py",children:"def pytest_pyfunc_call(pyfuncitem: Function) -> object | None:\r\n    testfunction = pyfuncitem.obj\r\n\r\n    funcargs = pyfuncitem.funcargs\r\n    testargs = {arg: funcargs[arg] for arg in pyfuncitem._fixtureinfo.argnames}\r\n    result = testfunction(**testargs)    \n"})}),"\n",(0,r.jsx)(t.h2,{id:"runnerpy-pytest_runtest_teardown",children:"runner.py pytest_runtest_teardown"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-py",children:'def pytest_runtest_teardown(item: Item, nextitem: Item | None) -> None:\r\n    _update_current_test_var(item, "teardown")\r\n    item.session._setupstate.teardown_exact(nextitem)\r\n    _update_current_test_var(item, None)\n'})})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>p});var r=n(96540);const s={},o=r.createContext(s);function l(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function p(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);