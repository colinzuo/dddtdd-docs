"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[7482],{6782:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>t,metadata:()=>l,toc:()=>o});var r=s(74848),a=s(28453);const t={},i="Essential basic functionality",l={id:"programming-languages/python/libs/pandas/user_guide/basics",title:"Essential basic functionality",description:"Attributes and underlying data",source:"@site/docs/00400-programming-languages/python/libs/pandas/user_guide/0300-basics.md",sourceDirName:"00400-programming-languages/python/libs/pandas/user_guide",slug:"/programming-languages/python/libs/pandas/user_guide/basics",permalink:"/dddtdd-docs/programming-languages/python/libs/pandas/user_guide/basics",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1733377229e3,sidebarPosition:300,frontMatter:{},sidebar:"docSidebar",previous:{title:"Intro to data structures",permalink:"/dddtdd-docs/programming-languages/python/libs/pandas/user_guide/dsintro"},next:{title:"note",permalink:"/dddtdd-docs/programming-languages/python/libs/pandas/user_guide/note"}},d={},o=[{value:"Attributes and underlying data",id:"attributes-and-underlying-data",level:2},{value:"Accelerated operations",id:"accelerated-operations",level:2},{value:"Iteration",id:"iteration",level:2},{value:"Sorting",id:"sorting",level:2},{value:"By index",id:"by-index",level:3},{value:"By values",id:"by-values",level:3},{value:"smallest / largest values",id:"smallest--largest-values",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"essential-basic-functionality",children:"Essential basic functionality"}),"\n",(0,r.jsx)(n.h2,{id:"attributes-and-underlying-data",children:"Attributes and underlying data"}),"\n",(0,r.jsx)(n.p,{children:"Note, these attributes can be safely assigned to!"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"df.columns = [x.lower() for x in df.columns]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["To get the actual data inside a ",(0,r.jsx)(n.code,{children:"Index"})," or ",(0,r.jsx)(n.code,{children:"Series"}),", use the ",(0,r.jsx)(n.code,{children:".array"})," property"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"s.array\r\n\r\ns.index.array\n"})}),"\n",(0,r.jsxs)(n.p,{children:["If you know you need a NumPy array, use ",(0,r.jsx)(n.code,{children:"to_numpy()"})," or ",(0,r.jsx)(n.code,{children:"numpy.asarray()"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"s.to_numpy()\r\n\r\nnp.asarray(s)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"accelerated-operations",children:"Accelerated operations"}),"\n",(0,r.jsxs)(n.p,{children:["pandas has support for accelerating certain types of binary numerical and boolean operations using the ",(0,r.jsx)(n.code,{children:"numexpr"})," library and the ",(0,r.jsx)(n.code,{children:"bottleneck"})," libraries"]}),"\n",(0,r.jsx)(n.h2,{id:"iteration",children:"Iteration"}),"\n",(0,r.jsxs)(n.p,{children:["When iterating over a ",(0,r.jsx)(n.code,{children:"Series"}),", it is regarded as ",(0,r.jsx)(n.strong,{children:"array-like"}),", and basic iteration produces the values. ",(0,r.jsx)(n.code,{children:"DataFrames"})," follow the ",(0,r.jsx)(n.strong,{children:"dict-like"})," convention of iterating over the \u201ckeys\u201d of the objects"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Series: values"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"DataFrame: column labels"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"iterrows()"}),": Iterate over the rows of a DataFrame as (index, Series) pairs. This converts the rows to Series objects, which can change the dtypes and has some performance implications."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"itertuples()"}),": Iterate over the rows of a DataFrame as namedtuples of the values. This is a lot faster than iterrows(), and is in most cases preferable to use to iterate over the values of a DataFrame"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"sorting",children:"Sorting"}),"\n",(0,r.jsx)(n.h3,{id:"by-index",children:"By index"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"unsorted_df.sort_index()\r\n\r\nunsorted_df.sort_index(ascending=False)\r\n\r\nunsorted_df.sort_index(axis=1)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"by-values",children:"By values"}),"\n",(0,r.jsxs)(n.p,{children:["The optional by parameter to ",(0,r.jsx)(n.code,{children:"DataFrame.sort_values()"})," may used to specify one or more columns to use to determine the sorted order"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'df1.sort_values(by="two")\r\n\r\ndf1[["one", "two", "three"]].sort_values(by=["one", "two"])\r\n\r\ns1.sort_values(key=lambda x: x.str.lower())\r\n\r\ndf.sort_values(by="a", key=lambda col: col.str.lower())\n'})}),"\n",(0,r.jsx)(n.h3,{id:"smallest--largest-values",children:"smallest / largest values"}),"\n",(0,r.jsxs)(n.p,{children:["Series has the ",(0,r.jsx)(n.code,{children:"nsmallest()"})," and ",(0,r.jsx)(n.code,{children:"nlargest()"})," methods which return the smallest or largest\r\nvalues"]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>l});var r=s(96540);const a={},t=r.createContext(a);function i(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);