"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[5002],{31882:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>g,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=n(74848),o=n(28453);const a={},s=void 0,i={id:"programming-languages/golang/gin/logger",title:"logger",description:"LoggerConfig",source:"@site/docs/00400-programming-languages/golang/gin/0300-logger.md",sourceDirName:"00400-programming-languages/golang/gin",slug:"/programming-languages/golang/gin/logger",permalink:"/dddtdd-docs/programming-languages/golang/gin/logger",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1720187019e3,sidebarPosition:300,frontMatter:{},sidebar:"docSidebar",previous:{title:"context",permalink:"/dddtdd-docs/programming-languages/golang/gin/context"},next:{title:"errors",permalink:"/dddtdd-docs/programming-languages/golang/gin/errors"}},g={},l=[{value:"LoggerConfig",id:"loggerconfig",level:2},{value:"Formatter",id:"formatter",level:2},{value:"LogFormatterParams",id:"logformatterparams",level:2},{value:"defaultLogFormatter",id:"defaultlogformatter",level:2},{value:"Logger",id:"logger",level:2},{value:"LoggerWithConfig",id:"loggerwithconfig",level:2}];function m(t){const e={code:"code",h2:"h2",pre:"pre",...(0,o.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{id:"loggerconfig",children:"LoggerConfig"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-go",children:"// LoggerConfig defines the config for Logger middleware.\ntype LoggerConfig struct {\n\t// Optional. Default value is gin.defaultLogFormatter\n\tFormatter LogFormatter\n\n\t// Output is a writer where logs are written.\n\t// Optional. Default value is gin.DefaultWriter.\n\tOutput io.Writer\n\n\t// SkipPaths is an url path array which logs are not written.\n\t// Optional.\n\tSkipPaths []string\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"formatter",children:"Formatter"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-go",children:"// LogFormatter gives the signature of the formatter function passed to LoggerWithFormatter\ntype LogFormatter func(params LogFormatterParams) string\n"})}),"\n",(0,r.jsx)(e.h2,{id:"logformatterparams",children:"LogFormatterParams"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-go",children:"// LogFormatterParams is the structure any formatter will be handed when time to log comes\ntype LogFormatterParams struct {\n\tRequest *http.Request\n\n\t// TimeStamp shows the time after the server returns a response.\n\tTimeStamp time.Time\n\t// StatusCode is HTTP response code.\n\tStatusCode int\n\t// Latency is how much time the server cost to process a certain request.\n\tLatency time.Duration\n\t// ClientIP equals Context's ClientIP method.\n\tClientIP string\n\t// Method is the HTTP method given to the request.\n\tMethod string\n\t// Path is a path the client requests.\n\tPath string\n\t// ErrorMessage is set if error has occurred in processing the request.\n\tErrorMessage string\n\t// isTerm shows whether gin's output descriptor refers to a terminal.\n\tisTerm bool\n\t// BodySize is the size of the Response Body\n\tBodySize int\n\t// Keys are the keys set on the request's context.\n\tKeys map[string]any\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"defaultlogformatter",children:"defaultLogFormatter"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-go",children:'// defaultLogFormatter is the default log format function Logger middleware uses.\nvar defaultLogFormatter = func(param LogFormatterParams) string {\n\tvar statusColor, methodColor, resetColor string\n\tif param.IsOutputColor() {\n\t\tstatusColor = param.StatusCodeColor()\n\t\tmethodColor = param.MethodColor()\n\t\tresetColor = param.ResetColor()\n\t}\n\n\tif param.Latency > time.Minute {\n\t\tparam.Latency = param.Latency.Truncate(time.Second)\n\t}\n\treturn fmt.Sprintf("[GIN] %v |%s %3d %s| %13v | %15s |%s %-7s %s %#v\\n%s",\n\t\tparam.TimeStamp.Format("2006/01/02 - 15:04:05"),\n\t\tstatusColor, param.StatusCode, resetColor,\n\t\tparam.Latency,\n\t\tparam.ClientIP,\n\t\tmethodColor, param.Method, resetColor,\n\t\tparam.Path,\n\t\tparam.ErrorMessage,\n\t)\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"logger",children:"Logger"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-go",children:"// Logger instances a Logger middleware that will write the logs to gin.DefaultWriter.\n// By default, gin.DefaultWriter = os.Stdout.\nfunc Logger() HandlerFunc {\n\treturn LoggerWithConfig(LoggerConfig{})\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"loggerwithconfig",children:"LoggerWithConfig"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-go",children:'// LoggerWithConfig instance a Logger middleware with config.\nfunc LoggerWithConfig(conf LoggerConfig) HandlerFunc {\n\tformatter := conf.Formatter\n\tif formatter == nil {\n\t\tformatter = defaultLogFormatter\n\t}\n\n\tout := conf.Output\n\tif out == nil {\n\t\tout = DefaultWriter\n\t}\n\n\tnotlogged := conf.SkipPaths\n\n\tisTerm := true\n\n\tif w, ok := out.(*os.File); !ok || os.Getenv("TERM") == "dumb" ||\n\t\t(!isatty.IsTerminal(w.Fd()) && !isatty.IsCygwinTerminal(w.Fd())) {\n\t\tisTerm = false\n\t}\n\n\tvar skip map[string]struct{}\n\n\tif length := len(notlogged); length > 0 {\n\t\tskip = make(map[string]struct{}, length)\n\n\t\tfor _, path := range notlogged {\n\t\t\tskip[path] = struct{}{}\n\t\t}\n\t}\n\n\treturn func(c *Context) {\n\t\t// Start timer\n\t\tstart := time.Now()\n\t\tpath := c.Request.URL.Path\n\t\traw := c.Request.URL.RawQuery\n\n\t\t// Process request\n\t\tc.Next()\n\n\t\t// Log only when path is not being skipped\n\t\tif _, ok := skip[path]; !ok {\n\t\t\tparam := LogFormatterParams{\n\t\t\t\tRequest: c.Request,\n\t\t\t\tisTerm:  isTerm,\n\t\t\t\tKeys:    c.Keys,\n\t\t\t}\n\n\t\t\t// Stop timer\n\t\t\tparam.TimeStamp = time.Now()\n\t\t\tparam.Latency = param.TimeStamp.Sub(start)\n\n\t\t\tparam.ClientIP = c.ClientIP()\n\t\t\tparam.Method = c.Request.Method\n\t\t\tparam.StatusCode = c.Writer.Status()\n\t\t\tparam.ErrorMessage = c.Errors.ByType(ErrorTypePrivate).String()\n\n\t\t\tparam.BodySize = c.Writer.Size()\n\n\t\t\tif raw != "" {\n\t\t\t\tpath = path + "?" + raw\n\t\t\t}\n\n\t\t\tparam.Path = path\n\n\t\t\tfmt.Fprint(out, formatter(param))\n\t\t}\n\t}\n}\n'})})]})}function d(t={}){const{wrapper:e}={...(0,o.R)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(m,{...t})}):m(t)}},28453:(t,e,n)=>{n.d(e,{R:()=>s,x:()=>i});var r=n(96540);const o={},a=r.createContext(o);function s(t){const e=r.useContext(a);return r.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function i(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:s(t.components),r.createElement(a.Provider,{value:e},t.children)}}}]);