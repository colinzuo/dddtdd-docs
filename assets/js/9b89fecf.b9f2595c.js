"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[6971],{13277:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var t=s(74848),i=s(28453);const r={},d="Class and Style Bindings",l={id:"frontend/vue3/core/essentials/class-and-style-bindings",title:"Class and Style Bindings",description:"Binding HTML Classes",source:"@site/docs/00200-frontend/vue3/010-core/011-essentials/050-class-and-style-bindings.md",sourceDirName:"00200-frontend/vue3/010-core/011-essentials",slug:"/frontend/vue3/core/essentials/class-and-style-bindings",permalink:"/dddtdd-docs/frontend/vue3/core/essentials/class-and-style-bindings",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1720187019e3,sidebarPosition:50,frontMatter:{},sidebar:"docSidebar",previous:{title:"Computed Properties",permalink:"/dddtdd-docs/frontend/vue3/core/essentials/computed-properties"},next:{title:"Conditional Rendering",permalink:"/dddtdd-docs/frontend/vue3/core/essentials/conditional-rendering"}},a={},c=[{value:"Binding HTML Classes",id:"binding-html-classes",level:2},{value:"Binding to Objects",id:"binding-to-objects",level:3},{value:"Binding to Arrays",id:"binding-to-arrays",level:3},{value:"With Components",id:"with-components",level:3},{value:"Binding Inline Styles",id:"binding-inline-styles",level:2},{value:"Binding to Objects",id:"binding-to-objects-1",level:3},{value:"Binding to Arrays",id:"binding-to-arrays-1",level:3}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"class-and-style-bindings",children:"Class and Style Bindings"}),"\n",(0,t.jsx)(n.h2,{id:"binding-html-classes",children:"Binding HTML Classes"}),"\n",(0,t.jsx)(n.h3,{id:"binding-to-objects",children:"Binding to Objects"}),"\n",(0,t.jsxs)(n.p,{children:["We can ",(0,t.jsx)(n.strong,{children:"pass an object"})," to ",(0,t.jsx)(n.code,{children:":class"})," (short for ",(0,t.jsx)(n.code,{children:"v-bind:class"}),") to dynamically toggle classes"]}),"\n",(0,t.jsxs)(n.p,{children:["In addition, the ",(0,t.jsx)(n.code,{children:":class"})," directive can also ",(0,t.jsx)(n.strong,{children:"co-exist"})," with the plain class attribute"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'<div\r\n  class="static"\r\n  :class="{ active: isActive, \'text-danger\': hasError }"\r\n></div>\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const classObject = reactive({\r\n  active: true,\r\n  'text-danger': false\r\n})\r\n\r\n<div :class=\"classObject\"></div>\n"})}),"\n",(0,t.jsx)(n.h3,{id:"binding-to-arrays",children:"Binding to Arrays"}),"\n",(0,t.jsxs)(n.p,{children:["We can bind ",(0,t.jsx)(n.code,{children:":class"})," to an ",(0,t.jsx)(n.strong,{children:"array"})," to apply a list of classes"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const activeClass = ref('active')\r\nconst errorClass = ref('text-danger')\r\n\r\n<div :class=\"[activeClass, errorClass]\"></div>\r\n\r\n<div :class=\"[isActive ? activeClass : '', errorClass]\"></div>\r\n\r\n<div :class=\"[{ active: isActive }, errorClass]\"></div>\n"})}),"\n",(0,t.jsx)(n.h3,{id:"with-components",children:"With Components"}),"\n",(0,t.jsxs)(n.p,{children:["When you use the class attribute on a component with a single root element, those classes will be ",(0,t.jsx)(n.strong,{children:"added to the component's root element"}),", and ",(0,t.jsx)(n.strong,{children:"merged"})," with any existing class already on it."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'\x3c!-- MyComponent template using $attrs --\x3e\r\n<p :class="$attrs.class">Hi!</p>\r\n<span>This is a child component</span>\r\n\r\n\r\n<MyComponent class="baz" />\n'})}),"\n",(0,t.jsx)(n.h2,{id:"binding-inline-styles",children:"Binding Inline Styles"}),"\n",(0,t.jsx)(n.h3,{id:"binding-to-objects-1",children:"Binding to Objects"}),"\n",(0,t.jsxs)(n.p,{children:["Although ",(0,t.jsx)(n.strong,{children:"camelCase keys are recommended"}),", ",(0,t.jsx)(n.code,{children:":style"})," also supports kebab-cased CSS property keys (corresponds to how they are used in actual CSS)"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const activeColor = ref('red')\r\nconst fontSize = ref(30)\r\n\r\n<div :style=\"{ color: activeColor, fontSize: fontSize + 'px' }\"></div>\r\n\r\n<div :style=\"{ 'font-size': fontSize + 'px' }\"></div>\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const styleObject = reactive({\r\n  color: 'red',\r\n  fontSize: '13px'\r\n})\r\n\r\n<div :style=\"styleObject\"></div>\n"})}),"\n",(0,t.jsx)(n.h3,{id:"binding-to-arrays-1",children:"Binding to Arrays"}),"\n",(0,t.jsxs)(n.p,{children:["We can bind ",(0,t.jsx)(n.code,{children:":style"})," to an array of multiple style objects. These objects will be merged and applied to the same element"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'<div :style="[baseStyles, overridingStyles]"></div>\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>l});var t=s(96540);const i={},r=t.createContext(i);function d(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);