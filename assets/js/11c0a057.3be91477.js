"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[599],{78048:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var t=a(74848),i=a(28453);const r={},s=void 0,o={id:"programming-languages/python/pep/2016-0526-Syntax-for-Variable-Annotations",title:"2016-0526-Syntax-for-Variable-Annotations",description:"https://peps.python.org/pep-0526/",source:"@site/docs/00400-programming-languages/python/pep/2016-0526-Syntax-for-Variable-Annotations.md",sourceDirName:"00400-programming-languages/python/pep",slug:"/programming-languages/python/pep/2016-0526-Syntax-for-Variable-Annotations",permalink:"/dddtdd-docs/programming-languages/python/pep/2016-0526-Syntax-for-Variable-Annotations",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1726186426e3,frontMatter:{},sidebar:"docSidebar",previous:{title:"2016-0518-Specifying-Minimum-Build-System-Requirements-for-Python-Projects",permalink:"/dddtdd-docs/programming-languages/python/pep/2016-0518-Specifying-Minimum-Build-System-Requirements-for-Python-Projects"},next:{title:"2017-0544-Protocols-Structural-subtyping",permalink:"/dddtdd-docs/programming-languages/python/pep/2017-0544-Protocols-Structural-subtyping"}},l={},c=[{value:"Abstract",id:"abstract",level:2},{value:"Specification",id:"specification",level:2},{value:"Global and local variable annotations",id:"global-and-local-variable-annotations",level:3},{value:"Class and instance variable annotations",id:"class-and-instance-variable-annotations",level:3},{value:"Where annotations aren\u2019t allowed",id:"where-annotations-arent-allowed",level:3}];function d(n){const e={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://peps.python.org/pep-0526/",children:"https://peps.python.org/pep-0526/"})}),"\n",(0,t.jsx)(e.h2,{id:"abstract",children:"Abstract"}),"\n",(0,t.jsx)(e.p,{children:"This PEP aims at adding syntax to Python for annotating the types of variables (including class variables and instance variables), instead of expressing them through comments"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-py",children:"primes: List[int] = []\r\n\r\ncaptain: str  # Note: no initial value!\r\n\r\nclass Starship:\r\n    stats: ClassVar[Dict[str, int]] = {}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"specification",children:"Specification"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-py",children:"my_var: int\r\nmy_var = 5  # Passes type check.\r\nother_var: int  = 'a'  # Flagged as error by type checker,\r\n                       # but OK at runtime.\n"})}),"\n",(0,t.jsx)(e.p,{children:"the following three statements are equivalent"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-py",children:"var = value # type: annotation\r\nvar: annotation; var = value\r\nvar: annotation = value\n"})}),"\n",(0,t.jsx)(e.h3,{id:"global-and-local-variable-annotations",children:"Global and local variable annotations"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-py",children:"some_number: int           # variable without initial value\r\nsome_list: List[int] = []  # variable with initial value\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-py",children:"sane_world: bool\r\nif 2+2 == 4:\r\n    sane_world = True\r\nelse:\r\n    sane_world = False\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-py",children:"# Tuple packing with variable annotation syntax\r\nt: Tuple[int, ...] = (1, 2, 3)\r\n# or\r\nt: Tuple[int, ...] = 1, 2, 3  # This only works in Python 3.8+\r\n\r\n# Tuple unpacking with variable annotation syntax\r\nheader: str\r\nkind: int\r\nbody: Optional[List[str]]\r\nheader, kind, body = message\n"})}),"\n",(0,t.jsx)(e.h3,{id:"class-and-instance-variable-annotations",children:"Class and instance variable annotations"}),"\n",(0,t.jsxs)(e.p,{children:["In particular, the value-less notation ",(0,t.jsx)(e.code,{children:"a: int"})," allows one to annotate instance variables that should be initialized in ",(0,t.jsx)(e.code,{children:"__init__"})," or ",(0,t.jsx)(e.code,{children:"__new__"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-py",children:"class BasicStarship:\r\n    captain: str = 'Picard'               # instance variable with default\r\n    damage: int                           # instance variable without default\r\n    stats: ClassVar[Dict[str, int]] = {}  # class variable\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Since both variables happen to be ",(0,t.jsx)(e.strong,{children:"initialized at the class level"}),", it is useful to distinguish them by marking class variables as annotated with types wrapped in ",(0,t.jsx)(e.code,{children:"ClassVar[...]"})]}),"\n",(0,t.jsxs)(e.p,{children:["instance variables can be annotated in ",(0,t.jsx)(e.code,{children:"__init__"})," or other methods, rather than in the class"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-py",children:"from typing import Generic, TypeVar\r\nT = TypeVar('T')\r\n\r\nclass Box(Generic[T]):\r\n    def __init__(self, content):\r\n        self.content: T = content\n"})}),"\n",(0,t.jsx)(e.h3,{id:"where-annotations-arent-allowed",children:"Where annotations aren\u2019t allowed"}),"\n",(0,t.jsx)(e.p,{children:"Only single assignment targets and single right hand side values are allowed. In addition, one cannot annotate variables used in a for or with statement; they can be annotated ahead of time, in a similar manner to tuple unpacking"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-py",children:"a: int\r\nfor a in my_iter:\r\n    ...\r\n\r\nf: MyFile\r\nwith myfunc() as f:\r\n    ...\n"})})]})}function p(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},28453:(n,e,a)=>{a.d(e,{R:()=>s,x:()=>o});var t=a(96540);const i={},r=t.createContext(i);function s(n){const e=t.useContext(r);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),t.createElement(r.Provider,{value:e},n.children)}}}]);