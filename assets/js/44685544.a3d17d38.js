"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[7167],{63766:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var r=n(74848),s=n(28453);const a={},o="Dynamic Route Matching with Params",i={id:"frontend/vue3/router/essentials/dynamic-matching",title:"Dynamic Route Matching with Params",description:"In addition to $route.params, the $route object also exposes other useful information such as $route.query (if there is a query in the URL), $route.hash, etc",source:"@site/docs/00200-frontend/vue3/030-router/020-essentials/020-dynamic-matching.md",sourceDirName:"00200-frontend/vue3/030-router/020-essentials",slug:"/frontend/vue3/router/essentials/dynamic-matching",permalink:"/dddtdd-docs/frontend/vue3/router/essentials/dynamic-matching",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1720187019e3,sidebarPosition:20,frontMatter:{},sidebar:"docSidebar",previous:{title:"Getting Started",permalink:"/dddtdd-docs/frontend/vue3/router/essentials/getting-started"},next:{title:"Routes' Matching Syntax",permalink:"/dddtdd-docs/frontend/vue3/router/essentials/route-matching-syntax"}},c={},u=[{value:"Reacting to Params Changes",id:"reacting-to-params-changes",level:2},{value:"Catch all / 404 Not found Route",id:"catch-all--404-not-found-route",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"dynamic-route-matching-with-params",children:"Dynamic Route Matching with Params"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"import User from './User.vue'\r\n\r\n// these are passed to `createRouter`\r\nconst routes = [\r\n  // dynamic segments start with a colon\r\n  { path: '/users/:id', component: User },\r\n]\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-html",children:"<template>\r\n  <div>\r\n    \x3c!-- The current route is accessible as $route in the template --\x3e\r\n    User {{ $route.params.id }}\r\n  </div>\r\n</template>\n"})}),"\n",(0,r.jsxs)(t.p,{children:["In addition to ",(0,r.jsx)(t.code,{children:"$route.params"}),", the ",(0,r.jsx)(t.code,{children:"$route"})," object also exposes other useful information such as ",(0,r.jsx)(t.code,{children:"$route.query"})," (if there is a query in the URL), ",(0,r.jsx)(t.code,{children:"$route.hash"}),", etc"]}),"\n",(0,r.jsx)(t.h2,{id:"reacting-to-params-changes",children:"Reacting to Params Changes"}),"\n",(0,r.jsxs)(t.p,{children:["One thing to note when using routes with params is that when the user navigates from ",(0,r.jsx)(t.code,{children:"/users/johnny"})," to ",(0,r.jsx)(t.code,{children:"/users/jolyne"}),", ",(0,r.jsx)(t.strong,{children:"the same component instance will be reused"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"<script setup>\r\nimport { watch } from 'vue'\r\nimport { useRoute } from 'vue-router'\r\n\r\nconst route = useRoute()\r\n\r\nwatch(\r\n  () => route.params.id,\r\n  (newId, oldId) => {\r\n    // react to route changes...\r\n  }\r\n)\r\n<\/script>\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"<script setup>\r\nimport { onBeforeRouteUpdate } from 'vue-router'\r\n// ...\r\n\r\nonBeforeRouteUpdate(async (to, from) => {\r\n  // react to route changes...\r\n  userData.value = await fetchUser(to.params.id)\r\n})\r\n<\/script>\n"})}),"\n",(0,r.jsx)(t.h2,{id:"catch-all--404-not-found-route",children:"Catch all / 404 Not found Route"}),"\n",(0,r.jsxs)(t.p,{children:["If we want to match anything, we can use a ",(0,r.jsx)(t.strong,{children:"custom param regexp"})," by adding the regexp inside parentheses right after the param:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"const routes = [\r\n  // will match everything and put it under `$route.params.pathMatch`\r\n  { path: '/:pathMatch(.*)*', name: 'NotFound', component: NotFound },\r\n  // will match anything starting with `/user-` and put it under `$route.params.afterUser`\r\n  { path: '/user-:afterUser(.*)', component: UserGeneric },\r\n]\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"router.push({\r\n  name: 'NotFound',\r\n  // preserve current path and remove the first char to avoid the target URL starting with `//`\r\n  params: { pathMatch: route.path.substring(1).split('/') },\r\n  // preserve existing query and hash if any\r\n  query: route.query,\r\n  hash: route.hash,\r\n})\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var r=n(96540);const s={},a=r.createContext(s);function o(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);