"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[6865],{39695:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>a});var n=r(74848),s=r(28453);const i={title:"Writing Client Libraries"},l=void 0,o={id:"middleware/prometheus/writing_clientlibs",title:"Writing Client Libraries",description:"Conventions",source:"@site/docs/00600-middleware/prometheus/0510-writing_clientlibs.md",sourceDirName:"00600-middleware/prometheus",slug:"/middleware/prometheus/writing_clientlibs",permalink:"/dddtdd-docs/middleware/prometheus/writing_clientlibs",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1720187019e3,sidebarPosition:510,frontMatter:{title:"Writing Client Libraries"},sidebar:"docSidebar",previous:{title:"Client Libraries",permalink:"/dddtdd-docs/middleware/prometheus/instrumenting-clientlibs"},next:{title:"Pushing metrics",permalink:"/dddtdd-docs/middleware/prometheus/pushing-metrics"}},c={},a=[{value:"Conventions",id:"conventions",level:2},{value:"Overall structure",id:"overall-structure",level:2},{value:"Metrics",id:"metrics",level:2},{value:"Counter",id:"counter",level:3},{value:"Gauge",id:"gauge",level:3},{value:"Histogram",id:"histogram",level:3},{value:"Labels",id:"labels",level:3},{value:"Performance considerations",id:"performance-considerations",level:2}];function d(e){const t={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"conventions",children:"Conventions"}),"\n",(0,n.jsx)(t.p,{children:"The common use cases are (in order):"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"Counters"})," without labels spread liberally around libraries/applications."]}),"\n",(0,n.jsxs)(t.li,{children:["Timing functions/blocks of code in ",(0,n.jsx)(t.code,{children:"Summaries/Histograms"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"Gauges"})," to track current states of things (and their limits)."]}),"\n",(0,n.jsx)(t.li,{children:"Monitoring of batch jobs"}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"overall-structure",children:"Overall structure"}),"\n",(0,n.jsxs)(t.p,{children:["Clients MUST be written to be ",(0,n.jsx)(t.strong,{children:"callback based"})," internally"]}),"\n",(0,n.jsxs)(t.p,{children:["The key class is the ",(0,n.jsx)(t.code,{children:"Collector"}),". This has a method (typically called ",(0,n.jsx)(t.code,{children:"collect"}),") that ",(0,n.jsx)(t.strong,{children:"returns zero or more metrics and their samples"}),". Collectors get registered with a ",(0,n.jsx)(t.code,{children:"CollectorRegistry"}),'. Data is exposed by passing a CollectorRegistry to a class/method/function "bridge", which returns the metrics in a format Prometheus supports. Every time the CollectorRegistry is scraped it must callback to each of the Collectors\u2019 collect method']}),"\n",(0,n.jsxs)(t.p,{children:["The interface ",(0,n.jsx)(t.strong,{children:"most users"})," interact with are the Counter, Gauge, Summary, and Histogram ",(0,n.jsx)(t.code,{children:"Collectors"}),". These represent a ",(0,n.jsx)(t.strong,{children:"single metric"}),", and should cover the vast majority of use cases where a user is instrumenting their own code"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"CollectorRegistry"})," SHOULD offer ",(0,n.jsx)(t.code,{children:"register()/unregister()"})," functions, and a Collector SHOULD be allowed to be registered to multiple CollectorRegistrys."]}),"\n",(0,n.jsxs)(t.p,{children:["Client libraries MUST be ",(0,n.jsx)(t.strong,{children:"thread safe"})]}),"\n",(0,n.jsx)(t.h2,{id:"metrics",children:"Metrics"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"Counter"}),", ",(0,n.jsx)(t.code,{children:"Gauge"}),", Summary and ",(0,n.jsx)(t.code,{children:"Histogram"})," metric types are the primary interface by users."]}),"\n",(0,n.jsxs)(t.p,{children:["These should be ",(0,n.jsx)(t.strong,{children:"primarily used as file-static variables"}),", that is, global variables defined in the same file as the code they\u2019re instrumenting"]}),"\n",(0,n.jsxs)(t.p,{children:["There MUST be a ",(0,n.jsx)(t.strong,{children:"default CollectorRegistry"}),", the standard metrics MUST by ",(0,n.jsx)(t.strong,{children:"default implicitly register into it"})," with no special work required by the user. There ",(0,n.jsx)(t.strong,{children:"MUST be a way"})," to have metrics not register to the default CollectorRegistry, for use in batch jobs and unittests"]}),"\n",(0,n.jsx)(t.h3,{id:"counter",children:"Counter"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"Counter"})," is a monotonically increasing counter. It MUST NOT allow the value to decrease, however it MAY be reset to ",(0,n.jsx)(t.code,{children:"0"})," (such as by server restart)"]}),"\n",(0,n.jsx)(t.p,{children:"A counter MUST have the following methods:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"inc()"}),": Increment the counter by 1"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"inc(double v)"}),": Increment the counter by the given amount. MUST check that v >= 0"]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Counters MUST start at 0"}),"\n",(0,n.jsx)(t.h3,{id:"gauge",children:"Gauge"}),"\n",(0,n.jsx)(t.p,{children:"Gauge represents a value that can go up and down"}),"\n",(0,n.jsx)(t.p,{children:"A gauge MUST have the following methods:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"inc()"}),": Increment the gauge by 1"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"inc(double v)"}),": Increment the gauge by the given amount"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"dec()"}),": Decrement the gauge by 1"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"dec(double v)"}),": Decrement the gauge by the given amount"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"set(double v)"}),": Set the gauge to the given value"]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"histogram",children:"Histogram"}),"\n",(0,n.jsxs)(t.p,{children:["Histograms allow aggregatable distributions of events, such as ",(0,n.jsx)(t.strong,{children:"request latencies"}),". This is at its core a ",(0,n.jsx)(t.strong,{children:"counter per bucket"})]}),"\n",(0,n.jsxs)(t.p,{children:["A histogram MUST offer a way to manually choose the buckets. Ways to set buckets in a ",(0,n.jsx)(t.code,{children:"linear(start, width, count)"})," and ",(0,n.jsx)(t.code,{children:"exponential(start, factor, count)"})," fashion SHOULD be offered. Count MUST include the ",(0,n.jsx)(t.code,{children:"+Inf"})," bucket"]}),"\n",(0,n.jsx)(t.p,{children:"A histogram MUST have the following methods:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"observe(double v)"}),": Observe the given amoun"]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"labels",children:"Labels"}),"\n",(0,n.jsxs)(t.p,{children:["Client libraries ",(0,n.jsx)(t.strong,{children:"MUST NOT"})," allow users to have different label names for the same metric for Gauge/Counter/Summary/Histogram or any other Collector offered by the library"]}),"\n",(0,n.jsx)(t.p,{children:"While labels are powerful, the majority of metrics will not have labels"}),"\n",(0,n.jsxs)(t.p,{children:["A client library MUST allow for optionally specifying a list of label names at Gauge/Counter/Summary/Histogram ",(0,n.jsx)(t.strong,{children:"creation time"})]}),"\n",(0,n.jsxs)(t.p,{children:["The Child returned by ",(0,n.jsx)(t.code,{children:"labels()"})," SHOULD be cacheable by the user, to avoid having to look it up again - this matters in latency-critical code"]}),"\n",(0,n.jsx)(t.h2,{id:"performance-considerations",children:"Performance considerations"}),"\n",(0,n.jsxs)(t.p,{children:["In our experience the least performant is ",(0,n.jsx)(t.code,{children:"mutexes"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["Processor ",(0,n.jsx)(t.code,{children:"atomic"})," instructions tend to be in the middle, and generally acceptable"]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>l,x:()=>o});var n=r(96540);const s={},i=n.createContext(s);function l(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);