"use strict";(self.webpackChunkdoc_center=self.webpackChunkdoc_center||[]).push([[5391],{16943:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var n=s(74848),o=s(28453);const r={},i=void 0,c={id:"topic/test/perf-test/locust",title:"locust",description:"\u6982\u8ff0",source:"@site/docs/00800-topic/test/perf-test/00400-locust.md",sourceDirName:"00800-topic/test/perf-test",slug:"/topic/test/perf-test/locust",permalink:"/dddtdd-docs/topic/test/perf-test/locust",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1720187019e3,sidebarPosition:400,frontMatter:{},sidebar:"docSidebar",previous:{title:"k6",permalink:"/dddtdd-docs/topic/test/perf-test/k6"},next:{title:"\u817e\u8baftcps",permalink:"/dddtdd-docs/topic/test/perf-test/\u817e\u8baftcps"}},l={},d=[{value:"\u6982\u8ff0",id:"\u6982\u8ff0",level:2},{value:"\u534f\u8bae",id:"\u534f\u8bae",level:2},{value:"HTTP",id:"http",level:3},{value:"gRPC",id:"grpc",level:3}];function a(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"\u6982\u8ff0",children:"\u6982\u8ff0"}),"\n",(0,n.jsx)(t.p,{children:"Locust runs every user inside its own greenlet (a lightweight process/coroutine)"}),"\n",(0,n.jsxs)(t.p,{children:["Locust makes it easy to run load tests distributed over multiple machines. It is event-based (using ",(0,n.jsx)(t.strong,{children:"gevent"}),"), which makes it possible for a single process to handle many thousands concurrent users"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"https://www.gevent.org/intro.html",children:"https://www.gevent.org/intro.html"})}),"\n",(0,n.jsx)(t.h2,{id:"\u534f\u8bae",children:"\u534f\u8bae"}),"\n",(0,n.jsx)(t.p,{children:"Locust only comes with built-in support for HTTP/HTTPS but it can be extended to test almost any system. This is normally done by wrapping the protocol library and triggering a request event after each call has completed, to let Locust know what happened."}),"\n",(0,n.jsx)(t.h3,{id:"http",children:"HTTP"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:'import time\nfrom locust import HttpUser, task, between\n\nclass QuickstartUser(HttpUser):\n    wait_time = between(1, 5)\n\n    @task\n    def hello_world(self):\n        self.client.get("/hello")\n        self.client.get("/world")\n\n    @task(3)\n    def view_items(self):\n        for item_id in range(10):\n            self.client.get(f"/item?id={item_id}", name="/item")\n            time.sleep(1)\n\n    def on_start(self):\n        self.client.post("/login", json={"username":"foo", "password":"bar"})\n'})}),"\n",(0,n.jsx)(t.h3,{id:"grpc",children:"gRPC"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"https://docs.locust.io/en/latest/testing-other-systems.html#grpc",children:"https://docs.locust.io/en/latest/testing-other-systems.html#grpc"})})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>c});var n=s(96540);const o={},r=n.createContext(o);function i(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);